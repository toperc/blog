{"title":"Android开发约束布局ConstraintLayout学习总结","date":"2020-03-23T15:27:57.000Z","date_formatted":{"ll":"2020年3月23日","L":"2020/03/23","MM-DD":"03-23"},"link":"post/1584977277","comments":true,"tags":["布局"],"categories":["Android"],"updated":"2021-01-14T08:08:54.897Z","content":"<p>小伙伴都知道Android开发有常用的五大布局：LinearLayout、RelateLayout、FrameLayout、AbsolutLayout和TableLayout，今天再总结一个比较牛掰的一个布局——ConstraintLayout，完全可以代替LinearLayout和RelateLayout，具体为什么要使用他和怎么用是接下来需要说的。</p>\n<a id=\"more\"></a>\n<h2 id=\"constraintlayout介绍\">ConstraintLayout介绍<a title=\"#constraintlayout介绍\" href=\"#constraintlayout介绍\"></a></h2>\n<p>约束布局ConstraintLayout是一个Support库，可以在Api9以上的Android系统使用它，它的出现主要是为了解决布局嵌套过多的问题，以灵活的方式定位和调整小部件。从Android Studio 2.3起，官方的模板默认使用ConstraintLayout。</p>\n<h2 id=\"constraintlayout使用缘由\">ConstraintLayout使用缘由<a title=\"#constraintlayout使用缘由\" href=\"#constraintlayout使用缘由\"></a></h2>\n<p>在开发过程中经常能遇到一些复杂的UI，可能会出现布局嵌套过多的问题，嵌套得越多，设备绘制视图所需的时间和计算功耗也就越多，遇到此情况我们更多的是采用RelativeLayout。</p>\n<p>既然用RelativeLayout可以解决问题，为什么还要使用ConstraintLayout呢？因为ConstraintLayout使用起来比RelativeLayout更灵活，性能更出色！还有一点就是ConstraintLayout可以按照比例约束控件位置和尺寸，能够更好地适配屏幕大小不同的机型。</p>\n<h2 id=\"constraintlayout用法\">ConstraintLayout用法<a title=\"#constraintlayout用法\" href=\"#constraintlayout用法\"></a></h2>\n<h3 id=\"添加依赖\">添加依赖<a title=\"#添加依赖\" href=\"#添加依赖\"></a></h3>\n<p>首先我们需要在app/build.gradle文件中添加ConstraintLayout的依赖：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&#x27;com.android.support.constraint:constraint-layout:1.1.3&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"相对定位\">相对定位<a title=\"#相对定位\" href=\"#相对定位\"></a></h3>\n<p>相对定位是部件对于另一个位置的约束，如图：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200406000741165.png\" alt=\"相对定位示例\"></p>\n<p>相应的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    android:text=<span class=\"string\">&quot;TextView1&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@+id/TextView1&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>面代码中在TextView2里用到了app:layout_constraintLeft_toRightOf=&quot;@+id/TextView1&quot;这个属性，他的意思是把TextView2的左边约束到TextView1的右边</p>\n<h4 id=\"相对定位的常用属性\">相对定位的常用属性<a title=\"#相对定位的常用属性\" href=\"#相对定位的常用属性\"></a></h4>\n<ul>\n<li><strong>layout_constraintLeft_toLeftOf</strong><br>\nview1左边对齐view2的左边</li>\n<li><strong>layout_constraintLeft_toRightOf</strong><br>\nview1左边对齐view2的右边</li>\n<li><strong>layout_constraintRight_toLeftOf</strong><br>\nview1右边对齐view2的左边</li>\n<li><strong>layout_constraintRight_toRightOf</strong><br>\nview1右边对齐view2的右边</li>\n<li><strong>layout_constraintTop_toTopOf</strong><br>\nview1顶部对齐view2的顶部</li>\n<li><strong>layout_constraintTop_toBottomOf</strong><br>\nview1顶部对齐view2的底部</li>\n<li><strong>layout_constraintBottom_toTopOf</strong><br>\nview1底部对齐view2的顶部</li>\n<li><strong>layout_constraintBottom_toBottomOf</strong><br>\nview1底部对齐view2的底部</li>\n<li><strong>layout_constraintBaseline_toBaselineOf</strong><br>\nview1基准线对齐view2的基准线</li>\n<li><strong>layout_constraintStart_toEndOf</strong><br>\nview1起始位置对齐view2的结束位置</li>\n<li><strong>layout_constraintStart_toStartOf</strong><br>\nview1起始位置view2的起始位置</li>\n<li><strong>layout_constraintEnd_toStartOf</strong><br>\nview1结束位置对齐view2的起始位置</li>\n<li><strong>layout_constraintEnd_toEndOf</strong><br>\nview1结束位置对齐view2的结束位置</li>\n</ul>\n<p>两个TextView的高度不一致，但是又希望他们文本对齐，这个时候就可以使用layout_constraintBaseline_toBaselineOf，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    .../&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@+id/TextView1&quot;</span> </span><br><span class=\"line\">    app:layout_constraintBaseline_toBaselineOf=<span class=\"string\">&quot;@+id/TextView1&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>效果如下:<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405230730700.png\" alt=\"layout_constraintBaseline_toBaselineOf效果图\"></p>\n<h3 id=\"角度定位\">角度定位<a title=\"#角度定位\" href=\"#角度定位\"></a></h3>\n<p>角度定位指的是可以用一个角度和一个距离来约束两个空间的中心。举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintCircle=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    app:layout_constraintCircleAngle=<span class=\"string\">&quot;120&quot;</span></span><br><span class=\"line\">    app:layout_constraintCircleRadius=<span class=\"string\">&quot;150dp&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>上面例子中的TextView2用到了3个属性：<br>\napp:layout_constraintCircle=“@+id/TextView1”<br>\napp:layout_constraintCircleAngle=“120”（角度）<br>\napp:layout_constraintCircleRadius=“150dp”（距离）</p>\n<p>指的是TextView2的中心在TextView1的中心的120度，距离为150dp，效果如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405230705177.png\" alt=\"角度定位效果图\"></p>\n<h3 id=\"边距\">边距<a title=\"#边距\" href=\"#边距\"></a></h3>\n<h4 id=\"常用margin\">常用margin<a title=\"#常用margin\" href=\"#常用margin\"></a></h4>\n<ul>\n<li>android:layout_marginStart</li>\n<li>android:layout_marginEnd</li>\n<li>android:layout_marginLeft</li>\n<li>android:layout_marginTop</li>\n<li>android:layout_marginRight</li>\n<li>android:layout_marginBottom</li>\n</ul>\n<p>在使用margin的时候要注意两点：</p>\n<ol>\n<li>在ConstraintLayout里面要实现margin，必须先约束该控件在ConstraintLayout里的位置</li>\n<li>margin只能大于等于0</li>\n</ol>\n<h4 id=\"gonemargin\">goneMargin<a title=\"#gonemargin\" href=\"#gonemargin\"></a></h4>\n<p>goneMargin主要用于约束的控件可见性被设置为gone的时候使用的margin值，属性如下：</p>\n<ul>\n<li>layout_goneMarginStart</li>\n<li>layout_goneMarginEnd</li>\n<li>layout_goneMarginLeft</li>\n<li>layout_goneMarginTop</li>\n<li>layout_goneMarginRight</li>\n<li>layout_goneMarginBottom</li>\n</ul>\n<p>假设TextView2的左边约束在TextView1的右边，并给TextView2设一个app:layout_goneMarginLeft=“10dp”，代码如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;android.support.constraint.ConstraintLayout </span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">        .../&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">        app:layout_goneMarginLeft=<span class=\"string\">&quot;10dp&quot;</span></span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure>\n<p>效果图：<br>\n<img src=\"https://img-blog.csdnimg.cn/2020040523063763.png\" alt=\"goneMargin效果图1\"></p>\n<p>这个时候把TextView1的可见性设为gone，效果如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405230617303.png\" alt=\"goneMargin效果图2\"></p>\n<p>extView1消失后，TextView2有一个距离左边10dp的边距。</p>\n<h3 id=\"居中\">居中<a title=\"#居中\" href=\"#居中\"></a></h3>\n<p>ConstraintLayout居中写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_constraintBottom_toBottomOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">app:layout_constraintLeft_toLeftOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">app:layout_constraintTop_toTopOf=<span class=\"string\">&quot;parent&quot;</span></span><br></pre></td></tr></table></figure>\n<p>水平居中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_constraintLeft_toLeftOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span></span><br></pre></td></tr></table></figure>\n<p>垂直居中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_constraintBottom_toBottomOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">app:layout_constraintTop_toTopOf=<span class=\"string\">&quot;parent&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"偏移\">偏移<a title=\"#偏移\" href=\"#偏移\"></a></h3>\n<p>居中后可采用margin进行适当偏移：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    android:layout_marginLeft=<span class=\"string\">&quot;100dp&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toLeftOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200405230547437.png\" alt=\"居中后margin适当偏移效果图\" class=\"φcx\"></p>\n<p>除了这种偏移外，ConstraintLayout还提供了另外一种偏移的属性：</p>\n<ul>\n<li>layout_constraintHorizontal_bias 水平偏移</li>\n<li>layout_constraintVertical_bias 垂直偏移</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    app:layout_constraintHorizontal_bias=<span class=\"string\">&quot;0.3&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toLeftOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200405230512508.png\" alt=\"layout_constraintHorizontal_bias偏移效果图\" class=\"φcx\"></p>\n<p>解释：<br>\n居中时layout_constraintHorizontal_bias默认为0.5即50%（左偏移50%右偏移50%），0.3(左偏移30%右偏移70%)</p>\n<h3 id=\"尺寸约束\">尺寸约束<a title=\"#尺寸约束\" href=\"#尺寸约束\"></a></h3>\n<p>控件的尺寸可以通过四种不同方式指定。</p>\n<h4 id=\"使用指定的尺寸\">使用指定的尺寸<a title=\"#使用指定的尺寸\" href=\"#使用指定的尺寸\"></a></h4>\n<p>这个就不说了。</p>\n<h4 id=\"使用wrap_content\">使用wrap_content<a title=\"#使用wrap_content\" href=\"#使用wrap_content\"></a></h4>\n<p>当控件的高度或宽度为wrap_content时，可以使用下列属性来控制最大、最小的高度或宽度：</p>\n<ul>\n<li>android:minWidth 最小的宽度</li>\n<li>android:minHeight 最小的高度</li>\n<li>android:maxWidth 最大的宽度</li>\n<li>android:maxHeight 最大的高度</li>\n</ul>\n<p>另外使用这些属性需要加上强制约束：</p>\n<ul>\n<li>app:constrainedWidth=”true”</li>\n<li>app:constrainedHeight=”true”</li>\n</ul>\n<h4 id=\"使用0dp\">使用0dp<a title=\"#使用0dp\" href=\"#使用0dp\"></a></h4>\n<p>官方不推荐在ConstraintLayout中使用match_parent，可以设置 0dp (MATCH_CONSTRAINT) 配合约束代替match_parent，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_marginLeft=<span class=\"string\">&quot;50dp&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toLeftOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    android:visibility=<span class=\"string\">&quot;visible&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>宽度设为0dp，左右两边约束parent的左右两边，并设置左边边距为50dp，效果如下:<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405230432125.png\" alt=\"0dp代替MATCH_CONSTRAINT效果图\"></p>\n<h4 id=\"控件内宽高比\">控件内宽高比<a title=\"#控件内宽高比\" href=\"#控件内宽高比\"></a></h4>\n<p>当宽或高至少有一个尺寸被设置为0dp时，可以通过属性layout_constraintDimensionRatio设置宽高比，举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintDimensionRatio=<span class=\"string\">&quot;1:1&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toLeftOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>宽设置为0dp，宽高比设置为1:1，这个时候TextView1是一个正方形。</p>\n<p>除此之外，在设置宽高比的值的时候，还可以在前面加W或H，分别指定宽度或高度限制。 例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_constraintDimensionRatio=<span class=\"string\">&quot;H,2:3&quot;</span>指的是 高:宽=<span class=\"number\">2</span>:<span class=\"number\">3</span></span><br><span class=\"line\">app:layout_constraintDimensionRatio=<span class=\"string\">&quot;W,2:3&quot;</span>指的是 宽:高=<span class=\"number\">2</span>:<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"链\">链<a title=\"#链\" href=\"#链\"></a></h3>\n<p>如果两个或以上控件通过下图的方式约束在一起，就可以认为是他们是一条链。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toLeftOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toLeftOf=<span class=\"string\">&quot;@+id/TextView2&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toLeftOf=<span class=\"string\">&quot;@+id/TextView3&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView3&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>个TextView相互约束，两端两个TextView分别与parent约束，成为一条链，效果如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405230359874.png\" alt=\"链效果图\"></p>\n<h4 id=\"链样式\">链样式<a title=\"#链样式\" href=\"#链样式\"></a></h4>\n<p>一条链的第一个控件是这条链的链头，我们可以在链头中设置 layout_constraintHorizontal_chainStyle来改变整条链的样式，提供有三种样式：</p>\n<ul>\n<li>spread</li>\n<li>spread_inside</li>\n<li>packed</li>\n</ul>\n<p>对应这三种样式的效果图如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405230325474.png\" alt=\"链三种样式效果图\"></p>\n<h4 id=\"权重链\">权重链<a title=\"#权重链\" href=\"#权重链\"></a></h4>\n<p>可以留意到上面所用到的3个TextView宽度都为wrap_content，如果我们把宽度都设为0dp，这个时候可以在每个TextView中设置横向权重layout_constraintHorizontal_weight(constraintVertical为纵向)来创建一个权重链，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toLeftOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toLeftOf=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    app:layout_constraintHorizontal_weight=<span class=\"string\">&quot;2&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toLeftOf=<span class=\"string\">&quot;@+id/TextView3&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintHorizontal_weight=<span class=\"string\">&quot;3&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView3&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;0dp&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintHorizontal_weight=<span class=\"string\">&quot;4&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>效果图如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405230254984.png\" alt=\"权重链效果图\"></p>\n<h2 id=\"辅助工具\">辅助工具<a title=\"#辅助工具\" href=\"#辅助工具\"></a></h2>\n<h3 id=\"optimizer（约束优化）\">Optimizer（约束优化）<a title=\"#optimizer（约束优化）\" href=\"#optimizer（约束优化）\"></a></h3>\n<p>当我们使用 MATCH_CONSTRAINT 时，ConstraintLayout 将对控件进行 2 次测量，ConstraintLayout在1.1中可以通过设置 layout_optimizationLevel 进行优化，可设置的值有：</p>\n<ul>\n<li>none：无优化</li>\n<li>standard：仅优化直接约束和屏障约束（默认）</li>\n<li>direct：优化直接约束</li>\n<li>barrier：优化屏障约束</li>\n<li>chain：优化链约束</li>\n<li>dimensions：优化尺寸测量</li>\n</ul>\n<h3 id=\"barrier（屏障标准）\">Barrier（屏障标准）<a title=\"#barrier（屏障标准）\" href=\"#barrier（屏障标准）\"></a></h3>\n<p>假设有3个控件ABC，C在AB的右边，但是AB的宽是不固定的，这个时候C无论约束在A的右边或者B的右边都不对。当出现这种情况可以用Barrier来解决。Barrier可以在多个控件的一侧建立一个屏障，如下所示：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405230215138.png\" alt=\"Barrier屏障标准示意图\"></p>\n<p>这个时候C只要约束在Barrier的右边就可以了，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintTop_toBottomOf=<span class=\"string\">&quot;@+id/TextView1&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;android.support.constraint.Barrier</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/barrier&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:barrierDirection=<span class=\"string\">&quot;right&quot;</span></span><br><span class=\"line\">    app:constraint_referenced_ids=<span class=\"string\">&quot;TextView1,TextView2&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView3&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@+id/barrier&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>app:barrierDirection为屏障所在的位置，可设置的值有：bottom、end、left、right、start、top</li>\n<li>app:constraint_referenced_ids为屏障引用的控件，可设置多个(用“,”隔开)</li>\n</ul>\n<h3 id=\"group（组概念）\">Group（组概念）<a title=\"#group（组概念）\" href=\"#group（组概念）\"></a></h3>\n<p>Group可以把多个控件归为一组，方便隐藏或显示一组控件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView1&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView2&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@+id/TextView1&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/TextView3&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toRightOf=<span class=\"string\">&quot;@id/TextView2&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200405230110493.png\" alt=\"组概念效果图\"><br>\n现在有3个并排的TextView，用Group把TextView1和TextView3归为一组，再设置这组控件的可见性，如下所示：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405230030738.png\" alt=\"组隐藏效果图\"></p>\n<h3 id=\"placeholder（占位符）\">Placeholder（占位符）<a title=\"#placeholder（占位符）\" href=\"#placeholder（占位符）\"></a></h3>\n<p>Placeholder指的是占位符。在Placeholder中可使用setContent()设置另一个控件的id，使这个控件移动到占位符的位置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;android.support.constraint.Placeholder</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/placeholder&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    app:content=<span class=\"string\">&quot;@+id/textview&quot;</span></span><br><span class=\"line\">    app:layout_constraintLeft_toLeftOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintTop_toTopOf=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;TextView</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/textview&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:background=<span class=\"string\">&quot;#cccccc&quot;</span></span><br><span class=\"line\">    android:padding=<span class=\"string\">&quot;16dp&quot;</span></span><br><span class=\"line\">    android:text=<span class=\"string\">&quot;TextView&quot;</span></span><br><span class=\"line\">    android:textColor=<span class=\"string\">&quot;#000000&quot;</span></span><br><span class=\"line\">    app:layout_constraintRight_toRightOf=<span class=\"string\">&quot;parent&quot;</span></span><br><span class=\"line\">    app:layout_constraintTop_toTopOf=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>新建一个Placeholder约束在屏幕的左上角，新建一个TextView约束在屏幕的右上角，在Placeholder中设置 app:content=“@+id/textview”，这时TextView会跑到屏幕的左上角。效果如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405225920668.png\" alt=\"占位符效果图\"></p>\n<h3 id=\"guideline（辅助线）\">Guideline（辅助线）<a title=\"#guideline（辅助线）\" href=\"#guideline（辅助线）\"></a></h3>\n<p>Guildline像辅助线一样，在预览的时候帮助你完成布局（不会显示在界面上）。</p>\n<p>Guildline的主要属性：</p>\n<ul>\n<li>android:orientation 垂直vertical，水平horizontal</li>\n<li>layout_constraintGuide_begin 开始位置</li>\n<li>layout_constraintGuide_end 结束位置</li>\n<li>layout_constraintGuide_percent 距离顶部的百分比(orientation = horizontal时则为距离左边)</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;android.support.constraint.Guideline</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/guideline1&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;horizontal&quot;</span></span><br><span class=\"line\">    app:layout_constraintGuide_begin=<span class=\"string\">&quot;50dp&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;android.support.constraint.Guideline</span><br><span class=\"line\">    android:id=<span class=\"string\">&quot;@+id/guideline2&quot;</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">    android:orientation=<span class=\"string\">&quot;vertical&quot;</span></span><br><span class=\"line\">    app:layout_constraintGuide_percent=<span class=\"string\">&quot;0.5&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>guideline1为水平辅助线，开始位置是距离顶部50dp，guideline2位垂直辅助线，开始位置为屏幕宽的0.5(中点位置)，效果如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405225814467.png\" alt=\"guideline效果图\"></p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout\">https://developer.android.google.cn/reference/android/support/constraint/ConstraintLayout</a></li>\n<li><a href=\"https://www.jianshu.com/p/17ec9bd6ca8a\">https://www.jianshu.com/p/17ec9bd6ca8a</a></li>\n<li><a href=\"https://blog.csdn.net/qq_38520096/article/details/80813994\">https://blog.csdn.net/qq_38520096/article/details/80813994</a></li>\n</ul>\n","prev":{"title":"Android开发View滑动冲突处理","link":"post/1586534751"},"next":{"title":"View手势GestureDetector使用","link":"post/1584803165"},"plink":"https://blog.ixin.run/post/1584977277/","toc":[{"id":"constraintlayout介绍","title":"ConstraintLayout介绍","index":"1"},{"id":"constraintlayout使用缘由","title":"ConstraintLayout使用缘由","index":"2"},{"id":"constraintlayout用法","title":"ConstraintLayout用法","index":"3","children":[{"id":"添加依赖","title":"添加依赖","index":"3.1"},{"id":"相对定位","title":"相对定位","index":"3.2"},{"id":"角度定位","title":"角度定位","index":"3.3"},{"id":"边距","title":"边距","index":"3.4"},{"id":"居中","title":"居中","index":"3.5"},{"id":"偏移","title":"偏移","index":"3.6"},{"id":"尺寸约束","title":"尺寸约束","index":"3.7"},{"id":"链","title":"链","index":"3.8"}]},{"id":"辅助工具","title":"辅助工具","index":"4","children":[{"id":"optimizer（约束优化）","title":"Optimizer（约束优化）","index":"4.1"},{"id":"barrier（屏障标准）","title":"Barrier（屏障标准）","index":"4.2"},{"id":"group（组概念）","title":"Group（组概念）","index":"4.3"},{"id":"placeholder（占位符）","title":"Placeholder（占位符）","index":"4.4"},{"id":"guideline（辅助线）","title":"Guideline（辅助线）","index":"4.5"}]},{"id":"参考","title":"参考","index":"5"}],"reward":true,"copyright":{"custom":"转载请注明出处，谢谢支持。"}}