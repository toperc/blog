{"title":"View创建的那些事儿","date":"2018-01-29T04:24:17.000Z","date_formatted":{"ll":"2018年1月29日","L":"2018/01/29","MM-DD":"01-29"},"link":"posts/1517199857","comments":true,"tags":["View视图"],"categories":["Android"],"updated":"2021-01-29T12:51:44.649Z","content":"<p>本来是想总结view的绘制测量过程，但是一开始就来个measure、layout、draw总感觉让人有点丈二的和尚摸不着头脑。什么时候添加的这个view？谁控制添加的？它为什么能控制添加？这个view现在在哪呢？等等一系列问题都出来了。</p>\n<a id=\"more\"></a>\n<h2 id=\"理解几个概念\">理解几个概念<a title=\"#理解几个概念\" href=\"#理解几个概念\"></a></h2>\n<p>在学习研究View创建过程先明白几个概念，帮助后边理清思路，这些包括Activity、ActivityThread、Window、PhoneWindow、WindowManagerService、WindowManager、ViewRootImpl、surface、DecorView。这些都是与view有关的，大部分都是framework层，这里简单介绍一下各自的作用，为后边view的创建及绘制渲染做准备。</p>\n<ul>\n<li><strong>Activity</strong>：这个都认识，四大组件之一主要用于与用户进行交互处理，每个 Activity 都会获得一个用于绘制其用户界面的窗口,来呈现各种各样的布局。</li>\n<li><strong>ActivityThread</strong>：主线程或UI线程，主要的作用是根据AMS(ActivityManagerService)负责调度和执行activities、broadcasts和其它操作。</li>\n<li><strong>Window</strong>：往虚的说是视图窗口，往实的说是一个抽象类。它提供了一套标准的UI方法，比如添加背景，标题等等。Window 有三种类型，分别是应用 Window、子 Window 和系统 Window。应用类 Window 对应一个 Acitivity，子 Window 不能单独存在，需要依附在特定的父 Window 中，比如常见的一些 Dialog 就是一个子 Window。</li>\n<li><strong>PhoneWindow</strong>：Window的实现类，可以通过实现具体抽象方法去绘制窗口。DecorView作为该类的成员变量，可以在此类中获取DecorView的实例。</li>\n<li><strong>DecorView</strong>：FramLayout的子类，作为窗口中最顶层的view，起到一个基础框架作用。内部包含对view的measure、layout、draw、onAttachedToWindow、以及触摸事件处理等等所有与view绘制相关的功能。</li>\n<li><strong>ViewRootImpl</strong>：作为WindowManager和DecorView之间的纽带，主要作用是协助WindowManager将DecorView添加到Window中，并获取顶层视图的MeasureSpec，然后对ViewGroup和子View进行迭代测量绘制，最终将View展现出来。</li>\n<li><strong>WindowManager</strong>：是一个接口，主要用来管理窗口的一些状态、属性、view增加、删除、更新、窗口顺序、消息收集和处理等，继承自接口ViewManager(内含有三个方法addView、updateViewLayout、removeView)，由WindowManagerImpl来进行实现。</li>\n<li><strong>WindowManagerGlobal</strong>：WindowManagerImpl内部成员变量，是一个WindowManager全局工具类，WindowManager中View的增加、删除、更新以及WindowManagerService实例的获取等最终处理都是在此工具类中处理的。</li>\n<li><strong>WindowManagerService</strong>：位于 Framework 层的窗口管理服务，它的职责就是管理系统中的所有窗口的排布和次序。</li>\n<li><strong>Surface</strong>：源码给出的解释<code>Handle onto a raw buffer that is being managed by the screen compositor</code>，Surface中的Canvas成员是专门用于供程序员画图的场所，就像黑板一样；其中的原始缓冲区是用来保存数据的地方；Surface本身的作用类似一个句柄，得到了这个句柄就可以得到其中的Canvas、原始缓冲区以及其它方面的内容，每一个window都对应一个surface，作为窗口的“底板”，窗口上各种绘制排版都是在此底板上展现的。由WindowManagerService进行分配。</li>\n</ul>\n<h2 id=\"屏幕显示过程\">屏幕显示过程<a title=\"#屏幕显示过程\" href=\"#屏幕显示过程\"></a></h2>\n<p>上边提到了Surface扮演着在一块窗口上管理绘图数据的角色。WindowManagerService职责就是管理系统中的所有窗口，每添加一个窗口的过程，其实就是 WindowManagerService 为其分配一块 Surface 的过程，一块块的 Surface 在 WindowManagerService 的管理下有序的排列在屏幕上，Android 才得以呈现出多姿多彩的界面。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/D97DC7187F9049FCB98B76D613985F20?method=download&amp;shareKey=a00e91e981d4df546247bfcd097d26be\" alt=\"屏幕显示过程图\"></p>\n<h2 id=\"ui界面层级结构\">UI界面层级结构<a title=\"#ui界面层级结构\" href=\"#ui界面层级结构\"></a></h2>\n<p>Activity作为四大组件之首承载着view的展示和处理的角色。无论是触发桌面Launcher还是startActivity最终的启动过程都是由ActivityThread来负责支配的。界面启动后，Activity作为一个载体承载window，然后各种视图依次展现。<br>\n上边提到数据缓存区创建因而也就能得到一个window的显示区域，在window内部中又有各种各样的view来呈现多姿多彩的内容，DecorView便是这颗ViewTree的根节点，DecorView包含两部分，TitleView和ContentView，TitleView受主题的限制有时我们不需要显示他，我们自己定义的主要内容显示在ContentView中。</p>\n<p>UI界面架构图:<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/DEFFD33BC96A419D9639F0EAD20116AA?method=download&amp;shareKey=4d103b17e0da8f7f911045faf881f0c0\" alt=\"UI界面架构图\"></p>\n<p>ViewTree结构图:<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/58FD0346398B4758840EB4594EA2A436?method=download&amp;shareKey=ebf65ad50e461817b9901b8e10c09ea5\" alt=\"ViewTree结构图\"></p>\n<p>ContentView中展示的View有两种形式，View和ViewGroup，其实最终都归为View，下边是一副view的拓展图，可以帮助更好的理解各种view的来源。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/6F9D7D5B264D4F64A90F4547D05A1A0A?method=download&amp;shareKey=71b86ae8a15282bcf4c1dee49ce83594\" alt=\"view拓展图\" class=\"φcx\"></p>\n<h2 id=\"从setcontentview说起\">从setContentView说起<a title=\"#从setcontentview说起\" href=\"#从setcontentview说起\"></a></h2>\n<p>这是一个老生常谈的问题，这里都认识更容起步，setContentView这一部分是将布局文件加载到DecorView中，不涉及DecorView如何填充到Window中（后续再说这一部分）。<br>\n当我们自定义Activity继承自android.app.Activity时候，调用的setContentView()方法是Activity类的，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"meta\">@LayoutRes</span> <span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</span><br><span class=\"line\">    getWindow().setContentView(layoutResID);</span><br><span class=\"line\">    initWindowDecorActionBar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的getWindow()就是PhoneWindow，走的就是PhoneWindow的setContentView()方法。而PhoneWindow是在Activity的attach()方法中进行实例化的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context,...)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//绑定上下文</span></span><br><span class=\"line\">    attachBaseContext(context);   </span><br><span class=\"line\">    </span><br><span class=\"line\">    mFragments.attachHost(<span class=\"keyword\">null</span> <span class=\"comment\">/*parent*/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建Window的实现类PhoneWindow</span></span><br><span class=\"line\">    mWindow = <span class=\"keyword\">new</span> PhoneWindow(<span class=\"keyword\">this</span>, window);</span><br><span class=\"line\">    mWindow.setWindowControllerCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">//绑定回调监听，一旦window有相关动作回调给Activtiy</span></span><br><span class=\"line\">    mWindow.setCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    mWindow.setOnWindowDismissedCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    ......</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">//设置WindowManager</span></span><br><span class=\"line\">    mWindow.setWindowManager(</span><br><span class=\"line\">            (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</span><br><span class=\"line\">            mToken, mComponent.flattenToString(),</span><br><span class=\"line\">            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mWindow.setContainer(mParent.getWindow());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//通过getWindowManager获取WindowManager实例WindowManagerImpl</span></span><br><span class=\"line\">    mWindowManager = mWindow.getWindowManager();</span><br><span class=\"line\">    mCurrentConfig = config;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"01#phonewindow#setcontentview()\">01#PhoneWindow#setContentView()<a title=\"#01#phonewindow#setcontentview()\" href=\"#01#phonewindow#setcontentview()\"></a></h3>\n<p>先看一个PhoneWindow的setContentView()源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></span><br><span class=\"line\">    <span class=\"comment\">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></span><br><span class=\"line\">    <span class=\"comment\">// before this happens.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果父容器空，初始化父容器</span></span><br><span class=\"line\">        installDecor();     </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果父容器不为空，移除所有子View</span></span><br><span class=\"line\">        mContentParent.removeAllViews();    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</span><br><span class=\"line\">                getContext());</span><br><span class=\"line\">        transitionTo(newScene);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//一般情况下我们不需要过度动画特性，走这一步进行布局资源文件加载</span></span><br><span class=\"line\">        mLayoutInflater.inflate(layoutResID, mContentParent);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mContentParent.requestApplyInsets();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Callback cb = getCallback();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb != <span class=\"keyword\">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//回调方法通知Activity窗口内容发生了改变</span></span><br><span class=\"line\">        cb.onContentChanged();    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mContentParentExplicitlySet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setContentView最重要的两件事：第一初始化父容器；第二加载布局文件。接着看一下installDecor()方法内部怎么实现的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">installDecor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mForceDecorInstall = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDecor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.实例化DecorView</span></span><br><span class=\"line\">        mDecor = generateDecor(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</span><br><span class=\"line\">        mDecor.setIsRootNamespace(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        mDecor.setWindow(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mContentParent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//2.生成父容器</span></span><br><span class=\"line\">        mContentParent = generateLayout(mDecor);    </span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在初始installdecor()方法中同样做了重要的两件事：第一实例化DecorView；第二生成父容器。实例DecoView很简单，源码就是new出来一个，哈哈。关键第二步生成父容器涉及了针对DecorView主题以及TitleView的标题、标题Icon等设定做好多工作。这里可以粗略的看几个重点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ViewGroup <span class=\"title\">generateLayout</span><span class=\"params\">(DecorView decor)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Apply data from current theme.</span></span><br><span class=\"line\">    <span class=\"comment\">//获取系统Window主题资源</span></span><br><span class=\"line\">    TypedArray a = getWindowStyle();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//根据主题资源设定父窗口样式</span></span><br><span class=\"line\">    mIsFloating = a.getBoolean(R.styleable.Window_windowIsFloating, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flagsToUpdate = (FLAG_LAYOUT_IN_SCREEN|FLAG_LAYOUT_INSET_DECOR)</span><br><span class=\"line\">            &amp; (~getForcedWindowFlags());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mIsFloating) &#123;</span><br><span class=\"line\">        setLayout(WRAP_CONTENT, WRAP_CONTENT);</span><br><span class=\"line\">        setFlags(<span class=\"number\">0</span>, flagsToUpdate);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        setFlags(FLAG_LAYOUT_IN_SCREEN|FLAG_LAYOUT_INSET_DECOR, flagsToUpdate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//设置系统状态栏</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.getBoolean(R.styleable.Window_windowLightStatusBar, <span class=\"keyword\">false</span>)) &#123;</span><br><span class=\"line\">        decor.setSystemUiVisibility(</span><br><span class=\"line\">                decor.getSystemUiVisibility() | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> contentParent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>至此，PhoneWindow中setContentView()的初始化父容器过程完毕，接下来分析布局资源文件加载过程。</p>\n<h3 id=\"02#phonewindow#mlayoutinflater.inflate()\">02#PhoneWindow#mLayoutInflater.inflate()<a title=\"#02#phonewindow#mlayoutinflater.inflate()\" href=\"#02#phonewindow#mlayoutinflater.inflate()\"></a></h3>\n<p>PhoneWindow的setContentView()方法中调用了LayoutInflater的inflate()方法来填充布局，这个方法的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(<span class=\"meta\">@LayoutRes</span> <span class=\"keyword\">int</span> resource, <span class=\"meta\">@Nullable</span> ViewGroup root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inflate(resource, root, root != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(<span class=\"meta\">@LayoutRes</span> <span class=\"keyword\">int</span> resource, <span class=\"meta\">@Nullable</span> ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Resources res = getContext().getResources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;INFLATING from resource: \\&quot;&quot;</span> + res.getResourceName(resource) + <span class=\"string\">&quot;\\&quot; (&quot;</span></span><br><span class=\"line\">                + Integer.toHexString(resource) + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//获取Xml解析对象</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> XmlResourceParser parser = res.getLayout(resource);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//进一步加载布局资源</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflate(parser, root, attachToRoot);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        parser.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n<p>这个方法的主要作用就是为了拿到XmlResourceParser实例对象进行接下来的xml解析，平时我们动态加载自定义view最终也是走的这个方法，接下来看xml解析做的工作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">inflate</span><span class=\"params\">(XmlPullParser parser, <span class=\"meta\">@Nullable</span> ViewGroup root, <span class=\"keyword\">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mConstructorArgs) &#123;</span><br><span class=\"line\">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">&quot;inflate&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Context inflaterContext = mContext;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class=\"line\">        Context lastContext = (Context) mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        mConstructorArgs[<span class=\"number\">0</span>] = inflaterContext;</span><br><span class=\"line\">        View result = root;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Look for the root node.</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</span><br><span class=\"line\">                    type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Empty</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//如果根节点不是起始结点抛出没有起始标识异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</span><br><span class=\"line\">                        + <span class=\"string\">&quot;: No start tag found!&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//获取结点标签名字</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Creating root view: &quot;</span></span><br><span class=\"line\">                        + name);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//优先处理&lt;morge/&gt;标签</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">&quot;&lt;merge /&gt; can be used only with a valid &quot;</span></span><br><span class=\"line\">                            + <span class=\"string\">&quot;ViewGroup root and attachToRoot=true&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//解析&lt;morge/&gt;标签下的view并将最终添加到root父容器中</span></span><br><span class=\"line\">                rInflate(parser, root, inflaterContext, attrs, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Temp is the root view that was found in the xml</span></span><br><span class=\"line\">                <span class=\"comment\">//根据根节点标签创建父容器View对象</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class=\"line\"></span><br><span class=\"line\">                ViewGroup.LayoutParams params = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;Creating params from root: &quot;</span> +</span><br><span class=\"line\">                                root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// Create layout params that match root, if supplied</span></span><br><span class=\"line\">                    <span class=\"comment\">//获取父容器的layout params</span></span><br><span class=\"line\">                    params = root.generateLayoutParams(attrs);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!attachToRoot) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Set the layout params for temp if we are not</span></span><br><span class=\"line\">                        <span class=\"comment\">// attaching. (If we are, we use addView, below)</span></span><br><span class=\"line\">                        <span class=\"comment\">//如果attachToRoot为false，调用view的setLayoutParams方法，便于后边的直接返回。</span></span><br><span class=\"line\">                        temp.setLayoutParams(params);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;-----&gt; start inflating children&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Inflate all children under temp against its context.</span></span><br><span class=\"line\">                <span class=\"comment\">//根据rootView解析所有孩子的布局文件，并将解析的View依次递归合并到temp中</span></span><br><span class=\"line\">                rInflateChildren(parser, temp, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (DEBUG) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;-----&gt; done inflating children&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// We are supposed to attach all the views we found (int temp)</span></span><br><span class=\"line\">                <span class=\"comment\">// to root. Do that now.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//将最终合并完成的子View（即大儿子temp）添加到root父容器中</span></span><br><span class=\"line\">                    root.addView(temp, params);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Decide whether to return the root that was passed in or the</span></span><br><span class=\"line\">                <span class=\"comment\">// top view found in xml.</span></span><br><span class=\"line\">                <span class=\"comment\">//如果父容器为空或者attachToRoot为false直接将所有子view合并后的大儿子temp返回</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || !attachToRoot) &#123;</span><br><span class=\"line\">                    result = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (XmlPullParserException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> InflateException ie = <span class=\"keyword\">new</span> InflateException(e.getMessage(), e);</span><br><span class=\"line\">            ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ie;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> InflateException ie = <span class=\"keyword\">new</span> InflateException(parser.getPositionDescription()</span><br><span class=\"line\">                    + <span class=\"string\">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class=\"line\">            ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ie;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Don&#x27;t retain static reference on context.</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这部分主要功能就是解析xml，预先针对父容器通过createViewFromTag()方法生成临时的View(temp),然后并将解析后子View依次合并到tempz中，最终添加到父容器中并返回，有些时候是没有父容器的，例如我们自定义view的动态加载，因此只需要把这部分xml解析组合成View后直接返回即可。接下来看一下递归解析孩子的rInflateChildren()方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">rInflateChildren</span><span class=\"params\">(XmlPullParser parser, View parent, AttributeSet attrs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class=\"line\">    rInflate(parser, parent, parent.getContext(), attrs, finishInflate);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>rInflateChildren()内部进一步调用的rInflate()方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rInflate</span><span class=\"params\">(XmlPullParser parser, View parent, Context context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        AttributeSet attrs, <span class=\"keyword\">boolean</span> finishInflate)</span> <span class=\"keyword\">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> depth = parser.getDepth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//开始进行解析</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (((type = parser.next()) != XmlPullParser.END_TAG ||</span><br><span class=\"line\">            parser.getDepth() &gt; depth) &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">//起始结点标识不是起始标识返回进行下一个结点的解析</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//获取结点标签名字</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String name = parser.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TAG_REQUEST_FOCUS.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//解析requestFocus标签</span></span><br><span class=\"line\">            parseRequestFocus(parser, parent);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_TAG.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//解析tag标签</span></span><br><span class=\"line\">            parseViewTag(parser, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_INCLUDE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//解析include标签</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parser.getDepth() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">&quot;&lt;include /&gt; cannot be the root element&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseInclude(parser, context, parent, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//处理morge标签，这里直接抛出异常，因为morge标签只能存在最初父级结点上</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InflateException(<span class=\"string\">&quot;&lt;merge /&gt; must be the root element&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果是其他标签则根据标签生成View,并添加ViewGroup中，这部分进行递归遍历结点之下的结点</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> View view = createViewFromTag(parent, name, context, attrs);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup viewGroup = (ViewGroup) parent;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ViewGroup.LayoutParams params = viewGroup.generateLayoutParams(attrs);</span><br><span class=\"line\">            rInflateChildren(parser, view, attrs, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            viewGroup.addView(view, params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishInflate) &#123;</span><br><span class=\"line\">        parent.onFinishInflate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>这个过程主要处理子View的xml文件的解析，内部针对四种特殊标签单独处理，然后如果标签下仍然有子view，则继续递归处理。每次根据标签解析出来的view是由createViewFromTag()方法生成的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> View <span class=\"title\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createViewFromTag(parent, name, context, attrs, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">View <span class=\"title\">createViewFromTag</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> ignoreThemeAttr)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//如果标签是view，拿到view标签上的class值    </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;view&quot;</span>)) &#123;</span><br><span class=\"line\">        name = attrs.getAttributeValue(<span class=\"keyword\">null</span>, <span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Apply a theme wrapper, if allowed and one is specified.</span></span><br><span class=\"line\">    <span class=\"comment\">//如果该标签与主题相关，需要对context进行包装，将主题信息加入context包装类ContextWrapper</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ignoreThemeAttr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> themeResId = ta.getResourceId(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (themeResId != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            context = <span class=\"keyword\">new</span> ContextThemeWrapper(context, themeResId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ta.recycle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//如果是blink标签返回一个BlinkLayout，它包含的内容会一直闪烁。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(TAG_1995)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Let&#x27;s party like it&#x27;s 1995!</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlinkLayout(context, attrs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置Factory，来对View做额外的拓展</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        View view;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            view = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span> &amp;&amp; mPrivateFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//如果此时不存在Factory，不管Factory还是Factory2，还是mPrivateFactory都不存在，那么会直接对name直接进行解析</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Object lastContext = mConstructorArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = context;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果name中包含.即为自定义View，否则为原生的View控件</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">&#x27;.&#x27;</span>)) &#123;</span><br><span class=\"line\">                    view = onCreateView(parent, name, attrs);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    view = createView(name, <span class=\"keyword\">null</span>, attrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mConstructorArgs[<span class=\"number\">0</span>] = lastContext;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InflateException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> InflateException ie = <span class=\"keyword\">new</span> InflateException(attrs.getPositionDescription()</span><br><span class=\"line\">                + <span class=\"string\">&quot;: Error inflating class &quot;</span> + name, e);</span><br><span class=\"line\">        ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ie;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> InflateException ie = <span class=\"keyword\">new</span> InflateException(attrs.getPositionDescription()</span><br><span class=\"line\">                + <span class=\"string\">&quot;: Error inflating class &quot;</span> + name, e);</span><br><span class=\"line\">        ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ie;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这部分内容是最终的解析部分，无论是自定义view还是原生的view都能进行处理，细心的你会发现最终生成view的是onCreateView()方法，其内部其实是creatView(),这是LayoutInflater默认生成view的方式，内部原理是类加载器根据前缀+标签名字去加载相应的对象，有兴趣的同学可看一下这部分源码，共同学习。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/1C23057888CD47A0948B8FE7FFA6F4DC?method=download&amp;shareKey=8c9ae65078268bf15761248ab5e441d6\" alt=\"createViewFromTag整体流程图\"></p>\n<p>到此View创建添加到DecorView这一过程完毕，下部分是DecorView添加至Window过程，然后接下来进行view的测量、布局、绘制，这一整套走完之后才能见到庐山真面目了。</p>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>文中的源码是android7.0源码。本文主要描述的是view创建添加到DecorView过程，从熟知的setContentView()内部分析大的方面经历的两部分：</p>\n<ul>\n<li>PhoneWindow的setContentView()\n<ul>\n<li>初始化父容器\n<ul>\n<li>实例化DecorView</li>\n<li>生成父容器ContentParent（包含主题、title、titleIcon等对父容器的设置）</li>\n</ul>\n</li>\n<li>布局资源文件的加载，直接引申到第二部分</li>\n</ul>\n</li>\n<li>PhoneWindow的mLayoutInflater.inflate()。\n<ul>\n<li>获取XmlResourceParser实例对象</li>\n<li>通过inflate进一步加载解析\n<ul>\n<li>处理父容器结点（优先处理morge标签）</li>\n<li>递归处理子节点</li>\n<li>递归addView(),最终指向父容器的addView()并返回。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li>《Android开发艺术探索》</li>\n<li><a href=\"http://blog.csdn.net/yanbober/article/details/45970721\">http://blog.csdn.net/yanbober/article/details/45970721</a></li>\n<li><a href=\"http://blog.csdn.net/yhaolpz/article/details/68936932\">http://blog.csdn.net/yhaolpz/article/details/68936932</a></li>\n<li><a href=\"https://juejin.im/entry/58abfa9d0ce463006b1a7b19\">https://juejin.im/entry/58abfa9d0ce463006b1a7b19</a></li>\n<li><a href=\"http://www.cnblogs.com/jycboy/p/6219915.html#autoid-4-0-0\">http://www.cnblogs.com/jycboy/p/6219915.html#autoid-4-0-0</a></li>\n<li><a href=\"http://blog.csdn.net/l540675759/article/details/78099702\">http://blog.csdn.net/l540675759/article/details/78099702</a></li>\n</ul>\n","prev":{"title":"Activity的生命周期和启动模式","link":"posts/1519655269"},"next":{"title":"数据结构和算法知识归总","link":"posts/1516535176"},"plink":"https://blog.ixin.run/posts/1517199857/","toc":[{"id":"理解几个概念","title":"理解几个概念","index":"1"},{"id":"屏幕显示过程","title":"屏幕显示过程","index":"2"},{"id":"ui界面层级结构","title":"UI界面层级结构","index":"3"},{"id":"从setcontentview说起","title":"从setContentView说起","index":"4","children":[{"id":"01#phonewindow#setcontentview()","title":"01#PhoneWindow#setContentView()","index":"4.1"},{"id":"02#phonewindow#mlayoutinflater.inflate()","title":"02#PhoneWindow#mLayoutInflater.inflate()","index":"4.2"}]},{"id":"总结","title":"总结","index":"5"},{"id":"参考","title":"参考","index":"6"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1517199857/\" title=\"View创建的那些事儿\">https://blog.ixin.run/posts/1517199857/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}