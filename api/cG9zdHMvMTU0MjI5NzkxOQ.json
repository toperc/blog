{"title":"Android开发View坐标了解","date":"2018-11-15T16:05:19.000Z","date_formatted":{"ll":"2018年11月16日","L":"2018/11/16","MM-DD":"11-16"},"link":"posts/1542297919","comments":true,"tags":["View视图"],"categories":["Android"],"updated":"2021-03-04T08:28:02.350Z","content":"<p>Android开发过程中，针对View视图坐标系必要时获取坐标，其重要性不言而喻。坐标系分为屏幕坐标系和View视图坐标系，前者用于真实坐标，后者用于获取相对坐标和宽高。</p>\n<a id=\"more\"></a>\n<h2 id=\"android视图坐标系\">Android视图坐标系<a title=\"#android视图坐标系\" href=\"#android视图坐标系\"></a></h2>\n<p>android中的坐标系有两种：一种是Android坐标系，是相对屏幕原点来说的，也可以叫绝对坐标；另外一种是视图坐标系，是根据当前view以及父布局来说的。</p>\n<h3 id=\"android坐标系\">Android坐标系<a title=\"#android坐标系\" href=\"#android坐标系\"></a></h3>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/B92D25BEF8F24F7F8CBA598D3BE23D13?method=download&amp;shareKey=50af943943e4a335d0959a30e4fb1591\" alt=\"android坐标系\"><br>\n以屏幕左上角原点为中心，x轴向右为正，y轴向下为正。</p>\n<h3 id=\"视图坐标系\">视图坐标系<a title=\"#视图坐标系\" href=\"#视图坐标系\"></a></h3>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/CDCE7DFB97624B4EBF91AD85A3E3C2BA?method=download&amp;shareKey=762ec86127d2a43bb5a405dbb16a1344\" alt=\"视图坐标系\"><br>\n根据view自身相关属性计算view所处坐标。</p>\n<h2 id=\"获取view的距离和位置\">获取View的距离和位置<a title=\"#获取view的距离和位置\" href=\"#获取view的距离和位置\"></a></h2>\n<p>下面介绍Android View类中用来获取View的距离和位置信息的一些API，这些API大都需要在Attach到Window之后才能获取到预期的结果。所以不能放在构造方法，onCreate()，onMeasure()，onLayout()等方法中执行，一般都需要放到onWindowFocusChanged()里，或者放到某个异步事件中执行。</p>\n<h3 id=\"getwidth()/getheight()\">getWidth()/getHeight()<a title=\"#getwidth()/getheight()\" href=\"#getwidth()/getheight()\"></a></h3>\n<p>getHeight()：获取View自身高度；getWidth()：获取View自身宽度。</p>\n<h3 id=\"gettranslationx()/gettranslationy()/gettranslationz()\">getTranslationX()/getTranslationY()/getTranslationZ()<a title=\"#gettranslationx()/gettranslationy()/gettranslationz()\" href=\"#gettranslationx()/gettranslationy()/gettranslationz()\"></a></h3>\n<p>TranslationX和TranslationY是从Android3.0引入的View的属性，TranslationZ则是Android5.0引入的View的属性。它们分别表示将View从其原始位置沿着X，Y，Z轴方向平移的距离。</p>\n<h3 id=\"gettop()/getbottom()/getleft()/getright()/getelevation()\">getTop()/getBottom()/getLeft()/getRight()/getElevation()<a title=\"#gettop()/getbottom()/getleft()/getright()/getelevation()\" href=\"#gettop()/getbottom()/getleft()/getright()/getelevation()\"></a></h3>\n<p>通过如下方法可以获得View到其父控件（ViewGroup）的距离：</p>\n<ul>\n<li>getTop()：获取View自身顶边到其父布局顶边的距离</li>\n<li>getLeft()：获取View自身左边到其父布局左边的距离</li>\n<li>getRight()：获取View自身右边到其父布局左边的距离</li>\n<li>getBottom()：获取View自身底边到其父布局顶边的距离</li>\n<li>getElevation()：获取View Z轴偏移量</li>\n</ul>\n<p>getElevation()的结果则是之前在XML中通过android:elevation配置的值，或者是通过setElevation()设置的值。其中getElevation()只有在Android5.0及之后的系统中才可以使用。</p>\n<h3 id=\"getx()/gety()/getz()\">getX()/getY()/getZ()<a title=\"#getx()/gety()/getz()\" href=\"#getx()/gety()/getz()\"></a></h3>\n<p>getX()/getY()/getZ()同样是用来获取一个view到parent view的距离，和getTop()/getLeft()/getElevation()不同是，getX()/getY()/getZ()会考虑TranslationX，TranslationY和TranslationZ的影响。可以简单的将getTop()/getLeft()/getElevation()结果和getTranslationX()/getTranslationY()/getTranslationZ()结果相加，即可得到getX()/getY()/getZ()的结果。getX()和getY()只有在Android3.0及之后的系统才可以使用，getZ()只有在Android5.0及之后的系统中才可以使用。</p>\n<h3 id=\"getscrollx()/getscrolly()\">getScrollX()/getScrollY()<a title=\"#getscrollx()/getscrolly()\" href=\"#getscrollx()/getscrolly()\"></a></h3>\n<p>getScrollX()/getScrollY()用来获取一个view滑动的距离，一般来说，如果View是不可滑动的，例如TextView，Button等， getScrollX()/getScrollY()获取到的始终是0。如果View是可以纵向滑动的，例如ListView，ScrollView等，getScrollX()获取到的始终是0，getScrollY()获取到的是Y轴滚动的距离。如果View是可以横向滑动的，例如HorizontalScrollView，getScrollY()获取到的始终是0，getScrollX()获取到的是X轴滚动的距离。getScrollX()和getScrollY()的值始终大于等于0。</p>\n<h3 id=\"getdrawingrect()\">getDrawingRect()<a title=\"#getdrawingrect()\" href=\"#getdrawingrect()\"></a></h3>\n<p>getDrawingRect()用来获取一个View的绘制区域，它本身没有返回值，需要传入一个不为null的Rect对象作为输出参数。一般来说，一个View的绘制区域就是从(0, 0)到(width, height)的区域，但如果View是可滑动的，则它的绘制区域还要加上滑动的距离，也就是从(scrollX, scrollY)到(width+scrollX, height+scrollY)的距离。</p>\n<p>需要注意的是getDrawingRect()并没有考虑setScaleX()，setScaleY()和setRotation()的影响，所以它返回的区域大小并不一定会和View当前实际显示的区域大小相同。</p>\n<h3 id=\"getlocationonscreen()和getlocationinwindow()\">getLocationOnScreen()和getLocationInWindow()<a title=\"#getlocationonscreen()和getlocationinwindow()\" href=\"#getlocationonscreen()和getlocationinwindow()\"></a></h3>\n<p>getLocationOnScreen()和getLocationInWindow()返回的都是view左上角的坐标，不同的getLocationOnScreen()得到的是相对于屏幕的坐标，也就是坐标原点在屏幕的左上角。而getLocationInWindow()得到的是相对于当前窗口的坐标，也就是坐标原点在窗口的左上角。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] screenLocation = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] windowLocation = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"number\">2</span>];</span><br><span class=\"line\">getLocationInWindow();</span><br><span class=\"line\">getLocationOnScreen(windowLocation)</span><br></pre></td></tr></table></figure>\n<h3 id=\"getglobalvisiblerect()和getlocalvisiblerect()\">getGlobalVisibleRect()和getLocalVisibleRect()<a title=\"#getglobalvisiblerect()和getlocalvisiblerect()\" href=\"#getglobalvisiblerect()和getlocalvisiblerect()\"></a></h3>\n<p>这两个方法主要用于判断一个 View 是在某个区域的可见性，区别：</p>\n<ul>\n<li>View.getGlobalVisibleRect(rect); //以屏幕 左上角 为参考系的</li>\n<li>View.getLocalVisibleRect(rect); //以目标 View 左上角 为参考系</li>\n</ul>\n<p>判断是否可见:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> localVisibleRect = target.getLocalVisibleRect(rect);</span><br></pre></td></tr></table></figure>\n<p>返回值：</p>\n<ul>\n<li>true : View 全部或者部分 可见</li>\n<li>false : View 全部不可见</li>\n</ul>\n<h3 id=\"点击事件motionevent提供的坐标方法\">点击事件MotionEvent提供的坐标方法<a title=\"#点击事件motionevent提供的坐标方法\" href=\"#点击事件motionevent提供的坐标方法\"></a></h3>\n<p>我们看视图坐标系图示中那个深蓝色的点，假设就是我们触摸的点，我们知道无论是View还是ViewGroup，最终的点击事件都会由onTouchEvent(MotionEventevent)方法来处理，MotionEvent也提供了各种获取焦点坐标的方法：</p>\n<ul>\n<li>getX()：获取点击事件距离控件左边的距离，即视图坐标</li>\n<li>getY()：获取点击事件距离控件顶边的距离，即视图坐标</li>\n<li>getRawX()：获取点击事件距离整个屏幕左边距离，即绝对坐标</li>\n<li>getRawY()：获取点击事件距离整个屏幕顶边的的距离，即绝对坐标</li>\n</ul>\n<h2 id=\"几个问题\">几个问题<a title=\"#几个问题\" href=\"#几个问题\"></a></h2>\n<ul>\n<li>View 的 getＹ()， getTranslationY() 和 getTop() 之间的联系；</li>\n<li>View 的 scrollTo() 和 scrollBy()；</li>\n</ul>\n<p>View的getY()，getTranslationY()和getTop()之间的联系：<br>\n<code>getY() = getTranslationY()+ getTop();</code></p>\n<p>scrollTo()和scrollBy()从字面意思我们可以知道scrollTo()是滑动到哪里的意思 ，scrollBy()是相对当前的位置滑动了多少。</p>\n<p>需注意：scrollTo和scrollBy函数的参数和坐标系是“相反的”，比如 scrollTo(-100,0)，View 的内容是向X轴正方向移动的。</p>\n<h2 id=\"view坐标获取时机\">view坐标获取时机<a title=\"#view坐标获取时机\" href=\"#view坐标获取时机\"></a></h2>\n<p>一般来说，我们要获取View的坐标和高度等，都必须等到View绘制完毕以后才能获取的到，在Activity的onCreate()方法里面是获取不到的，必须等到View绘制完毕以后才能获取地到View的响应的坐标，一般来说，主要有以下两种方法。</p>\n<h3 id=\"第一种方法，onwindowfocuschanged()方法里面进行调用\">第一种方法，onWindowFocusChanged()方法里面进行调用<a title=\"#第一种方法，onwindowfocuschanged()方法里面进行调用\" href=\"#第一种方法，onwindowfocuschanged()方法里面进行调用\"></a></h3>\n<p>因为onWindowFocusChanged可能会调用多次，所以我们可以用一个唯一标识来控制获取坐标调用一次即可。</p>\n<h3 id=\"第二种方法,在视图树绘制完成的时候进行测量\">第二种方法,在视图树绘制完成的时候进行测量<a title=\"#第二种方法,在视图树绘制完成的时候进行测量\" href=\"#第二种方法,在视图树绘制完成的时候进行测量\"></a></h3>\n<p>利用view.getViewTreeObserver().addOnGlobalLayoutListener监听view是否整个绘制完毕，然后进行获取坐标。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/itachi85/article/details/50708391\">https://blog.csdn.net/itachi85/article/details/50708391</a></li>\n<li><a href=\"https://juejin.im/entry/5880209c2f301e006968a342\">https://juejin.im/entry/5880209c2f301e006968a342</a></li>\n</ul>\n","prev":{"title":"那些年Android保活的奇技淫巧","link":"posts/1542901406"},"next":{"title":"AndroidStudio工程目录和项目资源文件介绍","link":"posts/1536976596"},"plink":"https://blog.ixin.run/posts/1542297919/","toc":[{"id":"android视图坐标系","title":"Android视图坐标系","index":"1","children":[{"id":"android坐标系","title":"Android坐标系","index":"1.1"},{"id":"视图坐标系","title":"视图坐标系","index":"1.2"}]},{"id":"获取view的距离和位置","title":"获取View的距离和位置","index":"2","children":[{"id":"getwidth()/getheight()","title":"getWidth()&#x2F;getHeight()","index":"2.1"},{"id":"gettranslationx()/gettranslationy()/gettranslationz()","title":"getTranslationX()&#x2F;getTranslationY()&#x2F;getTranslationZ()","index":"2.2"},{"id":"gettop()/getbottom()/getleft()/getright()/getelevation()","title":"getTop()&#x2F;getBottom()&#x2F;getLeft()&#x2F;getRight()&#x2F;getElevation()","index":"2.3"},{"id":"getx()/gety()/getz()","title":"getX()&#x2F;getY()&#x2F;getZ()","index":"2.4"},{"id":"getscrollx()/getscrolly()","title":"getScrollX()&#x2F;getScrollY()","index":"2.5"},{"id":"getdrawingrect()","title":"getDrawingRect()","index":"2.6"},{"id":"getlocationonscreen()和getlocationinwindow()","title":"getLocationOnScreen()和getLocationInWindow()","index":"2.7"},{"id":"getglobalvisiblerect()和getlocalvisiblerect()","title":"getGlobalVisibleRect()和getLocalVisibleRect()","index":"2.8"},{"id":"点击事件motionevent提供的坐标方法","title":"点击事件MotionEvent提供的坐标方法","index":"2.9"}]},{"id":"几个问题","title":"几个问题","index":"3"},{"id":"view坐标获取时机","title":"view坐标获取时机","index":"4","children":[{"id":"第一种方法，onwindowfocuschanged()方法里面进行调用","title":"第一种方法，onWindowFocusChanged()方法里面进行调用","index":"4.1"},{"id":"第二种方法,在视图树绘制完成的时候进行测量","title":"第二种方法,在视图树绘制完成的时候进行测量","index":"4.2"}]},{"id":"参考","title":"参考","index":"5"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1542297919/\" title=\"Android开发View坐标了解\">https://blog.ixin.run/posts/1542297919/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}