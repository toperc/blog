{"title":"Android开机启动的那些事","date":"2020-04-12T10:46:00.000Z","date_formatted":{"ll":"2020年4月12日","L":"2020/04/12","MM-DD":"04-12"},"link":"posts/1618224360","comments":true,"tags":["Android","开机启动","进程"],"categories":["Android"],"updated":"2021-01-29T12:51:44.641Z","content":"<p>以前知道AMS、PMS这些概念及其功能，开发的过程中也会用到，就是不知道其来源，好奇心害死猫，扒着扒着扒到系统开机启动这个知识层面上来了，好吧，那今天就说说这个吧！</p>\n<a id=\"more\"></a>\n<h2 id=\"系统开机启动过程\">系统开机启动过程<a title=\"#系统开机启动过程\" href=\"#系统开机启动过程\"></a></h2>\n<p>Android系统的启动，主要是指Android手机关机后，长按电源键后，Android手机开机的过程。从系统角度看，Android的启动程序可分为：</p>\n<ol>\n<li>bootloader引导</li>\n<li>装载与启动Linux内核</li>\n<li>启动Android系统</li>\n</ol>\n<p>其中启动Android系统过程又有以下过程：</p>\n<ol>\n<li>启动Init进程</li>\n<li>启动Zygote</li>\n<li>启动SystemServer</li>\n<li>启动Launcher</li>\n</ol>\n<p>android启动过程图示：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/1A145026F3924AE3BAA3BD435CAB1B26?method=download&amp;shareKey=301677fdbf58ad5a00a4b6faf36bf7ab\" alt=\"Android系统启动过程\"></p>\n<h2 id=\"zygote\">zygote<a title=\"#zygote\" href=\"#zygote\"></a></h2>\n<p>我们知道，Android系统是基于Linux内的。而在Linux系统中，所有的进程都是init进程的子孙进程，也就是说，所有的进程都是直接或者间接地由init进程fork出来的。</p>\n<p>系统启动的时候执行系统启动脚本system/core/rootdir/init.rc文件，进而触发app_process程序（system/bin/app_process，它的源代码位于frameworks/base/cmds/app_process/app_main.cpp文件中，入口函数是main）创建Zygote进程，Zygote进程负责后续Android应用程序框架层的其它进程的创建和启动工作。</p>\n<p><strong>Zygote进程最大意义是作为一个Socket的Server端，接收着四面八方的进程创建请求</strong>。Android中所有的应用进程的创建都是通过Binder机制请求SystemServer进程，SystemServer进程发送socket消息给Zygote进程，统一由Zygote进程创建出来的。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/87EF229A29584F4D9045CA9325B94F32?method=download&amp;shareKey=2a78f7d31873cac4d244a37212b3a543\" alt=\"Zygote启动时序图\"></p>\n<h2 id=\"systemserver\">SystemServer<a title=\"#systemserver\" href=\"#systemserver\"></a></h2>\n<p>SystemServer也是一个进程，而且是由zygote进程fork出来的。SystemServer主要用于开启系统重要的一些相关服务，例如：ActivityManagerService（AMS）、PackageManagerService（PMS）、WindowManagerService（WMS）等等，是不是都很熟悉呢？所以SystemServer和Zygote重要级别可以说是平分秋色了。</p>\n<h3 id=\"什么时候开启systemserver\">什么时候开启SystemServer<a title=\"#什么时候开启systemserver\" href=\"#什么时候开启systemserver\"></a></h3>\n<p>在zygote开启的时候，会调用ZygoteInit.main()进行初始化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String argv[])</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">     ...ignore some code...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//在加载首个zygote的时候，会传入初始化参数，一旦捕获到参数是“start-system-server”，即可开启fork SystemServer指令</span></span><br><span class=\"line\">     <span class=\"keyword\">boolean</span> startSystemServer = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; argv.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">&quot;start-system-server&quot;</span>.equals(argv[i])) &#123;</span><br><span class=\"line\">                    startSystemServer = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (argv[i].startsWith(ABI_LIST_ARG)) &#123;</span><br><span class=\"line\">                    abiList = argv[i].substring(ABI_LIST_ARG.length());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;</span><br><span class=\"line\">                    socketName = argv[i].substring(SOCKET_NAME_ARG.length());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;Unknown command line argument: &quot;</span> + argv[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            ...ignore some code...</span><br><span class=\"line\">            </span><br><span class=\"line\">         <span class=\"comment\">//开始fork我们的SystemServer进程</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (startSystemServer) &#123;</span><br><span class=\"line\">                startSystemServer(abiList, socketName);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     ...ignore some code...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来看一下startSystemServer具体做了什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Prepare the arguments and fork for the system server process.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startSystemServer</span><span class=\"params\">(String abiList, String socketName)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> MethodAndArgsCaller, RuntimeException </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">     ...ignore some code...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//上面ZygoteInit.main(String argv[])里面的argv就是通过这种方式传递进来的</span></span><br><span class=\"line\">    <span class=\"comment\">/* Hardcoded command line to start the system server */</span></span><br><span class=\"line\">    String args[] = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;--setuid=1000&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;--setgid=1000&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1032,3001,3002,3003,3006,3007&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;--capabilities=&quot;</span> + capabilities + <span class=\"string\">&quot;,&quot;</span> + capabilities,</span><br><span class=\"line\">        <span class=\"string\">&quot;--runtime-init&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;--nice-name=system_server&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;com.android.server.SystemServer&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pid;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        parsedArgs = <span class=\"keyword\">new</span> ZygoteConnection.Arguments(args);</span><br><span class=\"line\">        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);</span><br><span class=\"line\">        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//fork SystemServer</span></span><br><span class=\"line\">        <span class=\"comment\">/* Request to fork the system server process */</span></span><br><span class=\"line\">        pid = Zygote.forkSystemServer(</span><br><span class=\"line\">                parsedArgs.uid, parsedArgs.gid,</span><br><span class=\"line\">                parsedArgs.gids,</span><br><span class=\"line\">                parsedArgs.debugFlags,</span><br><span class=\"line\">                <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                parsedArgs.permittedCapabilities,</span><br><span class=\"line\">                parsedArgs.effectiveCapabilities);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* For child process */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class=\"line\">            waitForSecondaryZygote(socketName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        handleSystemServerProcess(parsedArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法主要是为了开启SystemServer，这里做了三件事：</p>\n<ol>\n<li>准备fork SystemServer相关参数，例如SystemServer进程的进程Id和组Id均为为1000，进程名称为system_server等。</li>\n<li>fork SystemServer，如果返回pid为0则创建成功，否者返回-1或者错误；</li>\n<li>调用handleSystemServerProcess()完成SystemServer进程的初始化工作；</li>\n</ol>\n<h3 id=\"systemserver进程初始化\">SystemServer进程初始化<a title=\"#systemserver进程初始化\" href=\"#systemserver进程初始化\"></a></h3>\n<p>上边也说了SystemServer主要用于开启系统重要的一些相关服务，例如：ActivityManagerService（AMS）、PackageManagerService（PMS）、WindowManagerService（WMS）等等，我们看一下代码具体的内部走法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//zygote的主入口</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> SystemServer().run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SystemServer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check for factory test mode.</span></span><br><span class=\"line\">        mFactoryTestMode = FactoryTest.getMode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ...ignore some code...</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建主线程looper 在当前线程运行</span></span><br><span class=\"line\">        android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_FOREGROUND);</span><br><span class=\"line\">        android.os.Process.setCanSelfBackground(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        Looper.prepareMainLooper();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//加载本地系统服务库，并进行初始化 </span></span><br><span class=\"line\">        System.loadLibrary(<span class=\"string\">&quot;android_servers&quot;</span>);</span><br><span class=\"line\">        nativeInit();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 创建系统上下文</span></span><br><span class=\"line\">        createSystemContext();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化SystemServiceManager对象，下面的系统服务开启都需要调用SystemServiceManager.startService(Class&lt;T&gt;)，这个方法通过反射来启动对应的服务</span></span><br><span class=\"line\">        mSystemServiceManager = <span class=\"keyword\">new</span> SystemServiceManager(mSystemContext);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//开启服务</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            startBootstrapServices();</span><br><span class=\"line\">            startCoreServices();</span><br><span class=\"line\">            startOtherServices();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">            Slog.e(<span class=\"string\">&quot;System&quot;</span>, <span class=\"string\">&quot;******************************************&quot;</span>);</span><br><span class=\"line\">            Slog.e(<span class=\"string\">&quot;System&quot;</span>, <span class=\"string\">&quot;************ Failure starting system services&quot;</span>, ex);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        ...ignore some code...</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化系统上下文对象mSystemContext，并设置默认的主题,mSystemContext实际上是一个ContextImpl对象。调用ActivityThread.systemMain()的时候，会调用ActivityThread.attach(true)，而在attach()里面，则创建了Application对象，并调用了Application.onCreate()。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createSystemContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ActivityThread activityThread = ActivityThread.systemMain();</span><br><span class=\"line\">        mSystemContext = activityThread.getSystemContext();</span><br><span class=\"line\">        mSystemContext.setTheme(android.R.style.Theme_DeviceDefault_Light_DarkActionBar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在这里开启了几个核心的服务，因为这些服务之间相互依赖，所以都放在了这个方法里面。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startBootstrapServices</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ...ignore some code...</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化ActivityManagerService</span></span><br><span class=\"line\">        mActivityManagerService = mSystemServiceManager.startService(</span><br><span class=\"line\">                ActivityManagerService.Lifecycle.class).getService();</span><br><span class=\"line\">        mActivityManagerService.setSystemServiceManager(mSystemServiceManager);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化PowerManagerService，因为其他服务需要依赖这个Service，因此需要尽快的初始化</span></span><br><span class=\"line\">        mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 现在电源管理已经开启，ActivityManagerService负责电源管理功能</span></span><br><span class=\"line\">        mActivityManagerService.initPowerManagement();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化DisplayManagerService</span></span><br><span class=\"line\">        mDisplayManagerService = mSystemServiceManager.startService(DisplayManagerService.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//初始化PackageManagerService</span></span><br><span class=\"line\">    mPackageManagerService = PackageManagerService.main(mSystemContext, mInstaller,</span><br><span class=\"line\">       mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"comment\">//开启消息循环</span></span><br><span class=\"line\">    Looper.loop();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...ignore some code...</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SystemServer初始化过程中主要做了以下几个重大工作：</p>\n<ol>\n<li>加载本地系统服务库，系统底层初始化。</li>\n<li>创建消息循环体Looper，这个就是为什么我们在主线程里面不用写Looper，就可以处理UI视图，原来系统已经为我们做了这件事。</li>\n<li>创建系统级上下文，在这个过程中创建我们的主线程ActivityThread，获取系统上下文对象mSystemContext，并设置系统默认主题。</li>\n<li>创建SystemServiceManager对象，开启系统<strong>服务三连</strong>——引导服务、核心服务以及其他服务。</li>\n</ol>\n<p>系统级上下文和我们常用的Context是有区别的，主要是用于服务端（系统级主题和其他服务相关的引导），Context到底是个什么玩意？我在前边的一篇文章中也有总结，这里在阐述一遍，Context英文原意是上下文的意思，在平时开发中涉及到的四大组件及资源操作基本上都离不开Context对象。</p>\n<p>服务三连开发者我们最关心的就是引导服务，因为这里面开启的都是我们在日常开发中最容易用到的几个服务：</p>\n<ol>\n<li><strong>ActivityManagerService</strong> AMS在Android系统中扮演很重要的角色，主要负责系统中四大组件的启动、切换、调度及应用进程的管理和调度等工作，其职责与操作系统中的进程管理和调度模块相类似。</li>\n<li><strong>PowerManagerService</strong> PowerManagerService主要服务Android系统电源管理工作，这样讲比较笼统，就具体细节上大致可以认为PowerManagerService集中处理用户活动（如点击屏幕，按电源键等）、电量变化、用户设置（如在Setting中设置省电模式，飞行模式）、插拔充电器（无线冲，有线冲）等。当发生以上事件时，PowerManagerService都要进行各种状态的更新。</li>\n<li><strong>DisplayManagerService</strong>  DisplayManagerService用来管理显示的生命周期，它决定如何根据当前连接的物理显示设备控制其逻辑显示，并且在状态更改时，向系统和应用程序发送通知等等。</li>\n<li><strong>PackageManagerService</strong>  PackageManagerService（简称PMS），是Android系统中核心服务之一，管理着所有跟package相关的工作，常见的比如安装、卸载应用。</li>\n<li><strong>UserManagerService</strong> UserManagerService的主要功能是创建和删除用户，以及查询用户信息。Android可以支持多个用户使用系统，通常第一个在系统中注册的用户将默认成为系统管理员。不同用户的设置各不相同，并且不同用户安装的应用及应用数据也不相同。</li>\n</ol>\n<h2 id=\"launcher\">Launcher<a title=\"#launcher\" href=\"#launcher\"></a></h2>\n<p>Launcher即桌面，是Android智能设备的窗口，用户使用最频繁的软件之一。Launhcer是Android所有应用的入口，也提供窗口小部件等功能。</p>\n<p>Launcher本身就是一个APP，一个提供桌面的APP，Laucher有很多和普通APP不同的地方：</p>\n<ul>\n<li>Launcher是顶部APP，即任何应用返回后都是到Launcher，不能再继续返回；</li>\n<li>Launcher是所有应用的入口，可以管理应用；</li>\n<li>Launcher是Android系统启动后就要显示给用户的应用。</li>\n</ul>\n<p><strong>Launcher是由ActivityManagerService启动的</strong>，在SystemServer.java的startOtherServices()方法里面的调用 mActivityManagerService.systemReady()进行Launcher的启动之旅，在<code>systemReady</code>方法执行过程中调了用<code>startHomeActivityLocked</code>方法，方法内部通过<code>getHomeIntent</code>拿到Launcher对应的Intent，最后调用<code>startHomeActivity</code>来启动Launcher。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startHomeActivityLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, String reason)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL</span><br><span class=\"line\">            &amp;&amp; mTopAction == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We are running in factory test mode, but unable to find</span></span><br><span class=\"line\">        <span class=\"comment\">// the factory test app, so just sit around displaying the</span></span><br><span class=\"line\">        <span class=\"comment\">// error message and don&#x27;t try to start anything.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Intent intent = getHomeIntent();</span><br><span class=\"line\">    ActivityInfo aInfo =</span><br><span class=\"line\">        resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aInfo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        intent.setComponent(<span class=\"keyword\">new</span> ComponentName(</span><br><span class=\"line\">                aInfo.applicationInfo.packageName, aInfo.name));</span><br><span class=\"line\">        <span class=\"comment\">// Don&#x27;t do this if the home app is currently being</span></span><br><span class=\"line\">        <span class=\"comment\">// instrumented.</span></span><br><span class=\"line\">        aInfo = <span class=\"keyword\">new</span> ActivityInfo(aInfo);</span><br><span class=\"line\">        aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);</span><br><span class=\"line\">        ProcessRecord app = getProcessRecordLocked(aInfo.processName,</span><br><span class=\"line\">                aInfo.applicationInfo.uid, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (app == <span class=\"keyword\">null</span> || app.instrumentationClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">            mStackSupervisor.startHomeActivity(intent, aInfo, reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ActivityManagerService和PackageManagerService一样，都是在开机时由SystemServer组件启动，Launcher在启动的时候会通过PackageManagerServic把系统中已经安装好的应用程序以快捷图标的形式展示在桌面上，这样用户就可以使用这些应用程序了。另外程序安装的时候SystemServer组件会通过PackageManagerServic来安装应用程序，应用程序安装好了以后会以通知的形式通知launcher展示应用图标，卸载同理。</p>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>本篇简单分析了一下系统从开机启动到桌面展示这个过程，这里简单总结一下：</p>\n<ol>\n<li>系统启动时init进程会创建Zygote进程，Zygote进程负责后续Android应用程序框架层的其它进程的创建和启动工作。</li>\n<li>Zygote进程会首先创建一个SystemServer进程，SystemServer进程负责启动系统的关键服务（服务三连），例如ActivityThread、AMS、PMS等。</li>\n<li>Android中所有的应用进程的创建都是通过Binder机制请求SystemServer进程，SystemServer进程发送socket消息给Zygote进程，统一由Zygote进程创建出来的。</li>\n<li>AMS启动Launcher程序，Launcher展示系统相关应用快捷方式。</li>\n</ol>\n<p>开机启动我们重在了解过程，明确知道系统几个重要的服务，了解过程中虽然很枯燥但是对开发很有帮助，例如以后的插件化学习，下篇我会着重分析一下Launcher的构造以及Activity的启动过程，加油，期待。</p>\n<h2 id=\"参考：\">参考：<a title=\"#参考：\" href=\"#参考：\"></a></h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/luoshengyang/article/details/6768304\">https://blog.csdn.net/luoshengyang/article/details/6768304</a></li>\n<li><a href=\"https://www.jianshu.com/p/327f583f970b\">https://www.jianshu.com/p/327f583f970b</a></li>\n<li><a href=\"https://www.jianshu.com/p/6037f6fda285\">https://www.jianshu.com/p/6037f6fda285</a></li>\n</ul>\n","prev":{"title":"WebView高度自适应方案探究","link":"posts/1586879992"},"next":{"title":"更好的人生一定要学会做减法","link":"posts/1586535410"},"plink":"https://blog.ixin.run/posts/1618224360/","toc":[{"id":"系统开机启动过程","title":"系统开机启动过程","index":"1"},{"id":"zygote","title":"zygote","index":"2"},{"id":"systemserver","title":"SystemServer","index":"3","children":[{"id":"什么时候开启systemserver","title":"什么时候开启SystemServer","index":"3.1"},{"id":"systemserver进程初始化","title":"SystemServer进程初始化","index":"3.2"}]},{"id":"launcher","title":"Launcher","index":"4"},{"id":"总结","title":"总结","index":"5"},{"id":"参考：","title":"参考：","index":"6"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1618224360/\" title=\"Android开机启动的那些事\">https://blog.ixin.run/posts/1618224360/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}