{"per_page":10,"total":12,"current":3,"data":[{"title":"Stream流式编程知识总结","date":"2021-02-17T15:19:29.000Z","date_formatted":{"ll":"2021年2月17日","L":"2021/02/17","MM-DD":"02-17"},"excerpt":"<p>本篇继上一篇《<a href=\"https://blog.ixin.run/posts/1613545058\" target=\"_blank\">Lambda表达式你会吗</a>》又一篇Java8新特性——流式编程，上篇文章中并没有采用Stream例子来装饰Lambda表达式，害怕有同学看不懂，所以在文章末尾留个彩蛋，本篇文章重点讲一下对Java8中流式编程的运用学习。</p>","link":"posts/1613575203","tags":["Java","Stream","流式编程"],"categories":["Java"]},{"title":"Lambda表达式你会吗","date":"2021-02-17T06:57:18.000Z","date_formatted":{"ll":"2021年2月17日","L":"2021/02/17","MM-DD":"02-17"},"excerpt":"<p>Lambda表达式是Java8的一个新特性，使得Java也能进行简单的函数式编程。臃肿的代码轻量化，实现逻辑突出化，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>\n<p>举个简单栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常规匿名写法</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;runnable实现常规写法!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Lambda表达式写法</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">&quot;runnable实现lambda写法!&quot;</span>)).start();</span><br></pre></td></tr></table></figure>\n<p>怎么样？简单吧，一行搞定！下边我就带着大家一起揭开Lambda表达式神秘的面纱。</p>","link":"posts/1613545058","tags":["Java","Lambda"],"categories":["Java"]},{"title":"玩转响应式编程RxJava【更新中...】","date":"2021-02-17T02:37:38.000Z","date_formatted":{"ll":"2021年2月17日","L":"2021/02/17","MM-DD":"02-17"},"excerpt":"","link":"posts/1613529505","tags":["Android","RxJava"],"categories":["Android"]},{"title":"属于我们的0214","date":"2021-02-14T06:56:32.000Z","date_formatted":{"ll":"2021年2月14日","L":"2021/02/14","MM-DD":"02-14"},"thumbnail":"https://i.pinimg.com/originals/8f/b9/fb/8fb9fbf71e8b86930ffd81f6982479c0.gif","excerpt":"","link":"posts/1613285792","tags":["爱情","生活"],"categories":["生活"]},{"title":"Java多态小记","date":"2021-02-07T16:14:49.000Z","date_formatted":{"ll":"2021年2月8日","L":"2021/02/08","MM-DD":"02-08"},"excerpt":"<p>Java三大特性：封装、继承和多态，随口就能说出，至于封装和继承太简单了，多态似乎有点迷糊，可以说多态就是封装和继承的组合体，今天回顾一下多态的知识。</p>","link":"posts/1612714489","tags":["Java","多态"],"categories":["Java"]},{"title":"Jenkins自动化构建（一）玩转Android项目自动化打包","date":"2021-01-31T12:56:15.000Z","date_formatted":{"ll":"2021年1月31日","L":"2021/01/31","MM-DD":"01-31"},"excerpt":"<p>早些年Eclipse时代Android打包采用的<code>ant</code>，现在AndroidStudio时代采用的<code>Gradle</code>，目前的开发模式都是采用敏捷开发，如果仍采用手动打包给QA提测未免太耽误事了，目前众多公司采用的是自动化打包策略+自动化测试，本文是Jenkins自动化构建的第一篇，玩转Android项目的自动化打包，来自早些时候个人整理的有道云笔记，不对之处请指出。前方高能，巨图众多！</p>","link":"posts/1612097829","tags":["Android","DevOps","Jenkins"],"categories":["DevOps"]},{"title":"GitHub Pages你了解多少","date":"2021-01-31T09:14:14.000Z","date_formatted":{"ll":"2021年1月31日","L":"2021/01/31","MM-DD":"01-31"},"excerpt":"<p>自建Blog的小朋友估计都知道<code>GitHub Pages</code>吧，因为据我了解程序员第一次自建博客都选的是GitHub，因为可以撸免费的空间、撸免费的GitHub专属域名，还可以提高一些GitHub的活跃度，毕竟这里才是我们真男人的天堂，哈哈，这些羊毛足够暖和一阵子了。但是我发现大部分小朋友的站点仅仅停留在<code>xxx.github.io</code>这个链接下，本篇文章我就带你简单了解一下<code>GitHub Pages</code>多余的认识，同样是来自早期的一篇个人笔记。</p>","link":"posts/1612084454","tags":["DevOps","GitHub"],"categories":["DevOps"]},{"title":"Android组件化全面掌握【转载】","date":"2021-01-30T18:23:07.000Z","date_formatted":{"ll":"2021年1月31日","L":"2021/01/31","MM-DD":"01-31"},"excerpt":"<p>门店项目从我来公司的MVC都不是的模式到如今的组件化实现，服务着全国4千多家门店使用，中间开发过程也是摸索着不断学习不断调优，一直想写一篇项目重构到组件化的过程，前天偶然看到<code>鸿洋</code>大佬公众号转载的由<code>胡飞洋</code>写的一篇《“终于懂了” 系列：Android组件化，全面掌握！》这篇文章，与门店重构过程不谋而合，这里我就做一个拿来主义转载一下，记录一下相关的知识点。</p>","link":"posts/1612031065","tags":["Android","组件化"],"categories":["Android"]},{"title":"Android开发弹性布局FlexboxLayout知识总结","date":"2021-01-27T12:47:25.000Z","date_formatted":{"ll":"2021年1月27日","L":"2021/01/27","MM-DD":"01-27"},"excerpt":"<p>今天分享一下弹性布局FlexboxLayout的使用总结，又是一篇个人有道云笔记转移系列。早些年我们实现一个换行的标签云、实现一个不规则的九宫格、实现一个不规整瀑布流等等这些“嘿嘿嘿”设计总是要思索半天，FlexboxLayout的出现面对这些问题将为你节省几亿个脑细胞不在话下。我第一次接触这个布局方式还是从早前一个前端写H5的小哥嘴里得到的，我顺便举一反三搜了一下发现我们Android上也有，还是google官方出品，看来知识都是相通的。好了，废话不多说，直接淦！</p>","link":"posts/1611751645","tags":["Android","控件"],"categories":["Android"]},{"title":"健康其实很简单","date":"2021-01-26T15:24:08.000Z","date_formatted":{"ll":"2021年1月26日","L":"2021/01/26","MM-DD":"01-26"},"thumbnail":"https://tse2-mm.cn.bing.net/th/id/OIP.HEHLhOkAp4E1FiGupZBajQHaDh?pid=Api&rs=1","excerpt":"<p>健康其实很简单，甚至简单到每天一个微笑。我喜欢运动，以前我经常用这种方式锻炼自己或者解压，这两年生活被打乱了，今天翻阅笔记无意间发现自己早前写的一个习惯，还是想着给分享出来，借此来重拾自己。</p>","link":"posts/1611674668","tags":["健康","生活","运动"],"categories":["生活"]}]}