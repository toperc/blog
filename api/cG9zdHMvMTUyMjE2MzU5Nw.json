{"title":"Android屏幕适配解决方案","date":"2018-03-27T15:13:17.000Z","date_formatted":{"ll":"2018年3月27日","L":"2018/03/27","MM-DD":"03-27"},"link":"posts/1522163597","comments":true,"categories":["Android"],"updated":"2021-01-29T12:51:44.623Z","content":"<p>学习android避免不掉要进行屏幕适配，因为android碎片化极其严重，尤其是在国内这种环境下，不受google所约束，奇葩屏幕更是多种多样，由于android的开源性，从小到手表，大到电视以及企业影院屏幕，不得已给开发者更多的任务和困难去进行处理，没办法，来就来了，总结一下吧。</p>\n<a id=\"more\"></a>\n<h2 id=\"相关概念\">相关概念<a title=\"#相关概念\" href=\"#相关概念\"></a></h2>\n<p>屏幕相关及换算：</p>\n<ul>\n<li>屏幕尺寸：<br>\n手机对角线的物理尺寸，单位英寸（inch），1英寸=2.54cm，Android手机常见的尺寸有5寸、5.5寸等。</li>\n<li>屏幕分辨率：<br>\n手机在横向、纵向上的像素点数总和，一般用AxB表示，例如1920x1080，单位是px。</li>\n<li>屏幕像素密度：<br>\n每英寸的像素点数，单位是dpi（dots per inch）。</li>\n</ul>\n<p>屏幕尺寸、分辨率、像素密度三者关系：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/DF83EDF37C6942EA9C4809F49344C962?method=download&amp;shareKey=0511f23127e1722bba01649ca6ee480c\" alt=\"屏幕尺寸、分辨率、像素密度三者关系示意图\"></p>\n<p>三个常用单位：</p>\n<ul>\n<li>像素:<br>\n画面中最小的点，也叫单位色块，单位是px。</li>\n<li>密度无关像素：<br>\ndensity-independent pixel，叫dp或dip，与终端上的实际物理像素点无关，单位是dp，可以保证在不同屏幕像素密度的设备上显示相同的效果。在Android中，规定以160dpi（即屏幕分辨率为480x320）为基准：1dp=1px。</li>\n<li>独立比例像素：<br>\nscale-independent pixel，叫sp或sip，单位是sp。Android开发时用此单位设置文字大小，<code>可根据系统字体大小首选项进行缩放，如果想保持字体大小不随系统变化可采用dp做单位</code>，推荐使用12sp、14sp、18sp、22sp作为字体设置的大小，不推荐使用奇数和小数，容易造成精度的丢失问题；小于12sp的字体会太小导致用户看不清。</li>\n</ul>\n<p>关系表：</p>\n<div class=\"φbt\"><div class=\"φbv\"><table><thead>\n<tr>\n<th style=\"text-align:center\">密度类型</th>\n<th style=\"text-align:center\">代表的分辨率(px)</th>\n<th style=\"text-align:center\">屏幕像素密度(dpi)</th>\n<th style=\"text-align:center\">倍数</th>\n<th style=\"text-align:center\">换算（dp/px）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">低密度（ldpi）</td>\n<td style=\"text-align:center\">320x240</td>\n<td style=\"text-align:center\">120</td>\n<td style=\"text-align:center\">0.75</td>\n<td style=\"text-align:center\">1dp = 0.75px</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">中密度（mdpi）</td>\n<td style=\"text-align:center\">480x320</td>\n<td style=\"text-align:center\">160</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1dp = 1px</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">高密度（hdpi）</td>\n<td style=\"text-align:center\">800x480</td>\n<td style=\"text-align:center\">240</td>\n<td style=\"text-align:center\">1.5</td>\n<td style=\"text-align:center\">1dp = 1.5px</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">超高密度（xhdpi）</td>\n<td style=\"text-align:center\">1280x720</td>\n<td style=\"text-align:center\">320</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1dp = 2px</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">超超高密度（xxhdpi）</td>\n<td style=\"text-align:center\">1920x1080</td>\n<td style=\"text-align:center\">480</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">1dp = 3px</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"屏幕尺寸匹配\">屏幕尺寸匹配<a title=\"#屏幕尺寸匹配\" href=\"#屏幕尺寸匹配\"></a></h2>\n<h3 id=\"布局匹配\">布局匹配<a title=\"#布局匹配\" href=\"#布局匹配\"></a></h3>\n<h4 id=\"灵活运用各种布局方式自适应屏幕\">灵活运用各种布局方式自适应屏幕<a title=\"#灵活运用各种布局方式自适应屏幕\" href=\"#灵活运用各种布局方式自适应屏幕\"></a></h4>\n<p>我们知道android传统通用有5种布局方式：</p>\n<ul>\n<li>相对布局(RelativeLayout)</li>\n<li>线性布局(Linearlayout)</li>\n<li>帧布局(FrameLayout)</li>\n<li>表格布局(TableLayout)</li>\n<li>绝对布局(AbsoluteLayout)</li>\n</ul>\n<p>开发过程中尽量不要用绝对布局，因为绝对布局是根据元素的具体坐标位置来定的，所以随着屏幕大小不一，其呈现的效果也不一样。其他的布局根据情况来使用，平时开发的过程中尽量使用相对布局RelativeLayout,因为无论屏幕大小，其相对位置是不会变的，因此整体效果也会统一。</p>\n<h4 id=\"根据屏幕的配置来加载相应的ui布局\">根据屏幕的配置来加载相应的UI布局<a title=\"#根据屏幕的配置来加载相应的ui布局\" href=\"#根据屏幕的配置来加载相应的ui布局\"></a></h4>\n<p>有些时候我们需要为不同屏幕尺寸的设备设计不同的布局，这种情况下项目中一套布局是不行的，通用的做法是采用限定符，常用的限定符有：</p>\n<ul>\n<li>尺寸（size）限定符</li>\n<li>最小宽度（Smallest-width）限定符</li>\n<li>布局别名</li>\n<li>屏幕方向（Orientation）限定符</li>\n</ul>\n<h5 id=\"尺寸（size）限定符\">尺寸（size）限定符<a title=\"#尺寸（size）限定符\" href=\"#尺寸（size）限定符\"></a></h5>\n<p>当一款应用想在手机上显示一套布局，在平板或者电视上（&gt;7英寸）显示另外的一套布局使其内容显示更多些，可以使用尺寸限定符（layout-large）通过再创建一个文件来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res&#x2F;layout&#x2F;main.xml</span><br><span class=\"line\">res&#x2F;layout-large&#x2F;main.xml</span><br></pre></td></tr></table></figure>\n<p>这里需要注意两套布局文件的命名是一样的，另外内部必要组件的id也要一样。</p>\n<h5 id=\"最小宽度（smallest-width）限定符\">最小宽度（Smallest-width）限定符<a title=\"#最小宽度（smallest-width）限定符\" href=\"#最小宽度（smallest-width）限定符\"></a></h5>\n<p>上边的layout-large是系统3.2之前推出的，仅仅限于以7英寸为分界，系统3.2之后google为了更精细化推出了最小宽度（Smallest-width）限定符，例如我想实现在宽度600dp以上显示一种布局可采用layout-sw600dp，宽度900dp以上显示另外一种布局可采用layout-sw900dp。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res&#x2F;layout&#x2F;main.xml   &#x2F;&#x2F;默认兼容布局</span><br><span class=\"line\">res&#x2F;layout-sw600dp&#x2F;main.xml    &#x2F;&#x2F;宽度大于600dp时显示的布局</span><br><span class=\"line\">res&#x2F;layout-sw900dp&#x2F;main.xml    &#x2F;&#x2F;宽度大于900dp时显示的布局</span><br></pre></td></tr></table></figure>\n<h5 id=\"布局别名\">布局别名<a title=\"#布局别名\" href=\"#布局别名\"></a></h5>\n<p>试想一种情况同时拥有低于系统版本3.2的设备和高于系统版本3.2的设备，同时又包含大小屏几套布局，低于3.2的设备我们只能采用layout-large方式，高于3.2我们又建议layout-swxxxdp方式，这维护起来可就繁琐了，要维护好几套。反正都是大小屏，在某种尺寸下layout-large和layout-swxxdp的布局肯定是一样的。所以我们有必要解决一下这种重复文件的问题，通过某种方式使得layout-large和layout-swxxxdp下同时指向一个文件，我们只需要这一个文件即可，这里引入“布局别名”方案。</p>\n<p>针对普通手机适配和大屏适配可同时在layout下添加两个文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res&#x2F;layout&#x2F;main.xml</span><br><span class=\"line\">res&#x2F;layout&#x2F;main_large.xml</span><br></pre></td></tr></table></figure>\n<p>然后根据系统版本3.2前后分别在values-large和values-swxxxdp下添加如下别名设置：<br>\n1.res/values-large/layout.xml(3.2之前的大屏布局)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\"> &lt;item name&#x3D;&quot;main&quot; type&#x3D;&quot;layout&quot;&gt;@layout&#x2F;main_large&lt;&#x2F;item&gt;</span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n<p>2.res/values-sw600dp/layout.xml(3.2之后的大屏布局)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">&lt;item name&#x3D;&quot;main&quot; type&#x3D;&quot;layout&quot;&gt;@layout&#x2F;main_large&lt;&#x2F;item&gt;</span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"屏幕方向（orientation）限定符\">屏幕方向（Orientation）限定符<a title=\"#屏幕方向（orientation）限定符\" href=\"#屏幕方向（orientation）限定符\"></a></h5>\n<p>针对大屏可通过横向布局、纵向布局别名设置。<br>\n针对普通手机适配和大屏下纵屏、横屏适配可同时在layout下添加几个文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res&#x2F;layout&#x2F;main.xml    &#x2F;&#x2F;默认手机兼容布局</span><br><span class=\"line\">res&#x2F;layout&#x2F;main_large_port.xml  &#x2F;&#x2F;大屏纵向布局</span><br><span class=\"line\">res&#x2F;layout&#x2F;main_large_land.xml  &#x2F;&#x2F;大屏横向布局</span><br></pre></td></tr></table></figure>\n<p>res/values-large-port/layouts.xml<br>\n（大屏、纵向、单面板带操作栏-Andorid 3.2版本前）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;main&quot; type&#x3D;&quot;layout&quot;&gt;@layout&#x2F;main_large_port&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;bool name&#x3D;&quot;has_two_panes&quot;&gt;false&lt;&#x2F;bool&gt;</span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n<p>res/values-large-land/layouts.xml<br>\n（大屏、横向、双面板、宽-Andorid 3.2版本前）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;main&quot; type&#x3D;&quot;layout&quot;&gt;@layout&#x2F;main_large_land&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;bool name&#x3D;&quot;has_two_panes&quot;&gt;true&lt;&#x2F;bool&gt;</span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n<p>res/values-sw600dp-port/layouts.xml<br>\n（大屏、纵向、单面板带操作栏-Andorid 3.2版本后）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;main&quot; type&#x3D;&quot;layout&quot;&gt;@layout&#x2F;main_large_port&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;bool name&#x3D;&quot;has_two_panes&quot;&gt;false&lt;&#x2F;bool&gt;</span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n<p>res/values-sw600dp-land/layouts.xml<br>\n（大屏、横向、双面板、宽-Andorid 3.2版本后）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;main&quot; type&#x3D;&quot;layout&quot;&gt;@layout&#x2F;main_large_land&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;bool name&#x3D;&quot;has_two_panes&quot;&gt;true&lt;&#x2F;bool&gt;</span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n<p>针对双面板设置可在onCreat里直接通过getResources().getBoolean(R.bool.has_two_panes)获取值来判断是否进行展示双面板。</p>\n<h5 id=\"tap\">TAP<a title=\"#tap\" href=\"#tap\"></a></h5>\n<p>有些时候我们可能需要在特殊情况下进行限定某些布局或图片的引用，我们要用限定符进行限定，上文“限定符”仅仅针对尺寸匹配用到，按照多种要求这点限定符是远远不够的，这里我就偷个懒，推荐大家看一下官方文档：<a href=\"https://developer.android.com/guide/topics/resources/providing-resources?hl=zh-cn#AlternativeResources\" target=\"_blank\">提供备用资源</a>。</p>\n<h4 id=\"根据布局组件的相关属性自适应屏幕\">根据布局组件的相关属性自适应屏幕<a title=\"#根据布局组件的相关属性自适应屏幕\" href=\"#根据布局组件的相关属性自适应屏幕\"></a></h4>\n<p>通过属性相关值，使用&quot;wrap_content&quot;、&quot;match_parent&quot;和&quot;weight“来控制视图组件的宽度和高度也是通用的做法，这里就不再详说了。</p>\n<h3 id=\"图片资源匹配\">图片资源匹配<a title=\"#图片资源匹配\" href=\"#图片资源匹配\"></a></h3>\n<p>针对尺寸情况下图片资源自适应常用的就是自动拉伸位图：Nine-Patch，后缀名是.9.png，是一种被特殊处理过的PNG图片，设计时可以指定图片的拉伸区域和非拉伸区域；使用时，系统就会根据控件的大小自动地拉伸你想要拉伸的部分。androidstudio自带有.9图制作工具。</p>\n<h3 id=\"用户界面流程匹配\">用户界面流程匹配<a title=\"#用户界面流程匹配\" href=\"#用户界面流程匹配\"></a></h3>\n<p>这种方式主要目的是根据屏幕的相关配置进而改变用户的操作流程。<br>\n举例：<br>\n1.纵屏的时候是一个列表，则点击列表跳转到详情页；横屏的时候左侧是一个列表，右侧是一个内容展示区域，点击左侧列表右侧显示相关内容。<br>\n2.纵屏的时候是一个列表，横屏的时候判断是否是双面板，不是双面板直接销毁当前页面返回到首页。</p>\n<h2 id=\"屏幕密度匹配\">屏幕密度匹配<a title=\"#屏幕密度匹配\" href=\"#屏幕密度匹配\"></a></h2>\n<h3 id=\"布局匹配-1\">布局匹配<a title=\"#布局匹配-1\" href=\"#布局匹配-1\"></a></h3>\n<h4 id=\"从单位说起\">从单位说起<a title=\"#从单位说起\" href=\"#从单位说起\"></a></h4>\n<p><strong>dp</strong>：为了使一套布局在不同的密度上显示相同的效果，采用px肯定是不行的了，h5开发的时候采用更多的单位em，即表示相对像素，android开发采用的单位是密度无关像素（dp）,即表示与实际物理像素没有关系，是以480x320像素下160dpi作为基准，1dp = 1px，其他像素下进行换算，因此在基准分辨率下屏幕宽度&gt;=控件宽度总和时，高分辨率下效果整体差不多。</p>\n<p><strong>sp</strong>：android建议textview字体单位采用独立比例像素（sp）,这种单位同样与px没有直接关系，并且能跟随系统进行大小缩放，建议采用12sp、14sp、18sp、22sp作为字体设置大小，不推荐奇数和小数，容易造成精度的丢失问题。上边也提到如果想让应用不跟随系统字体大小进行字体缩放，可采用dp作为字体单位。</p>\n<h4 id=\"解决控件的屏幕尺寸和屏幕密度的适配问题\">解决控件的屏幕尺寸和屏幕密度的适配问题<a title=\"#解决控件的屏幕尺寸和屏幕密度的适配问题\" href=\"#解决控件的屏幕尺寸和屏幕密度的适配问题\"></a></h4>\n<p>上边提到采用dp做单位满足布局匹配的条件是在基准分标率下屏幕宽度&gt;=控件宽度总和，高分辨率下才能正常显示，假如在更低的分辨率下则有可能出现控件重叠的现象，这是不友好的，那么如何解决这个问题呢？</p>\n<p>方案1.采用以父布局为基准子布局百分比的形式<br>\n即控件宽高的采用父布局的百分比形式，具体使用形式可参阅：<a href=\"https://github.com/JulienGenoud/android-percent-support-lib-sample\">https://github.com/JulienGenoud/android-percent-support-lib-sample</a></p>\n<p>方案2.采用分辨率百分比的形式<br>\n编写脚本将长度转换成各分辨率下的长度，缺点是生成的分辨率文件很多并且根据设计稿的长宽去匹配很麻烦。具体可参看鸿阳的<a href=\"https://blog.csdn.net/lmj623565791/article/details/45460089\" target=\"_blank\">Android 屏幕适配方案</a>“百分比引入”部分。</p>\n<p>方案3.采用分辨率百分比变种的形式<br>\n这种方式还是采用百分比，只不过百分比的基准方式和前两种有所不同（思想和第二种相同），试想屏幕最终绘制的时候其原型仍然最终转换成分辨率进行屏幕绘制的。单位dp最终会转换成分辨率，sp最终也会转换成分辨率，所以我们干脆以分辨率为基准进行处理。假设当前设备的分辨率为1280*720，而设计搞的分辨率为1920*1080，只需要将两个分辨率做比得出一个比率，进而在设备上按照比率进行排布。</p>\n<p>系统进行单位转换的入口为TypedValue中的applyDimension函数，传入单位与value将其计算为对应的px数值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">applyDimension</span><span class=\"params\">(<span class=\"keyword\">int</span> unit, <span class=\"keyword\">float</span> value, DisplayMetrics metrics)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (unit) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COMPLEX_UNIT_PX:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COMPLEX_UNIT_DIP:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value * metrics.density;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COMPLEX_UNIT_SP:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value * metrics.scaledDensity;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COMPLEX_UNIT_PT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value * metrics.xdpi * (<span class=\"number\">1.0f</span> / <span class=\"number\">72</span>);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COMPLEX_UNIT_IN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value * metrics.xdpi;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COMPLEX_UNIT_MM:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value * metrics.xdpi * (<span class=\"number\">1.0f</span> / <span class=\"number\">25.4f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这个方法中除了采用px为单位没有涉及DisplayMetrics的参数，其他单位都用到了，所以我们可以根据DisplayMetrics的相关参数按照比率重新赋值的方式来进行完美匹配。</p>\n<p>下边我们仍然采用dp为单位：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 重置屏幕密度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">resetDensity</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//绘制页面时参照的设计图尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DESIGN_WIDTH = <span class=\"number\">800f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DESIGN_HEIGHT = <span class=\"number\">1280f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DESTGN_INCH = <span class=\"number\">5.0f</span>;</span><br><span class=\"line\">    <span class=\"comment\">//大屏调节因子，范围0~1，因屏幕同比例放大视图显示非常傻大憨，用于调节感官度</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> BIG_SCREEN_FACTOR = <span class=\"number\">0.8f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    DisplayMetrics dm = context.getResources().getDisplayMetrics();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//确定放大缩小比率</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> rate = Math.min(dm.widthPixels, dm.heightPixels) / Math.min(DESIGN_WIDTH, DESIGN_HEIGHT);</span><br><span class=\"line\">    <span class=\"comment\">//确定参照屏幕密度比率</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> referenceDensity = (<span class=\"keyword\">float</span>) Math.sqrt(DESIGN_WIDTH * DESIGN_WIDTH + DESIGN_HEIGHT * DESIGN_HEIGHT) / DESTGN_INCH / DisplayMetrics.DENSITY_DEFAULT;</span><br><span class=\"line\">    <span class=\"comment\">//确定最终屏幕密度比率</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> relativeDensity = referenceDensity * rate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ORIGINAL_DENSITY == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        ORIGINAL_DENSITY = dm.density;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (relativeDensity &gt; ORIGINAL_DENSITY) &#123;</span><br><span class=\"line\">        relativeDensity = ORIGINAL_DENSITY + (relativeDensity - ORIGINAL_DENSITY) * BIG_SCREEN_FACTOR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dm.density = relativeDensity;</span><br><span class=\"line\">    dm.densityDpi = (<span class=\"keyword\">int</span>) (relativeDensity * DisplayMetrics.DENSITY_DEFAULT);</span><br><span class=\"line\">    dm.scaledDensity = relativeDensity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意获取放大缩小比率时是相对应作比的，这样计算出来的屏幕密度是固定的。</p>\n<p>这种方式基本上可以避免控件在低分辨率的情况下出现重叠的现象，因为是相对整个设计图来的，这里只给出了一套高分辨率设计图的方案，如果开发过程中为了考虑到性能和全覆盖采用多套设计图，大家可根据以上思想加以扩展。</p>\n<p>android8.0之前，整个应用长宽缩放比率均是采用一套，所以只需要在Application配置一次即可，但是在Android8.0的时候，系统架构调整，由原来的统一现在分配到每个Activity和全局Application中，Activity中设置的时候要注意一定要设置setContentView()之前，Application的设置即设置在onCreat()即可。为了使这个应用产生效果，建议将Activity形式的配置在BaseActivity中。</p>\n<p>Activity中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使得在“setContentView()&quot;之前生效，所以配置在此方法中。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> newBase</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Context newBase)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.attachBaseContext(newBase);</span><br><span class=\"line\">    ScreenUtil.resetDensity(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在某种情况下需要Activity的视图初始完毕Application中DisplayMetrics相关参数才能起效果，例如toast.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttachedToWindow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onAttachedToWindow();</span><br><span class=\"line\">    ScreenUtil.resetDensity(<span class=\"keyword\">this</span>.getApplicationContext());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Application中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    ScreenUtil.resetDensity(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"图片资源匹配-1\">图片资源匹配<a title=\"#图片资源匹配-1\" href=\"#图片资源匹配-1\"></a></h3>\n<p>针对图片资源一般我们的做法是多套位图进行适配，那目前主流的屏幕来说我们至少需要UI设计师出两套图片（1080p和760p）,但是对于某些大厂我们需要适配多种就需要多套位图了。</p>\n<p>Android上图片资源匹配是按照屏幕密度范围自动匹配不同分辨率图片的。</p>\n<div class=\"φbt\"><div class=\"φbv\"><table><thead>\n<tr>\n<th style=\"text-align:center\">密度类型</th>\n<th style=\"text-align:center\">代表的分辨率(px)</th>\n<th style=\"text-align:center\">屏幕像素密度(dpi)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">低密度（ldpi）</td>\n<td style=\"text-align:center\">320x240</td>\n<td style=\"text-align:center\">120</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">中密度（mdpi）</td>\n<td style=\"text-align:center\">480x320</td>\n<td style=\"text-align:center\">160</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">高密度（hdpi）</td>\n<td style=\"text-align:center\">800x480</td>\n<td style=\"text-align:center\">240</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">超高密度（xhdpi）</td>\n<td style=\"text-align:center\">1280x720</td>\n<td style=\"text-align:center\">320</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">超超高密度（xxhdpi）</td>\n<td style=\"text-align:center\">1920x1080</td>\n<td style=\"text-align:center\">480</td>\n</tr>\n</tbody>\n</table></div></div><p>注意：针对.9图和某些不需要多套分辨率的图片直接放在drawable文件夹下即可。</p>\n<p>针对mipmap和drawable文件夹的区别，这一点我在14年刚刚接触androidstudio时，也是认为mipmap应该比drawable引用图片的性能处理更好写，但是经翻看官方文档并没有说所有图片都要放在mipmap中，而是建议将android应用的启动图标放在各个mipmap文件夹中，而其他图片还是放在各个drawable文件夹中。</p>\n<p>多套位图的缺点相比大家都很清楚了，第一是耗费UI设计师的时间，第二apk的包非常大，尤其第二个在某些场景也是致命的。有没有更好的解决方案解决这两个缺点呢？</p>\n<p>答案是当然有。解决这个问题就是剔除多套位图的做法，直接在支持最大分辨率的drawable文件夹下放一套大分辨位图，android图片资源引用规则是系统根据设备的屏幕密度优先选取最合适的那套图片，如果找不到则向大一点分辨率文件去寻找图片来适配（为什么选取向大一级的文件夹下去寻找，目的是寻找到大图可以采用缩小处理，至少不会失真，反过来想想也是不可取）。<br>\n有同学这里问了，放大图片同样apk包很大，并且加载图片时特耗内存，这里我推荐一个工具:<a href=\"https://tinypng.com/\" target=\"_blank\">TinyPng</a>，支持单个图片压缩，也支持多图片同时压缩，再配合目录“解决控件的屏幕尺寸和屏幕密度的适配问题”第三种方案，简直完美。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://developer.android.com/guide/practices/screens_support?hl=zh-cn#qualifiers\">https://developer.android.com/guide/practices/screens_support?hl=zh-cn#qualifiers</a></li>\n</ul>\n","prev":{"title":"TextView局部字体超链接处理方案","link":"posts/1525070565"},"next":{"title":"AndroidStudio配置Terminal窗口及相关命令归总","link":"posts/1521735946"},"plink":"https://blog.ixin.run/posts/1522163597/","toc":[{"id":"相关概念","title":"相关概念","index":"1"},{"id":"屏幕尺寸匹配","title":"屏幕尺寸匹配","index":"2","children":[{"id":"布局匹配","title":"布局匹配","index":"2.1"},{"id":"图片资源匹配","title":"图片资源匹配","index":"2.2"},{"id":"用户界面流程匹配","title":"用户界面流程匹配","index":"2.3"}]},{"id":"屏幕密度匹配","title":"屏幕密度匹配","index":"3","children":[{"id":"布局匹配-1","title":"布局匹配","index":"3.1"},{"id":"图片资源匹配-1","title":"图片资源匹配","index":"3.2"}]},{"id":"参考","title":"参考","index":"4"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1522163597/\" title=\"Android屏幕适配解决方案\">https://blog.ixin.run/posts/1522163597/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}