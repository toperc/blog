{"title":"AndroidStudio配置Terminal窗口及相关命令归总","date":"2018-03-22T16:25:46.000Z","date_formatted":{"ll":"2018年3月23日","L":"2018/03/23","MM-DD":"03-23"},"link":"post/1521735946","comments":true,"categories":["Android"],"updated":"2021-01-14T08:08:54.887Z","content":"<p>Terminal大家都熟悉，是一个类似cmd的命令行工具，AndroidStudio中自带，我们可以在上面利用ADB工具的相关命令进行应用程序安装、卸载、文件写入、日志输出等操作，也可以利用Gradle构建工具的相关命令进行项目的构建打包、签名等操作。</p>\n<a id=\"more\"></a>\n<p>我们在第一次安装Android studio的时候Terminal窗口中输入&quot;adb&quot;或&quot;gradle&quot;的时候总是报一个“XXX不是内部或外部命令，也不是可运行的程序或批处理文件”的错误信息，这是因为这两个工具没有在系统变量中配置的原因。这里就简单总结一下Terminal相关配置及一些常用命令便于日后的回顾。</p>\n<h2 id=\"adb工具配置\">ADB工具配置<a title=\"#adb工具配置\" href=\"#adb工具配置\"></a></h2>\n<p>ADB全称Android Debug Bridge，是Android的一个调试工具，借助这个工具，我们可以调试开发的程序,还可以对连接到电脑的手机设备或者手机模拟器进行操作，比如安装、卸载app、升级等，总之adb就是连接Android手机与PC端的桥梁，可以让用户在电脑上对手机进行全面的操作。adb.exe在安装的sdk开发包platform-tools目录下。<br>\n上边也说了第一次安装androidstudio，Terminal窗口并不能运行adb命令，需要进行环境变量的配置，其配置过程和配置java一样：</p>\n<ol>\n<li>先在系统变量中新建一个变量名字为ANDROID_HOME的变量，值为你的sdk目录。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/BA09C81AAF6F4805AA1FBC1AA6A86296?method=download&amp;shareKey=7807ca9987a6327e3bc5458b5d36f802\" alt=\"adb环境变量配置图1\"></li>\n<li>将SDK中adb目录配置在path变量里，在系统变量的path中后面添加 %ANDROID_HOME%\\platform-tools;<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/6F3D1556BDE8412685D686AC76739BDF?method=download&amp;shareKey=388819749b83764f6054741baff926d3\" alt=\"adb环境变量配置图2\"></li>\n<li>重启android studio，打开Terminal窗口，输入’adb’，若出现adb相关信息，即为可用。</li>\n</ol>\n<h2 id=\"adb常用的命令\">ADB常用的命令<a title=\"#adb常用的命令\" href=\"#adb常用的命令\"></a></h2>\n<ul>\n<li>adb start-server  //开启PC端的adb server</li>\n<li>adb kill-server  //关闭PC端的adb server</li>\n<li>adb connect 192.168.1.5:5555   //连接手机(5555是手机开放的端口号，可省略）<br>\n，如果连接成功会进行相关的提示，此时在电脑上可以输入adb相关的命令进行调试该手机，如果失败的话，可以先kill-server命令，然后重试连接。</li>\n<li>adb disconnect 192.168.1.5:5555 //调试结束，断开手机连接。</li>\n<li>adb devices  //显示当前运行的全部模拟器</li>\n<li>adb shell pm list packages  //列出手机上所有安装的应用包名</li>\n<li>adb install *.apk  //adb安装apk</li>\n<li>adb -s &lt;设备编号&gt; install *.apk  //多个设备时，指定某设备安装应用。</li>\n<li>adb uninstall apk的包名  //adb卸载apk。</li>\n<li>adb push &lt;本地路径&gt; &lt;远程路径&gt; //从本地向设备中添加文件</li>\n<li>adb push &lt;远程路径&gt; &lt;本地路径&gt; //从设备上拷贝文件到本地</li>\n<li>adb help //显示帮助信息</li>\n<li>adb shell //进入设备的data目录</li>\n<li>exit  //退出adb shell</li>\n</ul>\n<p>tap:有些时候通过命令行安装某个应用时，默认是不启动这个应用的，我们可以使用如下命令启动该应用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb shell</span><br><span class=\"line\">$ am start -n &#123;应用包名&#125;&#x2F;&#123;应用启动页全路径&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"gradle工具配置\">Gradle工具配置<a title=\"#gradle工具配置\" href=\"#gradle工具配置\"></a></h2>\n<p>Gradle这个不陌生，作为Android开发主要用于项目的构建，功能很强大，其命令可用于apk的多渠道打包（release,debug）、签名、查看构建信息等，Terminal中使用gradle命令同样也要配置环境变量，gradle的环境变量配置和adb环境变量配置一样，也有如下步骤：</p>\n<ol>\n<li>先在系统变量中新建一个变量名字为GRADLE_HOME的变量，值为本地gradle地址，在AndroidStudio安装目录中可找到。</li>\n<li>将SDK中adb目录配置在path变量里，在系统变量的path中后面添加 %GRADLE_HOME%\\bin;</li>\n<li>重启Android Studio，打开Terminal窗口，输入’gradle’,若有gradle先关信息即为成功。</li>\n</ol>\n<h2 id=\"terminal输入命令gradle和gradlew的区别\">Terminal输入命令gradle和gradlew的区别<a title=\"#terminal输入命令gradle和gradlew的区别\" href=\"#terminal输入命令gradle和gradlew的区别\"></a></h2>\n<p>其实细心的同学发现不用配置gradle的环境变量直接可用&quot;gradlew&quot;的命令就可以使用。这两个有什么联系呢？<br>\ngradlew即gradle wrapper,是google推荐的build方式。每个项目都有一个特定版本的gradle用于构建此项目，但是并不是所有的项目都用一个版本，也有可能某个项目所用的gradle版本电脑上并没有下载，这样如果在本地配置gradle，需要配置太多个，太麻烦。在项目gradlew里面配置项目所需要的gradle版本，然后用户只需要运行gradlew（第一次运行）就可以按照配置下载对应的gradle到项目的目录中，仅仅给项目本身用，然后就可以用gradlew命令执行clean、build等操作，和gradle命令一样，太方便了。其实说白了gradlew就相当于gradle的包装。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/674C96DFB3FF4AED998873B58CB612EE?method=download&amp;shareKey=a569061a92f8136b783ac7ea709c4b84\" alt=\"gradle-wrapper\"></p>\n<h2 id=\"gradle常用的命令\">Gradle常用的命令<a title=\"#gradle常用的命令\" href=\"#gradle常用的命令\"></a></h2>\n<ul>\n<li>gradlew -v //版本号</li>\n<li>gradlew clean //清除app目录下的build文件夹</li>\n<li>gradlew build //检查依赖并编译打包</li>\n<li>gradlew assembleDebug //编译并打Debug包</li>\n<li>gradlew assembleRelease //编译并打Release的包</li>\n<li>gradlew installRelease //Release模式打包并安装</li>\n<li>gradlew uninstallRelease //卸载Release模式包</li>\n</ul>\n","prev":{"title":"Android屏幕适配解决方案","link":"post/1522163597"},"next":{"title":"Android多CPU适配总结","link":"post/1521647039"},"plink":"https://blog.ixin.run/post/1521735946/","toc":[{"id":"adb工具配置","title":"ADB工具配置","index":"1"},{"id":"adb常用的命令","title":"ADB常用的命令","index":"2"},{"id":"gradle工具配置","title":"Gradle工具配置","index":"3"},{"id":"terminal输入命令gradle和gradlew的区别","title":"Terminal输入命令gradle和gradlew的区别","index":"4"},{"id":"gradle常用的命令","title":"Gradle常用的命令","index":"5"}],"reward":true,"copyright":{"custom":"转载请注明出处，谢谢支持。"}}