{"title":"Java垃圾回收（二）GC过程","date":"2019-09-22T08:07:50.000Z","date_formatted":{"ll":"2019年9月22日","L":"2019/09/22","MM-DD":"09-22"},"link":"posts/1569139670","comments":true,"tags":["JVM","垃圾回收"],"categories":["Java"],"updated":"2021-01-29T12:51:44.660Z","content":"<p>什么样的对象才是垃圾？对于Java对象来讲，如果说这个对象没有被其他对象所引用该对象就是无用的，此对象就被称为垃圾，其占用的内存也就要被销毁。本篇我们就讲一讲GC（Garbage Collection）的具体过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"gc\">GC<a title=\"#gc\" href=\"#gc\"></a></h2>\n<p>GC：Garbage Collection垃圾收集。这里所谓的垃圾指的是在系统运行过程当中所产生的一些无用的对象，这些对象占据着一定的内存空间，如果长期不被释放，可能导致OOM。</p>\n<p>在C/C++里是由程序猿自己去申请、管理和释放内存空间，因此没有GC的概念。而在Java中，后台专门有一个专门用于垃圾回收的线程来进行监控、扫描，自动将一些无用的内存进行释放，这就是垃圾收集的一个基本思想，目的在于防止由程序猿引入的人为的内存泄露。</p>\n<h2 id=\"gc分代\">GC分代<a title=\"#gc分代\" href=\"#gc分代\"></a></h2>\n<p>正如易经中的九重天一样，JVM对内存也进行了分代，分别分为：年轻代（Young）、年老代（Tenured）、持久代（Perm）。对不同生命周期的对象使用不同的垃圾回收算法。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/C801717B0A2C44628783102B4EA3F36C?method=download&amp;shareKey=e06afd8492c0edda2144838a30a5a15e\" alt=\"GC分代\"></p>\n<h3 id=\"年轻代(young)\">年轻代(Young)<a title=\"#年轻代(young)\" href=\"#年轻代(young)\"></a></h3>\n<p>年轻代分为三个区，一个eden区，两个Survivor区。程序中生成的大部分新的对象都在Eden区中，当Eden区满时，还存活的对象将被复制到其中一个Survivor区，当此Survivor区的对象占用空间满了时，此区存活的对象又被复制到另外一个Survivor区，当这个Survivor区也满了的时候，从第一个Survivor区复制过来的并且此时还存活的对象，将被复制到年老代。</p>\n<p>需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来对象和从前一个Survivor复制过来的对象，<strong>而复制到年老区的只有从第一个Survivor去过来的对象</strong>。而且，Survivor区总有一个是空的。同时，根据程序需要，Survivor区是可以配置为多个的（多于两个），这样可以增加对象在年轻代中的存在时间，减少被放到年老代的可能。</p>\n<h3 id=\"年老代（tenured）\">年老代（Tenured）<a title=\"#年老代（tenured）\" href=\"#年老代（tenured）\"></a></h3>\n<p>年老代存放的是上面年轻代复制过来的对象，也就是在年轻代中还存活的对象，并且区满了复制过来的。一般来说，年老代中的对象生命周期都比较长。</p>\n<h3 id=\"持久代（perm）\">持久代（Perm）<a title=\"#持久代（perm）\" href=\"#持久代（perm）\"></a></h3>\n<p>用于存放静态的类和方法，持久代对垃圾回收没有显著的影响。</p>\n<h2 id=\"三种gc类型\">三种GC类型<a title=\"#三种gc类型\" href=\"#三种gc类型\"></a></h2>\n<p>Java GC类型通常分为三种：Minor GC、Major GC、Full GC。</p>\n<h3 id=\"minor-gc\">Minor GC<a title=\"#minor-gc\" href=\"#minor-gc\"></a></h3>\n<p>指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</p>\n<p>一般情况下，当新对象生成，并且在Eden申请空间失败时，就会触发Minor GC，对Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区。然后整理Survivor的两个区。这种方式的GC是对年轻代的Eden区进行，不会影响到年老代。因为大部分对象都是从Eden区开始的，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。因而，一般在这里需要使用速度快、效率高的算法，使Eden去能尽快空闲出来。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/82FFE37BC3F3438FB430C0EE3FFFEEBC?method=download&amp;shareKey=b31269ca6c7fc9741180ef467f09190b\" alt=\"垃圾回收年轻代回收策略\"></p>\n<h3 id=\"major-gc\">Major GC<a title=\"#major-gc\" href=\"#major-gc\"></a></h3>\n<p>指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在ParallelScavenge收集器的收集策略里<br>\n就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</p>\n<h3 id=\"full-gc\">Full GC<a title=\"#full-gc\" href=\"#full-gc\"></a></h3>\n<p>对整个堆进行整理，包括Young、Tenured和Perm。Full GC因为需要对整个对进行回收，所以比Minor GC要慢，因此应该尽可能减少Full GC的次数。在对JVM调优的过程中，很大一部分工作就是对于Full GC的调节。有如下原因可能导致Full GC：</p>\n<ul>\n<li>年老代（Tenured）被写满</li>\n<li>持久代（Perm）被写满</li>\n<li>System.gc()被显示调用（系统建议执行Full GC，但是不必然执行）</li>\n<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li>\n<li>上一次GC之后Heap的各域分配策略动态变化</li>\n</ul>\n<h3 id=\"major-gc-vs-full-gc\">Major GC vs Full GC<a title=\"#major-gc-vs-full-gc\" href=\"#major-gc-vs-full-gc\"></a></h3>\n<p>很多同学对这两种GC类型分不清，通常也会认为Major GC和Full GC是等同的。以下是来自<a href=\"https://www.zhihu.com/question/41922036/answer/93079526\" target=\"_blank\">一个知乎的大神的解释</a>：</p>\n<p>针对HotSpot VM的实现，它里面的GC其实准确分类只有两大种：</p>\n<ul>\n<li>Partial GC：并不收集整个GC堆的模式\n<ul>\n<li>Young GC：只收集young gen的GC</li>\n<li>Old GC：只收集old gen的GC。只有CMS的concurrent collection是这个模式</li>\n<li>Mixed GC：收集整个young gen以及部分old gen的GC。只有G1有这个模式。</li>\n</ul>\n</li>\n<li>Full GC：收集整个堆，包括young gen、old gen、perm gen（如果存在的话）等所有部分的模式。</li>\n</ul>\n<p>Major GC通常是跟full GC是等价的，收集整个GC堆。但因为HotSpot VM发展了这么多年，外界对各种名词的解读已经完全混乱了，当有人说“major GC”的时候一定要问清楚他想要指的是上面的full GC还是old GC。</p>\n<p>最简单的分代式GC策略，按HotSpot VM的serial GC的实现来看，触发条件是：</p>\n<ul>\n<li>young GC：当young gen中的eden区分配满的时候触发。注意young GC中有部分存活对象会晋升到old gen，所以young GC后old gen的占用量通常会有所升高。</li>\n<li>full GC：当准备要触发一次young GC时，如果发现统计数据说之前young GC的平均晋升大小比目前old gen剩余的空间大，则不会触发young GC而是转为触发full GC（因为HotSpot VM的GC里，除了CMS的concurrent collection之外，其它能收集old gen的GC都会同时收集整个GC堆，包括young gen，所以不需要事先触发一次单独的young GC）；或者，如果有perm gen的话，要在perm gen分配空间但已经没有足够空间时，也要触发一次full GC；或者System.gc()、heap dump带GC，默认也是触发full GC。</li>\n</ul>\n<p><strong>PS：这里涉及到的“CMS的concurrent collection”属于JVM GC性能调优部分的，后边文章会讲到。</strong></p>\n<h2 id=\"为什么要分代回收\">为什么要分代回收<a title=\"#为什么要分代回收\" href=\"#为什么要分代回收\"></a></h2>\n<p>在一开始的时候，JVM的GC就是采用标记-清除-压缩方式进行的，这么做并不是很高效，因为当对象分配的越来越多时，对象列表也越来也大，扫描和移动越来越耗时，造成了内存回收越来越慢。然而，经过根据对java应用的分析，发现大部分对象的存活时间都非常短，只有少部分数据存活周期是比较长的，请看下面对java对象内存存活时间的统计：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/D7C58BA33C7B4FD58405911533D9F73A?method=download&amp;shareKey=c6f1ed564b3118326a175a1ddb6a32ae\" alt=\"java对象内存存活时间的统计\"></p>\n<p>从图表中可以看出，大部分对象存活时间是非常短的，随着时间的推移，被分配的对象越来越少。</p>\n<h2 id=\"gc过程\">GC过程<a title=\"#gc过程\" href=\"#gc过程\"></a></h2>\n<p>理解Java的垃圾回收机制，就要从：“<strong>什么时候</strong>”，“<strong>对什么东西</strong>”，“<strong>做了什么</strong>”三个方面来具体分析。</p>\n<p>第一：“什么时候”即就是GC触发的条件。GC触发的条件有两种。</p>\n<ol>\n<li>程序调用System.gc时可以触发；</li>\n<li>系统自身来决定GC触发的时机。系统判断GC触发的依据：根据Eden区和From Space区的内存大小来决定。当内存大小不足时，则会启动GC线程并停止应用线程。</li>\n</ol>\n<p>第二：“对什么东西”笼统的认为是Java对象。但是准确来讲，GC操作的对象分为：通过可达性分析法无法搜索到的对象和可以搜索到的对象。对于搜索不到的方法进行标记。</p>\n<p>第三：“做了什么”最浅显的理解为释放对象。但是从GC的底层机制可以看出，对于可以搜索到的对象进行复制操作，对于搜索不到的对象，调用finalize()方法进行释放。</p>\n<p>以下是具体的GC过程：</p>\n<p>1.在初始阶段，新创建的对象被分配到Eden区，survivor的两块空间都为空。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/1554CB0443C14C0A9FA83D262E3C7866?method=download&amp;shareKey=c9e9f00e5833650c51298699ab58bc1b\" alt=\"GC过程图1\"></p>\n<p>2.当Eden区满了的时候，minor garbage被触发<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/C41ED37172CA418DB702320EAB1DC467?method=download&amp;shareKey=c27b9888463e38848816da12b9ff241a\" alt=\"GC过程图2\"></p>\n<p>3.经过扫描与标记，存活的对象被复制到S0，不存活的对象被回收</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/00BFB586533F4D9B9EDFE4B9D4EB5D69?method=download&amp;shareKey=57a286c5a2c7b2c4ed5127442dfc521b\" alt=\"GC过程图3\" class=\"φcx\"></p>\n<p>4.在下一次的Minor GC中，Eden区的情况和上面一致，没有引用的对象被回收，存活的对象被复制到survivor区。然而在survivor区，S0的所有的数据都被复制到S1，需要注意的是，在上次minor GC过程中移动到S0中的两个对象在复制到S1后其年龄要加1。此时Eden区S0区被清空，所有存活的数据都复制到了S1区，并且S1区存在着年龄不一样的对象，过程如下图所示：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/D4C8B90794C14E7E9A74B0E7A99BB83B?method=download&amp;shareKey=d2b1ca8a2669224134dc5ac45d03ef5f\" alt=\"GC过程图4\"></p>\n<p>5.再下一次Minor GC则重复这个过程，这一次survivor的两个区对换，存活的对象被复制到S0，存活的对象年龄加1，Eden区和另一个survivor区被清空。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/7939355214414AA086E6CF99C3E96CE2?method=download&amp;shareKey=4c45250467ae948989fabf1e4f4b944f\" alt=\"GC过程图5\"></p>\n<p>6.再经过几次Minor GC之后，当存活对象的年龄达到一个阈值之后（可通过参数配置，默认是8），就会被从年轻代Promotion到老年代。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/0DA5BA1ACC1F4F97B5D4AF6740BBC2AF?method=download&amp;shareKey=111b00c33da7e212a67606f3bf87583f\" alt=\"GC过程图6\"></p>\n<p>7.随着MinorGC一次又一次的进行，不断会有新的对象被promote到老年代。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/1437ABFA6DE74399BFAC9BAA9FE2A823?method=download&amp;shareKey=231fa245b00fab3cbd1c1c132d9d2068\" alt=\"GC过程图7\"></p>\n<p>8.上面基本上覆盖了整个年轻代所有的回收过程。最终，MajorGC将会在老年代发生，老年代的空间将会被清除和压缩。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/74C38723ED7D429491F4C8CFB8DADC2E?method=download&amp;shareKey=f0a84f4f94e4be5066c3cc8d79d77253\" alt=\"GC过程图8\"></p>\n<p>从上面的过程可以看出，Eden区是连续的空间，且Survivor总有一个为空。经过一次GC和复制，一个Survivor中保存着当前还活着的对象，而Eden区和另一个Survivor区的内容都不再需要了，可以直接清空，到下一次GC时，两个Survivor的角色再互换。因此，这种方式分配内存和清理内存的效率都极高，这种垃圾回收的方式就是著名的“停止-复制（Stop-and-copy）”清理法（将Eden区和一个Survivor中仍然存活的对象拷贝到另一个Survivor中），这不代表着停止复制清理法很高效，其实，它也只在这种情况下（基于大部分对象存活周期很短的事实）高效，如果在老年代采用停止复制，则是非常不合适的。</p>\n<p><strong>老年代存储的对象比年轻代多得多，而且不乏大对象，对老年代进行内存清理时，如果使用停止-复制算法，则相当低效</strong>。一般，老年代用的算法是标记-压缩算法，即：标记出仍然存活的对象（存在引用的），将所有存活的对象向一端移动，以保证内存的连续。在发生Minor GC时，虚拟机会检查每次晋升进入老年代的大小是否大于老年代的剩余空间大小，如果大于，则直接触发一次Full GC，否则，就查看是否设置了-XX:+HandlePromotionFailure（允许担保失败），如果允许，则只会进行MinorGC，此时可以容忍内存分配失败；如果不允许，则仍然进行Full GC（这代表着如果设置-XX:+Handle PromotionFailure，则触发MinorGC就会同时触发Full GC，哪怕老年代还有很多内存，所以，最好不要这样做）。</p>\n<p>关于方法区即永久代的回收，永久代的回收有两种：</p>\n<ul>\n<li>常量池中的常量</li>\n<li>无用的类信息</li>\n</ul>\n<p>常量的回收很简单，没有引用了就可以被回收。对于无用的类进行回收，必须保证3点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 类的所有实例都已经被回收</span><br><span class=\"line\">2. 加载类的ClassLoader已经被回收</span><br><span class=\"line\">3. 类对象的Class对象没有被引用（即没有通过反射引用该类的地方）</span><br></pre></td></tr></table></figure>\n<p><strong>永久代的回收并不是必须的，可以通过参数来设置是否对类进行回收。</strong></p>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>以上就是GC回收的整个过程，到这里应该有所明了了吧，Java虽然有很好的回收机制，降低了开发者时刻关心内存的顾虑，但是如果不对此了解，也会有一定隐患，就好比温水里煮青蛙，时间长了自己都不知道该怎么“跳”了。</p>\n<p>下一篇我将对GC回收过程中所使用的算法做一个归总，好多同学在总结这块东西的时候总是看到哪里想到哪里，总出来的东西就感觉东拼西凑一样，说不定他自己就不懂，总也是白总，循序渐进才是越深入越知会。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/41922036/answer/93079526\">https://www.zhihu.com/question/41922036/answer/93079526</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/5910\">https://yq.aliyun.com/articles/5910</a></li>\n</ul>\n","prev":{"title":"Java垃圾回收（三）GC算法","link":"posts/1569143270"},"next":{"title":"Java垃圾回收（一）四种对象引用类型","link":"posts/1569136070"},"plink":"https://blog.ixin.run/posts/1569139670/","toc":[{"id":"gc","title":"GC","index":"1"},{"id":"gc分代","title":"GC分代","index":"2","children":[{"id":"年轻代(young)","title":"年轻代(Young)","index":"2.1"},{"id":"年老代（tenured）","title":"年老代（Tenured）","index":"2.2"},{"id":"持久代（perm）","title":"持久代（Perm）","index":"2.3"}]},{"id":"三种gc类型","title":"三种GC类型","index":"3","children":[{"id":"minor-gc","title":"Minor GC","index":"3.1"},{"id":"major-gc","title":"Major GC","index":"3.2"},{"id":"full-gc","title":"Full GC","index":"3.3"},{"id":"major-gc-vs-full-gc","title":"Major GC vs Full GC","index":"3.4"}]},{"id":"为什么要分代回收","title":"为什么要分代回收","index":"4"},{"id":"gc过程","title":"GC过程","index":"5"},{"id":"总结","title":"总结","index":"6"},{"id":"参考","title":"参考","index":"7"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1569139670/\" title=\"Java垃圾回收（二）GC过程\">https://blog.ixin.run/posts/1569139670/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}