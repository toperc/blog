{"title":"浅谈Android编译打包流程","date":"2021-03-17T02:00:44.000Z","date_formatted":{"ll":"2021年3月17日","L":"2021/03/17","MM-DD":"03-17"},"link":"posts/1615946471","comments":true,"tags":["系统"],"categories":["Android"],"updated":"2021-03-17T14:05:23.795Z","content":"<p>作为移动开发的我们平时关注更多的关注业务上的实现和技术的提升，而技术的提升也是为了更好的维护好我们的业务。但是我们很少关注有关apk的一些问题：一个apk的内部构造有哪些？一个apk是怎么从我们的java代码或者kotlin工程编译出来的？以及apk编译需要哪些步骤？如果把apk的编译过程研究透了，那将会继续拓宽我们的技术栈。本文就浅谈一下Android项目编译成apk的内部流程。</p>\n<a id=\"more\"></a>\n<h2 id=\"apk是啥玩意儿\">apk是啥玩意儿<a title=\"#apk是啥玩意儿\" href=\"#apk是啥玩意儿\"></a></h2>\n<p>APK是Android Package的缩写，即Android安装包。<code>.apk</code>文件其实就是一个压缩包，把文件的后缀改成<code>.zip</code>，就可以正常解压，查看内部的相关文件信息了。</p>\n<p>有同学问了为什么zip不能安装？当然不能，系统规定的不允许！</p>\n<p>系统中有一个叫应用管理器的程序，他会优先扫描搜集系统中所有.apk的文件，标记这些文件是可以被系统加载的。然后当我们点击apk或者系统第一次启动的时候，会复制这些.apk文件到系统指定目录进行校验、解压处理。</p>\n<h2 id=\"apk包含哪些东西\">apk包含哪些东西<a title=\"#apk包含哪些东西\" href=\"#apk包含哪些东西\"></a></h2>\n<p>我们把一个apk解压后会得到以下这些文件：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/1337B2EFA3BB49BAA9BBE5066280A477?method=download&amp;shareKey=07dab65c579abcb24ba13fe8aefb6f73\" alt=\"apk解压后\" class=\"φbs\"></p>\n<ol>\n<li>assets资源（不是每个项目都有）；</li>\n<li>lib包（不是每个项目都有），lib文件夹里面存放的是so动态链接库，so动态链接库是不需要apk打包一些压缩处理的；</li>\n<li>META-INF，签名文件夹；</li>\n<li>res资源，里面是二进制的xml资源和其他非代码类的资源文件；</li>\n<li>AndroidManifest.xml，二进制的；</li>\n<li>classes.dex，.dex文件，就是我们写的java代码经过处理得到的；</li>\n<li>resources.arsc，记录了所有的应用程序资源目录的信息，将其想象成是一个资源索引表，这个资源索引表在给定资源ID和设备配置信息的情况下，能够在应用程序的资源目录中快速地找到最匹配的资源。</li>\n</ol>\n<h2 id=\"apk打包流程\">apk打包流程<a title=\"#apk打包流程\" href=\"#apk打包流程\"></a></h2>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/6F9F7103937B4DAFBBB6835974105968?method=download&amp;shareKey=83cd104795bd54dd926857c818e1f190\" alt=\"apk打包流程\" class=\"φbs\"></p>\n<p>如图所示apk打包流程主要分为以下几个阶段：</p>\n<ol>\n<li>aapt阶段，打包资源文件，生成R.java文件</li>\n<li>aidl阶段，处理aidl文件，生成相应的.java文件</li>\n<li>Java Compiler阶段，编译工程源码，生成相应的class文件</li>\n<li>dex阶段，转换所有的class文件，生成classes.dex文件</li>\n<li>apkbuilder阶段，打包生成apk</li>\n<li>Jarsigner阶段，对apk文件进行签名</li>\n<li>zipalign阶段，对签名后的apk进行对齐处理，这个过程一般是release包条件下。</li>\n</ol>\n<p>每一个阶段，都对应一个工具：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/38BBC3E64AF549D6A0D764FCC87EEBFC?method=download&amp;shareKey=5b5215d303d673718d241cd053fae1ac\" alt=\"apk打包所需工具\" class=\"φbs\"></p>\n<h3 id=\"aapt阶段\">aapt阶段<a title=\"#aapt阶段\" href=\"#aapt阶段\"></a></h3>\n<p>使用aapt工具来打包res资源文件，生成R.java、resources.arsc和res文件。</p>\n<blockquote>\n<p>aapt传统的打包主要指的是res和Java代码的打包，aapt打包走的是单线程，流水式的任务从上到下进行打包构建。传统的aapt打包，aapt会执行2次，第一次是生成R.java，参与javac编译，第二次是对res里面的资源文件进行编译，最后将Dex文件与编译好的资源文件打包成apk，进行签名。整个流程下来没有任务缓存，没有并发，也没有增量，每次构建都是一个全新的流程。所以每次构建时间也比较恒定，代码量，资源量越多，构建的时间越慢。</p>\n</blockquote>\n<p>其中：</p>\n<ol>\n<li>除了assets和res/raw资源被原装不动地打包进APK包中，其它的资源文件都会被编译或者特殊处理（压缩，过滤等）</li>\n<li>除了assets资源外，其他资源都会被赋予一个资源ID，res/raw也会有资源ID。</li>\n<li>打包工具负责编译和打包资源，编译完成之后，会生成一个resources.arsc文件和一个R.java，前者保存的是一个资源索引表，后者定义了各个资源ID常量。</li>\n</ol>\n<p>R文件存的全部是资源ID，而resources.arsc则存储的是所有资源文件的信息表，包括不同设备下的资源准确定位。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/840F65A6404E4BF9B0846BB8782DEEB6?method=download&amp;shareKey=31459b107056ebcf6bfca7f8ecc40782\" alt=\"R.java文件\" class=\"φbs\"></p>\n<p>我们平时使用最多的<code>findViewById</code>就是在resources.arsc文件下通过R文件中该资源的Id准确定位到该资源所在位置，进一步加载引用。有时候我们资源中有不同大小的同一张图片，虽然引用id一样，也可以在不同的设备下找到准确的图片位置。</p>\n<p>项目还未编译打包的时候res完整的有9种目录：</p>\n<ul>\n<li><strong>animator</strong>，这类资源以XML文件保存在res/animator目录下，用来描述属性动画。</li>\n<li><strong>anim</strong>，这类资源以XML文件保存在res/anim目录下，用来描述补间动画。</li>\n<li><strong>color</strong>，这类资源以XML文件保存在res/color目录下，用描述对象颜色状态选择子。</li>\n<li><strong>drawable</strong>，这类资源以XML或者Bitmap文件保存在res/drawable目录下，用来描述可绘制对象。</li>\n<li><strong>layout</strong>，这类资源以XML文件保存在res/layout目录下，用来描述应用程序界面布局。</li>\n<li><strong>menu</strong>，这类资源以XML文件保存在res/menu目录下，用来描述应用程序菜单。</li>\n<li><strong>raw</strong>，这类资源以任意格式的文件保存在res/raw目录下。</li>\n<li><strong>values</strong>，这类资源以XML文件保存在res/values目录下，用来描述一些简单值，例如，数组、颜色、尺寸、字符串和样式值等。</li>\n<li><strong>xml</strong>，这类资源以XML文件保存在res/xml目录下，一般就是用来描述应用程序的配置信息。</li>\n</ul>\n<p>编译打包成apk后，apk文件中不包括<strong>res/values</strong>目录， 这是因为res/values目录下的资源文件的内容经过编译之后，都直接写入到资源项索引表resources.arsc去了。</p>\n<h3 id=\"aidl阶段\">aidl阶段<a title=\"#aidl阶段\" href=\"#aidl阶段\"></a></h3>\n<p><code>aidl</code>工具解析aidl接口定义文件，生成对应的Java文件，供下一步程序调用。对于没有使用到aidl的android工程，可以跳过此步骤。</p>\n<h3 id=\"java-compiler阶段\">Java Compiler阶段<a title=\"#java-compiler阶段\" href=\"#java-compiler阶段\"></a></h3>\n<p>这里调用了<code>javac</code>工具编译工程的src目录下所有的java源文件（R.java、Java接口文件、Java源文件），生成的class文件位于工程的bin\\classess目录下。</p>\n<p>实际开发过程中，也有可能会使用android NDK来编译native代码（android SDK 开发），因此，如果可能的话，这一步还需要使用android NDK编译C/C++代码。</p>\n<h3 id=\"dex阶段\">dex阶段<a title=\"#dex阶段\" href=\"#dex阶段\"></a></h3>\n<p>通过<code>dx</code>工具将.class文件和第三方库中的.class文件处理生成classes.dex。dx工具主要的工作是将java字节码转换为dalvik字节码、压缩常量池、消除冗余信息等。</p>\n<h3 id=\"apkbuilder阶段\">apkbuilder阶段<a title=\"#apkbuilder阶段\" href=\"#apkbuilder阶段\"></a></h3>\n<p>通过系统构建apk脚本，将classes.dex、resources.arsc、res文件夹(res/raw资源被原装不动地打包进APK之外，其它的资源都会被编译或者处理)、Other Resources(assets文件夹)、AndroidManifest.xml打包成apk文件。</p>\n<p>res/raw和assets的相同点：</p>\n<p>两者目录下的文件在打包后会原封不动的保存在apk包中，不会被编译成二进制。</p>\n<p>res/raw和assets的不同点：</p>\n<ol>\n<li>res/raw中的文件会被映射到R.java文件中，访问的时候直接使用资源ID即R.id.filename；assets文件夹下的文件不会被映射到R.java中，访问的时候需要AssetManager类。</li>\n<li>res/raw不可以有目录结构，而assets则可以有目录结构，也就是assets目录下可以再建立文件夹</li>\n</ol>\n<h3 id=\"jarsigner阶段\">Jarsigner阶段<a title=\"#jarsigner阶段\" href=\"#jarsigner阶段\"></a></h3>\n<p>通过jarsigner工具对apk文件进行签名。</p>\n<p>android的应用程序需要签名才能在android设备上安装，签名apk文件有两种情况：</p>\n<ol>\n<li>在平时开发的时候，在编译调试程序时会自己使用一个debug.keystore对apk进行签名，该文件位于<code>C:\\Users\\&#123;用户&#125;\\.android\\</code>目录下。</li>\n<li>正式发布时对应用程序打包进行签名，这种情况下需要提供一个符合android开发文档中要求的签名文件。</li>\n</ol>\n<h3 id=\"zipalign阶段\">zipalign阶段<a title=\"#zipalign阶段\" href=\"#zipalign阶段\"></a></h3>\n<p>release模式下通过zipalign工具对签名后的apk进行对齐处理。</p>\n<p>Zipalign是一个android平台上整理APK文件的工具，它对apk中未压缩的数据进行4字节对齐，对齐后就可以使用mmap函数读取文件，每个资源的开始位置上都是上一个资源之后的4字节，访问下一个资源就不用遍历了，有点类似于资源数组化，加快访问速度。</p>\n<h3 id=\"整体细节图\">整体细节图<a title=\"#整体细节图\" href=\"#整体细节图\"></a></h3>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/49B93EB8ACD94925B662B6176790DEDA?method=download&amp;shareKey=18d7c367ab33e283ee2efb57adf4396d\" alt=\"apk打包整体细节图\" class=\"φbs\"></p>\n<h2 id=\"apk安装流程\">apk安装流程<a title=\"#apk安装流程\" href=\"#apk安装流程\"></a></h2>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/85c8ce13fcad\">https://www.jianshu.com/p/85c8ce13fcad</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1199458\">https://cloud.tencent.com/developer/article/1199458</a></li>\n<li><a href=\"https://www.jianshu.com/p/0d5602655689\">https://www.jianshu.com/p/0d5602655689</a></li>\n</ul>\n","prev":{"title":"DO AS ONE WISHES","link":"posts/0"},"next":{"title":"谈谈对Dex文件的认识","link":"posts/1615903557"},"plink":"https://blog.ixin.run/posts/1615946471/","toc":[{"id":"apk是啥玩意儿","title":"apk是啥玩意儿","index":"1"},{"id":"apk包含哪些东西","title":"apk包含哪些东西","index":"2"},{"id":"apk打包流程","title":"apk打包流程","index":"3","children":[{"id":"aapt阶段","title":"aapt阶段","index":"3.1"},{"id":"aidl阶段","title":"aidl阶段","index":"3.2"},{"id":"java-compiler阶段","title":"Java Compiler阶段","index":"3.3"},{"id":"dex阶段","title":"dex阶段","index":"3.4"},{"id":"apkbuilder阶段","title":"apkbuilder阶段","index":"3.5"},{"id":"jarsigner阶段","title":"Jarsigner阶段","index":"3.6"},{"id":"zipalign阶段","title":"zipalign阶段","index":"3.7"},{"id":"整体细节图","title":"整体细节图","index":"3.8"}]},{"id":"apk安装流程","title":"apk安装流程","index":"4"},{"id":"参考","title":"参考","index":"5"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1615946471/\" title=\"浅谈Android编译打包流程\">https://blog.ixin.run/posts/1615946471/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}