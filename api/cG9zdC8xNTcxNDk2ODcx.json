{"title":"Android媒体库你了解多少","date":"2019-10-19T14:15:26.000Z","date_formatted":{"ll":"2019年10月19日","L":"2019/10/19","MM-DD":"10-19"},"link":"post/1571496871","comments":true,"tags":["媒体库"],"categories":["Android"],"updated":"2021-01-14T08:08:54.887Z","content":"<p>Android系统中有一个媒体库，这个大家应该有所了解，平时在开发过程中如果不涉及媒体文件（图片、音频、视频）这块则很少接触到。有些时候我们在本地添加一张图片，但是在相册中却无法搜索到，这里主要原因就是没有通知系统媒体库刷新导致的。本篇我们就探讨下Android上媒体库的这些事。</p>\n<p>为什么通知媒体库后，媒体库里就能找到了呢？兴许你还会遇到一种情况，就是明明相册里可以发现这张图片，可是到图片的具体路径下却找不到这张图片。到此应该会猜测到是不是媒体库和本地相册都持有一份媒体文件信息呢？基本上猜到了八九不离十了，其实媒体库就是一个数据库，专门管理媒体文件的相关信息，例如图片信息，缩略图等。</p>\n<a id=\"more\"></a>\n<h2 id=\"多媒体文件管理\">多媒体文件管理<a title=\"#多媒体文件管理\" href=\"#多媒体文件管理\"></a></h2>\n<p>Android多媒体文件扫描管理简单来说，有以下四部分内容：</p>\n<ul>\n<li>通知：MediaScannerReceiver</li>\n<li>扫描：MediaScannerService</li>\n<li>存储：MediaProvider</li>\n<li>查询：MediaStore</li>\n</ul>\n<h3 id=\"mediascannerreceiver\">MediaScannerReceiver<a title=\"#mediascannerreceiver\" href=\"#mediascannerreceiver\"></a></h3>\n<p>MediaScannerReceiver主要用于接受扫描通知，然后启动MediaScannerService进行扫描操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String action = intent.getAction();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Uri uri = intent.getData();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Intent.ACTION_BOOT_COMPLETED.equals(action)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Scan internal only.</span></span><br><span class=\"line\">        scan(context, MediaProvider.INTERNAL_VOLUME);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Intent.ACTION_LOCALE_CHANGED.equals(action)) &#123;</span><br><span class=\"line\">        scanTranslatable(context);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uri.getScheme().equals(<span class=\"string\">&quot;file&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// handle intents related to external storage</span></span><br><span class=\"line\">            String path = uri.getPath();</span><br><span class=\"line\">            String externalStoragePath = Environment.getExternalStorageDirectory().getPath();</span><br><span class=\"line\">            String legacyPath = Environment.getLegacyExternalStorageDirectory().getPath();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                path = <span class=\"keyword\">new</span> File(path).getCanonicalPath();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                Log.e(TAG, <span class=\"string\">&quot;couldn&#x27;t canonicalize &quot;</span> + path);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (path.startsWith(legacyPath)) &#123;</span><br><span class=\"line\">                path = externalStoragePath + path.substring(legacyPath.length());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">&quot;action: &quot;</span> + action + <span class=\"string\">&quot; path: &quot;</span> + path);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Intent.ACTION_MEDIA_MOUNTED.equals(action)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// scan whenever any volume is mounted</span></span><br><span class=\"line\">                scan(context, MediaProvider.EXTERNAL_VOLUME);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Intent.ACTION_MEDIA_SCANNER_SCAN_FILE.equals(action) &amp;&amp;</span><br><span class=\"line\">                    path != <span class=\"keyword\">null</span> &amp;&amp; path.startsWith(externalStoragePath + <span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">                scanFile(context, path);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    。。。</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scan</span><span class=\"params\">(Context context, String volume)</span> </span>&#123;</span><br><span class=\"line\">    Bundle args = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">    args.putString(<span class=\"string\">&quot;volume&quot;</span>, volume);</span><br><span class=\"line\">    context.startService(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Intent(context, MediaScannerService.class).putExtras(args));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scanFile</span><span class=\"params\">(Context context, String path)</span> </span>&#123;</span><br><span class=\"line\">    Bundle args = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">    args.putString(<span class=\"string\">&quot;filepath&quot;</span>, path);</span><br><span class=\"line\">    context.startService(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Intent(context, MediaScannerService.class).putExtras(args));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scanTranslatable</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Bundle args = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">    args.putBoolean(MediaStore.RETRANSLATE_CALL, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    context.startService(<span class=\"keyword\">new</span> Intent(context, MediaScannerService.class).putExtras(args));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从onReceive方法中可以看出，MediaScannerReceiver执行scan的时机有四种：</p>\n<ol>\n<li>启动完毕，扫描内部存储和外部存储</li>\n<li>本地语言切换</li>\n<li>sdcard挂载完毕，扫描外部存储</li>\n<li>扫描单个文件</li>\n</ol>\n<h3 id=\"mediascannerservice\">MediaScannerService<a title=\"#mediascannerservice\" href=\"#mediascannerservice\"></a></h3>\n<p>MediaScannerService主要负责媒体文件的扫描过程，因此是耗时的，其内部的scan()方法是扫描核心。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scan</span><span class=\"params\">(String[] directories, String volumeName)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        sendBroadcast(<span class=\"keyword\">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_STARTED, uri));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (volumeName.equals(MediaProvider.EXTERNAL_VOLUME)) &#123;</span><br><span class=\"line\">                openDatabase(volumeName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> (MediaScanner scanner = <span class=\"keyword\">new</span> MediaScanner(<span class=\"keyword\">this</span>, volumeName)) &#123;</span><br><span class=\"line\">                scanner.scanDirectories(directories);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            Log.e(TAG, <span class=\"string\">&quot;exception in MediaScanner.scan()&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        sendBroadcast(<span class=\"keyword\">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_FINISHED, uri));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>核心内容也很简单，最终调用MediaScanner的scanDirectories()执行文件扫描。其中MediaScanner是一个专门用于媒体文件扫描的类，其scanDirectories()内部核心就是采用ContentProviderClient来对MediaProvider进行数据的更新或删除操作。</p>\n<h3 id=\"mediaprovider\">MediaProvider<a title=\"#mediaprovider\" href=\"#mediaprovider\"></a></h3>\n<p>我们都知道Android有四大组件，Activity、Service、BroadcastReceiver、ContentProvider。MediaProvider就是Android系统中的一个数据库，类似的还有TelephonyProvider、CalendarProvider、ContactsProvider，这些数据库的源码都在/packages/providers/目录下。</p>\n<p>其中MediaProvider又称多媒体数据库，保存了手机上存储的所有媒体文件的信息。这个数据库存放在/data/data/com.android.providers.media/databases当中，里面有两个数据库：internal.db和external.db，internal.db存放的是系统分区的文件信息，开发者是没法通过接口获得其中的信息的，而external.db存放的则是我们用户能看到的存储区的文件信息，即包含了手机内置存储，还包含了SD卡。</p>\n<h3 id=\"mediastore\">MediaStore<a title=\"#mediastore\" href=\"#mediastore\"></a></h3>\n<p>MediaStore主要用于提供内部或外部存储中所有可用的媒体文件的各种信息，我们后边都需要借助此类来进行媒体库的操作（添加，删除等）。</p>\n<h2 id=\"媒体库信息查询\">媒体库信息查询<a title=\"#媒体库信息查询\" href=\"#媒体库信息查询\"></a></h2>\n<p>上边我们知道MediaStore是专门用于存放多媒体信息的，通过ContentResolver即可对数据库进行操作。</p>\n<p>MediaStore中的资源有四类：</p>\n<ul>\n<li>MediaStore.Files</li>\n<li>MediaStore.Audio</li>\n<li>MediaStore.Images</li>\n<li>MediaStore.Video</li>\n</ul>\n<p>这些内部类中都又包含了Media,Thumbnails和相应的MediaColumns，分别提供了媒体信息，缩略信息和操作字段。</p>\n<h3 id=\"查询\">查询<a title=\"#查询\" href=\"#查询\"></a></h3>\n<p>媒体库是通过ContentResolver来进行查询的，其核心扫描方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"meta\">@Nullable</span> <span class=\"function\">Cursor <span class=\"title\">query</span><span class=\"params\">(<span class=\"meta\">@RequiresPermission</span>.Read </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@NonNull</span> Uri uri, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@Nullable</span> String[] projection, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@Nullable</span> String selection, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@Nullable</span> String[] selectionArgs, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@Nullable</span> String sortOrder</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"meta\">@Nullable</span> CancellationSignal cancellationSignal)</span></span></span><br></pre></td></tr></table></figure>\n<p>开发过程中可能根据不同情况调用此方法的重载方法，下边我们就解析一下这个方法的相关入参。</p>\n<h4 id=\"uri-uri\">Uri uri<a title=\"#uri-uri\" href=\"#uri-uri\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri = MediaStore.Video.Media.INTERNAL_CONTENT_URI;</span><br><span class=\"line\">Uri uri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</span><br></pre></td></tr></table></figure>\n<p>uri表示数据资源路径，总共有两种，分别对应内部存储和外部存储。</p>\n<p>需要注意的是，MediaStore.Files没有EXTERNAL_CONTENT_URI，所以只能用getContentUri()自行获取<code>MediaStore.Images.Files.getContentUri(&quot;external&quot;)</code></p>\n<p>以MediaStore.Images.Media为例，其URI有三种写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri1 = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class=\"line\">Uri uri2 = MediaStore.Images.Media.getContentUri(<span class=\"string\">&quot;external&quot;</span>);</span><br><span class=\"line\">Uri uri3 = Uri.parse(<span class=\"string\">&quot;content://media/external/images/media&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"string[]-projection\">String[] projection<a title=\"#string[]-projection\" href=\"#string[]-projection\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] mediaColumns = &#123;</span><br><span class=\"line\">            MediaStore.Video.Media._ID,</span><br><span class=\"line\">            MediaStore.Video.Media.DATA,</span><br><span class=\"line\">            MediaStore.Video.Media.SIZE,</span><br><span class=\"line\">            MediaStore.Video.Media.DATE_MODIFIED,</span><br><span class=\"line\">            MediaStore.Video.Media.DURATION&#125;;</span><br></pre></td></tr></table></figure>\n<p>用于指定查询后返回给用户的媒体信息，当然你可以理解为对应媒体数据库中相关字段。</p>\n<h4 id=\"string-selection-和-string[]-selectionargs\">String selection 和 String[] selectionArgs<a title=\"#string-selection-和-string[]-selectionargs\" href=\"#string-selection-和-string[]-selectionargs\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String selection = MediaStore.Video.Media.MIME_TYPE + <span class=\"string\">&quot;=? or &quot;</span></span><br><span class=\"line\">            + MediaStore.Video.Media.MIME_TYPE + <span class=\"string\">&quot;=? or &quot;</span></span><br><span class=\"line\">            + MediaStore.Video.Media.MIME_TYPE + <span class=\"string\">&quot;=? or &quot;</span></span><br><span class=\"line\">            + MediaStore.Video.Media.MIME_TYPE + <span class=\"string\">&quot;=? or &quot;</span></span><br><span class=\"line\">            + MediaStore.Video.Media.MIME_TYPE + <span class=\"string\">&quot;=?&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">String[] selectionArgs = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;video/mp4&quot;</span>, <span class=\"string\">&quot;video/avi&quot;</span>, <span class=\"string\">&quot;video/quicktime&quot;</span>, <span class=\"string\">&quot;video/webm&quot;</span>, <span class=\"string\">&quot;video/x-ms-wmv&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>定制化查询条件，这两个必须结合使用，前者表示条件语句，后者表示对应的条件参数。</p>\n<h4 id=\"string-sortorder\">String sortOrder<a title=\"#string-sortorder\" href=\"#string-sortorder\"></a></h4>\n<p>查询的排序方式</p>\n<h4 id=\"cancellationsignal-cancellationsignal\">CancellationSignal cancellationSignal<a title=\"#cancellationsignal-cancellationsignal\" href=\"#cancellationsignal-cancellationsignal\"></a></h4>\n<p>取消正在进行的操作的信号，如果没有则为空。如果操作被取消，那么在执行查询时将抛出<code>OperationCanceledException</code>异常</p>\n<h3 id=\"举栗\">举栗<a title=\"#举栗\" href=\"#举栗\"></a></h3>\n<p>1.利用MediaStore.Files，查询所有类型的文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取所有文件</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;FileEntity&gt; <span class=\"title\">getFilesByType</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;FileEntity&gt; files = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 扫描files文件库</span></span><br><span class=\"line\">    Cursor c = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        mContentResolver = context.getContentResolver();</span><br><span class=\"line\">        c = mContentResolver.query(MediaStore.Files.getContentUri(<span class=\"string\">&quot;external&quot;</span>), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnIndexOrThrow_ID = c.getColumnIndexOrThrow(MediaStore.Files.FileColumns._ID);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnIndexOrThrow_MIME_TYPE = c.getColumnIndexOrThrow(MediaStore.Files.FileColumns.MIME_TYPE);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnIndexOrThrow_DATA = c.getColumnIndexOrThrow(MediaStore.Files.FileColumns.DATA);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnIndexOrThrow_SIZE = c.getColumnIndexOrThrow(MediaStore.Files.FileColumns.SIZE);</span><br><span class=\"line\">        <span class=\"comment\">// 更改时间</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> columnIndexOrThrow_DATE_MODIFIED = c.getColumnIndexOrThrow(MediaStore.Files.FileColumns.DATE_MODIFIED); </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempId = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c.moveToNext()) &#123;</span><br><span class=\"line\">            String path = c.getString(columnIndexOrThrow_DATA);</span><br><span class=\"line\">            String minType = c.getString(columnIndexOrThrow_MIME_TYPE);</span><br><span class=\"line\">            LogUtil.d(<span class=\"string\">&quot;FileManager&quot;</span>, <span class=\"string\">&quot;path:&quot;</span> + path);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> position_do = path.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (position_do == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> position_x = path.lastIndexOf(File.separator);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (position_x == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String displayName = path.substring(position_x + <span class=\"number\">1</span>, path.length());</span><br><span class=\"line\">            <span class=\"keyword\">long</span> size = c.getLong(columnIndexOrThrow_SIZE);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> modified_date = c.getLong(columnIndexOrThrow_DATE_MODIFIED);</span><br><span class=\"line\">            File file = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">            String time = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> Date(file.lastModified()));</span><br><span class=\"line\">            FileEntity info = <span class=\"keyword\">new</span> FileEntity();</span><br><span class=\"line\">            info.setName(displayName);</span><br><span class=\"line\">            info.setPath(path);</span><br><span class=\"line\">            info.setSize(ShowLongFileSzie(size));</span><br><span class=\"line\">            info.setId((tempId++) + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            info.setTime(time);</span><br><span class=\"line\">            files.add(info);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            c.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.指定获取文件字段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] columns = <span class=\"keyword\">new</span> String[]&#123;MediaStore.Files.FileColumns._ID, MediaStore.Files.FileColumns.MIME_TYPE, MediaStore.Files.FileColumns</span><br><span class=\"line\">                .SIZE, MediaStore.Files.FileColumns.DATE_MODIFIED, MediaStore.Files.FileColumns.DATA&#125;;</span><br><span class=\"line\">c = mContentResolver.query(MediaStore.Files.getContentUri(<span class=\"string\">&quot;external&quot;</span>), columns, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>3.根据文件夹的名称查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找文件夹ScreenRecord下的文件</span></span><br><span class=\"line\">c = mContentResolver.query(MediaStore.Files.getContentUri(<span class=\"string\">&quot;external&quot;</span>), <span class=\"keyword\">null</span>, MediaStore.Video.Media.BUCKET_DISPLAY_NAME+<span class=\"string\">&quot;=?&quot;</span>, <span class=\"string\">&quot;ScreenRecord&quot;</span>, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>4.查询指定类型的文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String select = <span class=\"string\">&quot;(&quot;</span> + MediaStore.Files.FileColumns.DATA + <span class=\"string\">&quot; LIKE &#x27;%.doc&#x27;&quot;</span> + <span class=\"string\">&quot; or &quot;</span> + MediaStore.Files.FileColumns.DATA + <span class=\"string\">&quot; LIKE &#x27;%.docx&#x27;&quot;</span> + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">c = mContentResolver.query(MediaStore.Files.getContentUri(<span class=\"string\">&quot;external&quot;</span>), <span class=\"keyword\">null</span>, select , <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>5.指定排序类型，如根据id倒序查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = mContentResolver.query(MediaStore.Files.getContentUri(<span class=\"string\">&quot;external&quot;</span>), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, MediaStore.Files.FileColumns._ID+<span class=\"string\">&quot;DESC&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"刷新媒体库\">刷新媒体库<a title=\"#刷新媒体库\" href=\"#刷新媒体库\"></a></h2>\n<h3 id=\"媒体库刷新方法\">媒体库刷新方法<a title=\"#媒体库刷新方法\" href=\"#媒体库刷新方法\"></a></h3>\n<p>刷新媒体库常用的有如下几种方式：</p>\n<ol>\n<li>通过ContentProvider操作媒体数据库。</li>\n<li>发送广播更新MediaStore。</li>\n<li>通过操作MediaScannerConnection类。</li>\n</ol>\n<h4 id=\"通过contentprovider操作媒体数据库\">通过ContentProvider操作媒体数据库<a title=\"#通过contentprovider操作媒体数据库\" href=\"#通过contentprovider操作媒体数据库\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ContentValues values = <span class=\"keyword\">new</span> ContentValues(<span class=\"number\">4</span>);</span><br><span class=\"line\">values.put(MediaStore.Video.Media.TITLE, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">values.put(MediaStore.Video.Media.MIME_TYPE, minetype);</span><br><span class=\"line\">values.put(MediaStore.Video.Media.DATA, path);</span><br><span class=\"line\">values.put(MediaStore.Video.Media.DURATION, duration_int);</span><br><span class=\"line\">context.getContentResolver().insert(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, values);</span><br></pre></td></tr></table></figure>\n<p>和上边所讲的媒体库信息查询一样，直接对数据库操作。需要注意的是这种方式不能和其他刷新媒体库方式公用，有可能同时存入两张一模一样的文件。</p>\n<h4 id=\"发送广播更新mediastore进行刷新\">发送广播更新MediaStore进行刷新<a title=\"#发送广播更新mediastore进行刷新\" href=\"#发送广播更新mediastore进行刷新\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</span><br><span class=\"line\">intent.setData(Uri.fromFile(<span class=\"keyword\">new</span> File(filePath)));</span><br><span class=\"line\">context.sendBroadcast(intent);</span><br></pre></td></tr></table></figure>\n<p>在Android4.4之前，是可以通过<code>ACTION_MEDIA_MOUNTED</code>广播，来通知系统刷新MediaStore的,4.4后系统封闭这种方式，取而代之的是<code>ACTION_MEDIA_SCANNER_SCAN_FILE</code>，建议单个文件扫描插入。</p>\n<h4 id=\"通过操作mediascannerconnection类进行刷新\">通过操作MediaScannerConnection类进行刷新<a title=\"#通过操作mediascannerconnection类进行刷新\" href=\"#通过操作mediascannerconnection类进行刷新\"></a></h4>\n<p>Android4.0系统API中多了一个更新媒体库的方法——MediaScannerConnection，这也是我们比较推荐的。MediaScannerConnection有一个静态方法scanFile()，可直接操作此方法完成媒体库刷新操作。并且可对其刷新完成后回调更新。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Context context, String[] paths, String[] types)</span> </span>&#123;</span><br><span class=\"line\">    MediaScannerConnection.scanFile(</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            paths,</span><br><span class=\"line\">            types,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> MediaScannerConnection.OnScanCompletedListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScanCompleted</span><span class=\"params\">(String path, Uri uri)</span> </span>&#123;</span><br><span class=\"line\">                    LogUtils.i(TAG, <span class=\"string\">&quot;insert onScanCompleted path &quot;</span> + path + <span class=\"string\">&quot; uri &quot;</span> + uri);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然你也可以实现MediaScannerConnection.MediaScannerConnectionClient来进行扫描，在构造方法中执行connect()，在onScanCompleted()方法中执行disconnect()关闭链接，在onMediaScannerConnected()中执行scanFile()进行扫描。</p>\n<h3 id=\"媒体文件添加后刷新\">媒体文件添加后刷新<a title=\"#媒体文件添加后刷新\" href=\"#媒体文件添加后刷新\"></a></h3>\n<p>通常我们在图片或者音视频添加后，在需要更新的地方执行刷新媒体库操作才能在媒体库中看到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MediaScanner(context, file);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</span><br><span class=\"line\">    intent.setData(Uri.fromFile(file));</span><br><span class=\"line\">    context.sendBroadcast(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"媒体文件删除后刷新\">媒体文件删除后刷新<a title=\"#媒体文件删除后刷新\" href=\"#媒体文件删除后刷新\"></a></h3>\n<p>有时候我们需要删除本地图片同时又希望刷新一下媒体库，让媒体库中去除此图片，以上边刷新媒体库的方式大多都是insert模式，那我们只能直接操作数据库了。需要注意file.delete()后不可立即将file置为null;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">    String filePath = file.getAbsolutePath();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filePath.endsWith(<span class=\"string\">&quot;.mp4&quot;</span>)) &#123;</span><br><span class=\"line\">        context.getContentResolver().delete(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,</span><br><span class=\"line\">                MediaStore.Audio.Media.DATA + <span class=\"string\">&quot;= \\&quot;&quot;</span> + filePath + <span class=\"string\">&quot;\\&quot;&quot;</span>,</span><br><span class=\"line\">                <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (filePath.endsWith(<span class=\"string\">&quot;.jpg&quot;</span>) || filePath.endsWith(<span class=\"string\">&quot;.png&quot;</span>) || filePath.endsWith(<span class=\"string\">&quot;.bmp&quot;</span>)) &#123;</span><br><span class=\"line\">        context.getContentResolver().delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</span><br><span class=\"line\">                MediaStore.Audio.Media.DATA + <span class=\"string\">&quot;= \\&quot;&quot;</span> + filePath + <span class=\"string\">&quot;\\&quot;&quot;</span>,</span><br><span class=\"line\">                <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一个项目中使用的例子：\">一个项目中使用的例子：<a title=\"#一个项目中使用的例子：\" href=\"#一个项目中使用的例子：\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaScanner</span> <span class=\"keyword\">implements</span> <span class=\"title\">MediaScannerConnection</span>.<span class=\"title\">MediaScannerConnectionClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MediaScanner.class.getSimpleName();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 刷新媒体库</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">(Context context, File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span> || file == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果图片不存在，删除媒体库中记录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">            String filePath = file.getAbsolutePath();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filePath.endsWith(<span class=\"string\">&quot;.mp4&quot;</span>)) &#123;</span><br><span class=\"line\">                context.getContentResolver().delete(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,</span><br><span class=\"line\">                        MediaStore.Audio.Media.DATA + <span class=\"string\">&quot;= \\&quot;&quot;</span> + filePath + <span class=\"string\">&quot;\\&quot;&quot;</span>,</span><br><span class=\"line\">                        <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (filePath.endsWith(<span class=\"string\">&quot;.jpg&quot;</span>) || filePath.endsWith(<span class=\"string\">&quot;.png&quot;</span>) || filePath.endsWith(<span class=\"string\">&quot;.bmp&quot;</span>)) &#123;</span><br><span class=\"line\">                context.getContentResolver().delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</span><br><span class=\"line\">                        MediaStore.Audio.Media.DATA + <span class=\"string\">&quot;= \\&quot;&quot;</span> + filePath + <span class=\"string\">&quot;\\&quot;&quot;</span>,</span><br><span class=\"line\">                        <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.0以上的系统使用MediaScanner更新</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> MediaScanner(context, file);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</span><br><span class=\"line\">            intent.setData(Uri.fromFile(file));</span><br><span class=\"line\">            context.sendBroadcast(intent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> File mFile;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MediaScannerConnection mMsc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MediaScanner</span><span class=\"params\">(Context context, File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mFile = file;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mMsc = <span class=\"keyword\">new</span> MediaScannerConnection(context, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mMsc.connect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMediaScannerConnected</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mMsc.scanFile(mFile.getAbsolutePath(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScanCompleted</span><span class=\"params\">(String path, Uri uri)</span> </span>&#123;</span><br><span class=\"line\">        mMsc.disconnect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"刷新过滤\">刷新过滤<a title=\"#刷新过滤\" href=\"#刷新过滤\"></a></h2>\n<p>有时候，我们有一些目录下的媒体文件，并不想让MediaStore扫描到，例如在SDCard上缓存的图片、图标等，这些我们都不想出现在系统相册内。怎么办呢？</p>\n<p>很简单，文件夹中新建一个.nomedia的空文件，会屏蔽掉系统默认的媒体库扫描。带有该文件的文件夹只能通过文件遍历的方式进行扫描。</p>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>以上是有关媒体库开发过程中的知识点，系统媒体库是维护了一个有关媒体文件的数据库，在开发过程中只有在需要相册内的图片或者音视频更新时才需要刷新媒体库，这点个人建议适量使用不可滥用，否则有可能会造成媒体库文件泛滥，或者媒体库中有相应文件的预览，本地却不存在此文件的bug。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://developer.android.com/guide/topics/data/data-storage.html\">https://developer.android.com/guide/topics/data/data-storage.html</a></li>\n<li><a href=\"https://blog.csdn.net/yann02/article/details/92844364\">https://blog.csdn.net/yann02/article/details/92844364</a></li>\n<li><a href=\"https://juejin.im/post/5ae0541df265da0b9d77e45a\">https://juejin.im/post/5ae0541df265da0b9d77e45a</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/46533159\">https://zhuanlan.zhihu.com/p/46533159</a></li>\n<li><a href=\"https://www.bbsmax.com/A/amd0omej5g/\">https://www.bbsmax.com/A/amd0omej5g/</a></li>\n</ul>\n","prev":{"title":"LRU算法基本思路","link":"post/1571663304"},"next":{"title":"Java垃圾回收（三）GC算法","link":"post/1569143270"},"plink":"https://blog.ixin.run/post/1571496871/","toc":[{"id":"多媒体文件管理","title":"多媒体文件管理","index":"1","children":[{"id":"mediascannerreceiver","title":"MediaScannerReceiver","index":"1.1"},{"id":"mediascannerservice","title":"MediaScannerService","index":"1.2"},{"id":"mediaprovider","title":"MediaProvider","index":"1.3"},{"id":"mediastore","title":"MediaStore","index":"1.4"}]},{"id":"媒体库信息查询","title":"媒体库信息查询","index":"2","children":[{"id":"查询","title":"查询","index":"2.1"},{"id":"举栗","title":"举栗","index":"2.2"}]},{"id":"刷新媒体库","title":"刷新媒体库","index":"3","children":[{"id":"媒体库刷新方法","title":"媒体库刷新方法","index":"3.1"},{"id":"媒体文件添加后刷新","title":"媒体文件添加后刷新","index":"3.2"},{"id":"媒体文件删除后刷新","title":"媒体文件删除后刷新","index":"3.3"},{"id":"一个项目中使用的例子：","title":"一个项目中使用的例子：","index":"3.4"}]},{"id":"刷新过滤","title":"刷新过滤","index":"4"},{"id":"总结","title":"总结","index":"5"},{"id":"参考","title":"参考","index":"6"}],"reward":true,"copyright":{"custom":"转载请注明出处，谢谢支持。"}}