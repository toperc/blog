{"title":"Java注解小记","date":"2016-12-16T01:34:42.000Z","date_formatted":{"ll":"2016年12月16日","L":"2016/12/16","MM-DD":"12-16"},"link":"posts/1481852082","comments":true,"categories":["Java"],"updated":"2021-01-29T12:51:44.663Z","content":"<p>谈到注解，java中不可或缺的一章，更是各类框架组成的一部分，给开发者带来了极好的编程体验，代码量少，易阅读，易维护…</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是注解\">什么是注解<a title=\"#什么是注解\" href=\"#什么是注解\"></a></h2>\n<p>Annotation(注解)是JDK5.0及以后版本引入的。它的作用是修饰编程元素。编程元素包括：包、类、构造方法、方法、成员变量等。</p>\n<h2 id=\"注解分类\">注解分类<a title=\"#注解分类\" href=\"#注解分类\"></a></h2>\n<h3 id=\"按运行机制分：\">按运行机制分：<a title=\"#按运行机制分：\" href=\"#按运行机制分：\"></a></h3>\n<ul>\n<li>源码注解： 注解只在源码中存在，编译成class注解就不存在了。</li>\n<li>编译时注解：在源码和.class文件中都存在。 例如JDK中自带的注解。</li>\n<li>运行时注解：只在在运行阶段还会起作用，甚至会影响运行逻辑的注解。</li>\n</ul>\n<h3 id=\"按照注解来源分：\">按照注解来源分：<a title=\"#按照注解来源分：\" href=\"#按照注解来源分：\"></a></h3>\n<ol>\n<li>\n<p>JDK自带的注解:</p>\n<ul>\n<li>@Override，标示方法的重写。</li>\n<li>@Deprecated，标示此方法或者该成员变量已经过时。</li>\n<li>@Suppbisewarnings()，忽略相关警告。</li>\n</ul>\n<p>其中Override、Deprecated属于标识注解，即没有成员的注解，仅用于标识其存在的作用。</p>\n<p><strong>PS:</strong><br>\n针对java中的@Override注解，有些时候我们发现其实不写也是可以的，那么这有什么区别呢？一般来说，写与不写没什么区别，JVM可以自识别。</p>\n<p>写的情况下，即说明子类要覆盖基类的方法，基类必须存在方法（控制类型public，protected，返回值，参数列表类型与子类方法完成一致的方法），否则会报错（找不到被Override的方法）。在不写@Override注解的情况下，当基类存在与子类各种条件都符合的方法是即实现覆盖；如果条件不符合时，则是当成新定义的方法使用。</p>\n<p>所以如果想覆盖基类方法时，最好还是写上@Override注解，这样有利于编译器帮助检查错误 。</p>\n<p>SuppressWarnings注解的常见参数值的简单说明：</p>\n<ul>\n<li>deprecation：使用了不赞成使用的类或方法时的警告；</li>\n<li>unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型;</li>\n<li>fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;</li>\n<li>path：在类路径、源文件路径等中有不存在的路径时的警告;</li>\n<li>serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告;</li>\n<li>finally：任何 finally 子句不能正常完成时的警告;</li>\n<li>all：关于以上所有情况的警告。</li>\n</ul>\n</li>\n<li>\n<p>来自第三方的注解:</p>\n<ul>\n<li>Spring中包括@Autowired、@Service、@Repository</li>\n<li>Mybatis中包括@InsertProvider、@UpdateProvider、@Options</li>\n</ul>\n</li>\n<li>\n<p>我们自定义的注解，包括元注解。</p>\n</li>\n</ol>\n<h2 id=\"自定义注解\">自定义注解<a title=\"#自定义注解\" href=\"#自定义注解\"></a></h2>\n<p>注意以下几点：</p>\n<ul>\n<li>使用@interface关键字定义注解</li>\n<li>成员以无参无异常方式声明。</li>\n<li>可以用default为成员指定一个默认值。</li>\n<li>成员类型是受限制的，合法的类型包括常规的基本类型以及String，Class、Annotation、enum和前边所有类型的数组。</li>\n<li>如果注解只有一个成员，则成员名必须为value(),在使用时可以忽略成员名和赋值号（=）。</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123; ElementType.TYPE &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FruitName &#123;</span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FrultName(&quot;apple&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"什么是元注解\">什么是元注解<a title=\"#什么是元注解\" href=\"#什么是元注解\"></a></h2>\n<p>元注解：给注解进行注解。</p>\n<ul>\n<li>@Target({ElementType.METHOD,ElementType.Type})描述的是作用域，作用范围包括如下：<br>\nCONSTRUCTOR（构造方法声明）、FIELD(字段声明)、LOCAL_VARIABLE(局部变量声明)、METHOD(方法声明)、PACKAGE(包声明)、PARAMETER(参数声明)、TYPE(类、接口声明)。</li>\n<li>@Retention(RetentionPolicy.RUNTIME)描述的是生命周期，类型如下：<br>\nSOURCE(只在源码显示，编译时会丢弃)、CLASS(编译时会记录到ClASS中，运行时忽略)、RUNTIME(运行时存在，可以通过反射读取)。</li>\n<li>@Inherited允许子类继承。注意继承只会使类上的注解起作用，对于方法的继承注解是不起作用的。</li>\n<li>@Documented生成javaDoc会生成注解信息。</li>\n</ul>\n<h2 id=\"解析注解\">解析注解<a title=\"#解析注解\" href=\"#解析注解\"></a></h2>\n<p>在自定义注解的时候我们给注解附上必要的值，解析注解是通过反射来获取类、函数或成员上运行时注解信息，以便于相关方法的调用或使用，从而实现动态控制程序运行的逻辑。</p>\n<h2 id=\"完整栗子\">完整栗子<a title=\"#完整栗子\" href=\"#完整栗子\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 水果颜色注解</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD,ElementType.FIELD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FruitColor &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 颜色枚举</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Color</span></span>&#123; BULE,RED,GREEN&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 颜色属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Color <span class=\"title\">fruitColor</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Color.GREEN</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 水果名字注解</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123; ElementType.TYPE &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FruitName &#123;</span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注解调用类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> </span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@FruitName(&quot;apple&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@FruitColor(fruitColor = FruitColor.Color.RED)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String appleColor;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAppleColor</span><span class=\"params\">(String appleColor)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.appleColor = appleColor;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAppleColor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> appleColor;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; c = Class.forName(<span class=\"string\">&quot;Apple&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 判断类上面是否存在注解</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> isExist = c.isAnnotationPresent(FruitName.class);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isExist) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 拿到注解实例</span></span><br><span class=\"line\">\t\t\t\tFruitName fruitName = c.getAnnotation(FruitName.class);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;水果的名字：&quot;</span> + fruitName.value());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 仅获取本类的全部属性</span></span><br><span class=\"line\">\t\t\tField[] field = c.getDeclaredFields();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Field f : field) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">boolean</span> isFExist = f.isAnnotationPresent(FruitColor.class);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (isFExist) &#123;</span><br><span class=\"line\">\t\t\t\t\tFruitColor fruitColor = f.getAnnotation(FruitColor.class);</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">&quot;水果的颜色：&quot;</span>+fruitColor.fruitColor().toString());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">水果的名字：apple</span><br><span class=\"line\">水果的颜色：RED</span><br></pre></td></tr></table></figure>","prev":{"title":"Android架构MVC、MVP和MVVM的区别","link":"posts/1488281963"},"next":{"title":"Java中对==、equals()、hashcode()三者的理解","link":"posts/1481187426"},"plink":"https://blog.ixin.run/posts/1481852082/","toc":[{"id":"什么是注解","title":"什么是注解","index":"1"},{"id":"注解分类","title":"注解分类","index":"2","children":[{"id":"按运行机制分：","title":"按运行机制分：","index":"2.1"},{"id":"按照注解来源分：","title":"按照注解来源分：","index":"2.2"}]},{"id":"自定义注解","title":"自定义注解","index":"3"},{"id":"什么是元注解","title":"什么是元注解","index":"4"},{"id":"解析注解","title":"解析注解","index":"5"},{"id":"完整栗子","title":"完整栗子","index":"6"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1481852082/\" title=\"Java注解小记\">https://blog.ixin.run/posts/1481852082/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}