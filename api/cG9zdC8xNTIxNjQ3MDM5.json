{"title":"Android多CPU适配总结","date":"2018-03-21T15:43:59.000Z","date_formatted":{"ll":"2018年3月21日","L":"2018/03/21","MM-DD":"03-21"},"link":"post/1521647039","comments":true,"categories":["Android"],"updated":"2021-01-14T08:08:54.887Z","content":"<p>这两天准备重构一个好几年的老项目，项目中使用了NDK，但是莫名的报ABI的错误，最终找出问题是项目中.so文件放的位置不对。ABI的概念之前也了解过，今天总结一下。</p>\n<a id=\"more\"></a>\n<h2 id=\"理解几个概念\">理解几个概念<a title=\"#理解几个概念\" href=\"#理解几个概念\"></a></h2>\n<ul>\n<li>NDK<br>\n即Native Development Kit，原生开发工具集，因此又被Google称为“NDK”，Android开发中NDK允许用户使用类似C / C++之类的原生代码语言执行部分程序。好处是方便调用第三方C/C++开源库，也方便代码的移植。</li>\n<li>JNI<br>\n即Java Native Interface，从字面意思知道充当一个接口的角色，它提供了若干的API实现了Java和其他语言的通信（主要是C&amp;C++）。</li>\n<li>ABI<br>\n即Application Binary Interface，应用程序二进制接口。不同的Android 手机有不同的CPU，进而支持不同的指令集，CPU和指令集的每一种组合有它自己的ABI（应用二进制文件），属于“运行时，应用的机器码和系统的交互方式”。</li>\n<li>API<br>\n即Application Programming Interface，应用程序编程接口。面向的是与源代码层面或者库函数层面的交互方式，发生在编译期。</li>\n</ul>\n<p>API和ABI的一个重要的区别就是前者是面向的是源代码，后者站在源代码的角度面向的是驱动不同的cpu架构或者不同的内存分配方式（系统不同或者语言不同有可能内存分配方式也不同）的二进制文件。所以说一套源码下来API相同ABI却很可能不同，后者兼容程度要更为严格。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/A44E1CFB4B3249FB8A1C87CB2ECBBA14?method=download&amp;shareKey=e1479723fb2736cb27374bab84dcd797\" alt=\"API&amp;JNI&amp;ABI联系图\"></p>\n<h2 id=\"android支持的cpu架构（abi）\">Android支持的CPU架构（ABI）<a title=\"#android支持的cpu架构（abi）\" href=\"#android支持的cpu架构（abi）\"></a></h2>\n<ul>\n<li>armeabi<br>\n基于 ARM* v5TE 设备的库，使用软件浮点运算，兼容所有ARM设备，通用性强，速度慢。</li>\n<li>armeabi-v7a<br>\n基于 ARM* v7 设备的库，使用硬件浮点运算，具有高级扩展功能（2010年）。</li>\n<li>arm64-v8<br>\n面向第8代、64位ARM处理器的库。</li>\n<li>x86<br>\n面向32位intel处理器（2011年）。（台式机和平板用的较多）</li>\n<li>x86_64<br>\n面向64位intel处理器（2014年）。</li>\n<li>mips<br>\n面向mips架构的处理器。（早期索尼的游戏机，相比intel，其指令系统计算结构更精简）</li>\n<li>mips64<br>\n面向64位mips架构的处理器。</li>\n</ul>\n<h2 id=\"androidstudio中使用.so库\">AndroidStudio中使用.so库<a title=\"#androidstudio中使用.so库\" href=\"#androidstudio中使用.so库\"></a></h2>\n<p>两种形式配置：<br>\n1.和eclipse中工程项目一样，在libs目录下新建armeabi等目录的方式，这种方式不是Androidstudio默认支持的，因此要在gradle中添加指定加载.so库的目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sourceSets &#123;</span><br><span class=\"line\">    main &#123;</span><br><span class=\"line\">        jniLibs.srcDirs &#x3D; [&#39;libs&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.采用AndroidStudio默认的形式，直接在src/main/下新建jniLibs目录，将armeabi等目录放到该目录下即可。另外同级目录下仍可新建jni目录NDK开发用于放置cpp或c文件，即jni和jniLibs可同级存在。</p>\n<h2 id=\"安装时兼容性检查\">安装时兼容性检查<a title=\"#安装时兼容性检查\" href=\"#安装时兼容性检查\"></a></h2>\n<p>安装到系统中后，so文件会被提取在：data/app/com.xxxxxxxx.app-x/lib/目录下（5.0版本）、/data/app-lib/目录下（4.2版本），其中armeabi和armeabi-v7a会生成arm目录，arm64-v8a会生成arm64目录。</p>\n<p>安装app的时候，如果app使用了so文件，而不存在适合本机cpu架构的so文件，则会报错。例如：在x86模拟器上就必须有x86版本的so文件夹。不然无法安装成功。</p>\n<h2 id=\"运行时兼容性检查\">运行时兼容性检查<a title=\"#运行时兼容性检查\" href=\"#运行时兼容性检查\"></a></h2>\n<p>1.检查目标目录下是否存在的so库文件。有些时候由于项目中不同ABI文件夹下的.so文件个数不一致，加载后造成某些CPU架构无法正常在提取的目录下读取到相应的.so文件。<br>\n2.检查存在的so文件是否符合当前cpu架构。某些ABI文件夹的.so不符合。</p>\n<h2 id=\"加载.so文件规则\">加载.so文件规则<a title=\"#加载.so文件规则\" href=\"#加载.so文件规则\"></a></h2>\n<p>当项目中只提供了armeabi目录时，armeabi-v7a、arm64-v8a架构的程序会去armeabi里寻找，当项目中同时也提供了armeabi-v7a、armeabi-v8a目录，系统就不会再去armeabi里面寻找了，如果在这两个目录中找不到则直接报错。</p>\n<h2 id=\"常见问题\">常见问题<a title=\"#常见问题\" href=\"#常见问题\"></a></h2>\n<ul>\n<li>ABI目录中虽然放置的.so文件一样，但某些目录下放置却不是最优的.so文件，或者从低版本架构拷贝的。</li>\n<li>使用Android高版本平台版本编译的.so文件运行在低版本的设备上。</li>\n<li>没有为每个支持的CPU架构提供对应的.so文件。</li>\n<li>将.so文件放在错误的地方。</li>\n<li>只提供armeabi架构的.so文件而忽略其他ABIs的。</li>\n</ul>\n<p>以上这些问题要么导致报错，要么导致性能低下，即使能运行但在某些老旧的设备上也可能发生错误。</p>\n<h2 id=\"建议\">建议<a title=\"#建议\" href=\"#建议\"></a></h2>\n<p>这里根据上边的问题在开发的过程中提几条建议：</p>\n<ul>\n<li>如果应用程序想安装范围广一些，那么尽可能包含所有的ABI，当然这会导致安装包很大。</li>\n<li>如果考虑到应用的安装范围，比如针对更多的是手机，则可适配armeabi、armeabi-v7、arm64-v8。</li>\n<li>如果考虑到安装包的大小，而不太注重CPU性能，可能面对的都是市面上的新机，可仅仅适配armeabi。</li>\n<li>如果针对多个ABI，则每个ABI目录下的.so文件都是一样的，最好都是针对该ABI的。</li>\n<li><strong>Native Libs Monitor</strong>这个应用可以帮助我们理解手机上安装的APK用到了哪些.so文件，以及.so文件来源于哪些函数库或者框架。</li>\n<li>某些时候引用多个第三方库，可能libs文件夹和jniLibs文件夹都放的有，此时会造成冲突，所以尽可能的都放在一个地方。</li>\n<li>某些时候虽然项目中仅有某个abi文件夹，但是项目依赖有第三方库，而项目中没有进行过滤，则有可能会报某个abi下没有相应的库文件错误。</li>\n</ul>\n<p>上边选择性的适配ABI可在Gradle中配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ndk &#123;</span><br><span class=\"line\">    <span class=\"comment\">//选择要添加的对应cpu类型的.so库。</span></span><br><span class=\"line\">    abiFilters <span class=\"string\">&#x27;armeabi&#x27;</span>, <span class=\"string\">&#x27;armeabi-v7a&#x27;</span>, <span class=\"string\">&#x27;arm64-v8a&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// 还可以添加 &#x27;x86&#x27;, &#x27;x86_64&#x27;, &#x27;mips&#x27;, &#x27;mips64&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：ndk.abiFilters指定的abi平台的库文件夹及库文件，要么都存在，要么都不存在。</p>\n<p>如果项目还支持ndk开发，可在gradle.properties文件里加入：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android.useDeprecatedNdk=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>注意：NDK是向后兼容的，所以尽可能采用低版本的构建工具进行构建。</p>\n<p><strong>Tap:</strong></p>\n<ol>\n<li>\n<p>踩过的坑：之前有个项目仅支持armeabi和armeabi-v7a的cpu架构，但是在调试过程中总是报错：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.UnsatisfiedLinkError: dalvik.system.PathClassLoader[DexPathList[[zip file &quot;&#x2F;data&#x2F;app&#x2F;idonic.mobileapp.xxx-1&#x2F;base.apk&quot;],nativeLibraryDirectories&#x3D;[&#x2F;data&#x2F;app&#x2F;idonic.mobileapp.xxx-1&#x2F;lib&#x2F;arm, &#x2F;data&#x2F;app&#x2F;idonic.mobileapp.xxx-1&#x2F;base.apk!&#x2F;lib&#x2F;armeabi-v7a, &#x2F;vendor&#x2F;lib, &#x2F;system&#x2F;lib]]] couldn&#39;t find &quot;libxxx.so&quot;</span><br></pre></td></tr></table></figure>\n<p>自己项目中也只有armeabi库文件夹，根据上边的规则，即使没有armeabi-v7a文件夹运行时也最终会到armeabi文件夹中寻找，不应该啊，后来冥思苦想只有一种可能，就是项目构建后肯定有armeabi-v7a文件夹的存在，立刻解压缩apk果真是这个问题，原来项目中依赖有腾讯的Bugly,构建打包后会释放出armeabi-v7a的文件夹，但是里面只有libBugly.so文件。</p>\n<p>解决这个问题有三点注意：</p>\n<ol>\n<li>不要只看项目表面的结构，隐藏的依赖有可能是最大的元凶。</li>\n<li>一定要设置abi过滤器。</li>\n<li>把对应的abi库文件补全。</li>\n</ol>\n</li>\n<li>\n<p>有些时候我们运行安装在模拟器上的时候报“Failure [INSTALL_FAILED_NO_MATCHING_ABIS: Failed to extract native libraries, res=-113]”</p>\n<p>具体错误原因：由于使用了native libraries 。该native libraries 不支持当前的cpu的体系结构。</p>\n<blockquote>\n<p>INSTALL_FAILED_NO_MATCHING_ABIS is when you are trying to install an app that has native libraries and it doesn’t have a native library for your cpu architecture. For example if you compiled an app for armv7 and are trying to install it on an emulator that uses the Intel architecture instead it will not work.</p>\n</blockquote>\n<p>简单点说，虽然工程支持运行在某abi架构（例如模拟器x86架构）机器上，但是工程所包含的库却没有该abi架构所支持的库，导致无法安装运行，这在上面阐述很清楚。</p>\n<p>解决这个问题有两种方式：<br>\na.将x86的库文件夹及文件补全。<br>\nb.移除ndk.abiFilters，采用abi分包，构建apk时单独分离出支持x86架构的apk。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">splits &#123;</span><br><span class=\"line\">  abi &#123;</span><br><span class=\"line\">    enable true</span><br><span class=\"line\">    reset()</span><br><span class=\"line\">    include &#39;x86&#39;</span><br><span class=\"line\">    universalApk true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>提到上边构建apk分包，有多种分包形式，可以按照abi支持进行分，也可以按照屏幕密度支持进行分：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">splits &#123;</span><br><span class=\"line\">  density &#123;</span><br><span class=\"line\">    enable true</span><br><span class=\"line\">    reset()</span><br><span class=\"line\">    include &quot;mdpi&quot;, &quot;hdpi&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  abi &#123;</span><br><span class=\"line\">    enable true</span><br><span class=\"line\">    reset()</span><br><span class=\"line\">    include &quot;x86&quot;, &quot;x86_64&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>点击菜单<strong>Build &gt; Build APK</strong>，然后在工程中build &gt; outputs &gt; apk下可获取到多种形式的apk。具体详细使用可参考官方文档：<a href=\"https://developer.android.com/studio/build/configure-apk-splits\">https://developer.android.com/studio/build/configure-apk-splits</a></p>\n</li>\n</ol>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/23102158\">https://zhuanlan.zhihu.com/p/23102158</a></li>\n<li><a href=\"https://developer.android.com/studio/build/configure-apk-splits\">https://developer.android.com/studio/build/configure-apk-splits</a></li>\n</ul>\n","prev":{"title":"AndroidStudio配置Terminal窗口及相关命令归总","link":"post/1521735946"},"next":{"title":"Java泛型的认识和理解","link":"post/1521043691"},"plink":"https://blog.ixin.run/post/1521647039/","toc":[{"id":"理解几个概念","title":"理解几个概念","index":"1"},{"id":"android支持的cpu架构（abi）","title":"Android支持的CPU架构（ABI）","index":"2"},{"id":"androidstudio中使用.so库","title":"AndroidStudio中使用.so库","index":"3"},{"id":"安装时兼容性检查","title":"安装时兼容性检查","index":"4"},{"id":"运行时兼容性检查","title":"运行时兼容性检查","index":"5"},{"id":"加载.so文件规则","title":"加载.so文件规则","index":"6"},{"id":"常见问题","title":"常见问题","index":"7"},{"id":"建议","title":"建议","index":"8"},{"id":"参考","title":"参考","index":"9"}],"reward":true,"copyright":{"custom":"转载请注明出处，谢谢支持。"}}