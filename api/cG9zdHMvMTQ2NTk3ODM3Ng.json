{"title":"JAVA设计模式之代理模式","date":"2016-06-15T08:12:56.000Z","date_formatted":{"ll":"2016年6月15日","L":"2016/06/15","MM-DD":"06-15"},"link":"posts/1465978376","comments":true,"tags":["设计模式"],"categories":["Java"],"updated":"2021-01-29T12:51:44.656Z","content":"<p>说起Java代理模式，不明其理可能一头雾水，明白了也就很简单了。举一个生活中最典型的例子：律师代替原告打官司，来看一下过程：</p>\n<ol>\n<li>原告准备做哪些事：原告可以提供很多材料给律师，目的是打官司赢地皮。</li>\n<li>律师二次包装：律师利用自身丰厚的经验根据这些材料帮着打。</li>\n<li>原告有信息不愿透漏：律师只能根据原告提供的信息进行辩论，原告也许有暗黑的一面，不愿意让律师说出来。</li>\n</ol>\n<p>最终结果：律师能否打赢，注重看律师的水平，当然离不开原告所提供资料的充分和真实。</p>\n<a id=\"more\"></a>\n<h2 id=\"代理模式定义\">代理模式定义<a title=\"#代理模式定义\" href=\"#代理模式定义\"></a></h2>\n<p>代理模式(Proxy Pattern)：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。</p>\n<p>在某些情况下，一个客户不想或者不能直接引用一个对 象，此时可以通过一个称之为“代理”的第三者来实现 间接引用。代理对象可以在客户端和目标对象之间起到 中介的作用，并且可以通过代理对象去掉客户不能看到 的内容和服务或者添加客户需要的额外服务。</p>\n<p>移动端开发的时候最常见的一种代理形式就是远程加载图片，可以先加载一个小图，根据用户意愿如果用户愿意加载原图再开启线程进行加载大图，这里的小图就是代理者。</p>\n<h2 id=\"代理模式结构\">代理模式结构<a title=\"#代理模式结构\" href=\"#代理模式结构\"></a></h2>\n<p>按照代理模式定义只需要两个角色即可，一个是的源对象，另一个是代理者。但是通常代理者需要代替源对象做一些事情，所以我们需要把这部分共有的功能给抽象出来，这样还有一个好处就是可以很好地隐藏和保护被代理者。结构如图：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/A32B7A121467469097EDBD9CCE1D2948?method=download&amp;shareKey=dfd460b1612c73c4d2318fe4ac3df958\" alt=\"这里写图片描述\"></p>\n<h2 id=\"代理模式的使用环境\">代理模式的使用环境<a title=\"#代理模式的使用环境\" href=\"#代理模式的使用环境\"></a></h2>\n<ul>\n<li><strong>远程(Remote)代理</strong>：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又叫做大使(Ambassador)。</li>\n<li><strong>虚拟(Virtual)代理</strong>：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。</li>\n<li><strong>Copy-on-Write代理</strong>：它是虚拟代理的一种，把复制（克隆）操作延迟到只有在客户端真正需要时才执行。一般来说，对象的深克隆是一个开销较大的操作，Copy-on-Write代理可以让这个操作延迟，只有对象被用到的时候才被克隆。</li>\n<li><strong>保护(Protect or Access)代理</strong>：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li>\n<li><strong>缓冲(Cache)代理</strong>：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li>\n<li><strong>防火墙(Firewall)代理</strong>：保护目标不让恶意用户接近。</li>\n<li><strong>同步化(Synchronization)代理</strong>：使几个用户能够同时使用一个对象而没有冲突。</li>\n<li><strong>智能引用(Smart Reference)代理</strong>：当一个对象被引用时，提供一些额外的操作，如将此对象被调用的次数记录下来等。</li>\n</ul>\n<h2 id=\"静态代理和动态代理\">静态代理和动态代理<a title=\"#静态代理和动态代理\" href=\"#静态代理和动态代理\"></a></h2>\n<p>按照代理类生成的时间我们可以将代理模式分为静态代理和动态代理。</p>\n<p>静态代理，就是程序员事先已经将代理类实现并编译，然后在主程序运行时直接调用即可。</p>\n<p>动态代理，代理类字节码在程序运行期间由jvm根据反射机制动态生成，代理者和被代理者的关系是在程序运行中确定的。</p>\n<h3 id=\"静态代理的两种实现：\">静态代理的两种实现：<a title=\"#静态代理的两种实现：\" href=\"#静态代理的两种实现：\"></a></h3>\n<p>1.静态代理的采用继承方式的实现过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被代理者和代理者所需要实现的接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISay</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被代理者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISay</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;名字叫&quot;</span> + name + <span class=\"string\">&quot;,年龄&quot;</span> + age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyPerson</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 重写父类的方法</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;代理人说出了这个人的信息：&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.say(name, age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tISay proxyPerson = <span class=\"keyword\">new</span> ProxyPerson();</span><br><span class=\"line\">\t\tproxyPerson.say(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上边只是一个代理对象，假如有多个代理对象并且有一个先后运行的顺序，那么采用继承的方式将显的有点笨拙了。静态代理可以看做是一个嵌套运行对象方法的模式，知道了这一点，我们还可以采用聚合的方式去写，这样会显的相对灵活些。</p>\n<p>2.静态代理的采用聚合方式的实现过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被代理者和代理者所需要实现的接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISay</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被代理者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISay</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;名字叫&quot;</span> + name + <span class=\"string\">&quot;,年龄&quot;</span> + age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyPerson</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISay</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Person person;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyPerson</span><span class=\"params\">(Person person)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.person = person;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;代理人说出了这个人的信息：&quot;</span>);</span><br><span class=\"line\">\t\tperson.say(name, age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tISay proxyPerson = <span class=\"keyword\">new</span> ProxyPerson(<span class=\"keyword\">new</span> Person());</span><br><span class=\"line\">\t\tproxyPerson.say(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态代理的优缺点：\">静态代理的优缺点：<a title=\"#静态代理的优缺点：\" href=\"#静态代理的优缺点：\"></a></h3>\n<p>优点：层次分明，如果需要增加更多的代理功能只需要关注代理类即可，另外在程序运行时要先进行编译，保证程序的准确性。</p>\n<p>缺点：</p>\n<ol>\n<li>代理对象的一个接口只服务于一种类型的对象，如果要代理的对象很多，势必要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了。</li>\n<li>如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</li>\n</ol>\n<h3 id=\"动态代理实现过程：\">动态代理实现过程：<a title=\"#动态代理实现过程：\" href=\"#动态代理实现过程：\"></a></h3>\n<p>动态代理似乎正是为了上边静态代理那两大缺点做准备的。动态代理的将代理类中的所有的代理方法全部封装到一个方法中，处理起来更加便捷。另外在某种情况下更是减少部分代理类的代码的编写。</p>\n<p>动态代理实现过程主要分三步：</p>\n<ol>\n<li>实现InvocationHandler接口创建处理器类，并在其内部重写invoke()方法，将来所有的要代理的方法都要在此方法中进行调用。</li>\n<li>获取被代理者的实例。</li>\n<li>拿到被代理者的方法对象调用代理方法。</li>\n</ol>\n<p>动态代理的代码实现过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.InvocationHandler;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 被代理者和代理者所需要实现的接口</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">interface ISay &#123;</span><br><span class=\"line\">    void say(String name,int age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 被代理者</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">class Person implements ISay &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void say(String name, int age) &#123;</span><br><span class=\"line\">        System.out.println(&quot;名字叫&quot; + name + &quot;,年龄&quot; + age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 控制动态代理的处理器</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object object &#x3D; null;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * 获取代理者</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public Object bind(Object object) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;得到被代理者实例</span><br><span class=\"line\">        this.object &#x3D; object;</span><br><span class=\"line\">        &#x2F;&#x2F;根据被代理者返回动态代理类实例，第一个参数是指定类加载器，第二个参数是指定代理类需要实现的一系列接口，第三个参数是控制动态代理的处理器本身实例</span><br><span class=\"line\">        return Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(),this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     *代理者需要实现的代理方法 </span><br><span class=\"line\">     *参数一：代理者实例（上边bind方法返回的）；</span><br><span class=\"line\">     *参数二：被代理者调用的方法对象</span><br><span class=\"line\">     *参数三：被代理者传入的相关参数</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object proxy, Method method, Object[] args)</span><br><span class=\"line\">            throws Throwable &#123;</span><br><span class=\"line\">        System.out.println(&quot;代理人说出了这个人的信息：&quot;);</span><br><span class=\"line\">        method.invoke(this.object, args);</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        MyInvocationHandler invocationHandler &#x3D; new MyInvocationHandler(); </span><br><span class=\"line\">        ISay proxyPerson&#x3D; (ISay) invocationHandler.bind(new Person());</span><br><span class=\"line\">        proxyPerson.say(&quot;张三&quot;, 18);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态代理代理者对象生成分析\">动态代理代理者对象生成分析<a title=\"#动态代理代理者对象生成分析\" href=\"#动态代理代理者对象生成分析\"></a></h3>\n<p>看到上面代码有同学可能会问，那动态代理的代理者对象是如何生成的呢？我们不妨逆势而上而观之，先从传入参数下手，依次向上推。从底层得知其实获取代理者对象也就四步：</p>\n<p>第一步：实现InvocationHandler接口创建自己的调用处理器，将来作为代理者有参构造器的一个参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InvocationHandler h = <span class=\"keyword\">new</span> InvocationHandler();</span><br></pre></td></tr></table></figure>\n<p>第二步：根据被代理者classload()和相关代理接口获取代理者Class类实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; cl = getProxyClass0(loader, interfaces);</span><br></pre></td></tr></table></figure>\n<p>第三步：根据第二步拿到的代理者实例对象获取代理者内部构造函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br></pre></td></tr></table></figure>\n<p>第四步：根据代理者内部构造函数最终拿到代理者对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cons.newInstance(<span class=\"keyword\">new</span> Object[] &#123;h&#125; );</span><br></pre></td></tr></table></figure>\n<p>最终得到代理者对象其实就是这一句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object object = Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(),<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>以上就是我对代理模式的认识，代理模式的优点就是能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。当然缺点也是存在的，由于在客户端和真实主角之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，并且实现代理模式更多的是需要额外的工作，这种情况下有些代理模式的实现却显得非常复杂了。</p>\n","prev":{"title":"Android开发Handler消息机制探究","link":"posts/1469605305"},"next":{"title":"Android开发之单元测试初探","link":"posts/1465713367"},"plink":"https://blog.ixin.run/posts/1465978376/","toc":[{"id":"代理模式定义","title":"代理模式定义","index":"1"},{"id":"代理模式结构","title":"代理模式结构","index":"2"},{"id":"代理模式的使用环境","title":"代理模式的使用环境","index":"3"},{"id":"静态代理和动态代理","title":"静态代理和动态代理","index":"4","children":[{"id":"静态代理的两种实现：","title":"静态代理的两种实现：","index":"4.1"},{"id":"静态代理的优缺点：","title":"静态代理的优缺点：","index":"4.2"},{"id":"动态代理实现过程：","title":"动态代理实现过程：","index":"4.3"},{"id":"动态代理代理者对象生成分析","title":"动态代理代理者对象生成分析","index":"4.4"}]},{"id":"总结","title":"总结","index":"5"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1465978376/\" title=\"JAVA设计模式之代理模式\">https://blog.ixin.run/posts/1465978376/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}