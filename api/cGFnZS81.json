{"per_page":10,"total":12,"current":5,"data":[{"title":"View手势GestureDetector使用","date":"2020-03-21T15:06:05.000Z","date_formatted":{"ll":"2020年3月21日","L":"2020/03/21","MM-DD":"03-21"},"excerpt":"<p>开发同学都知道自定义view的时候可以重写onTouch()方法，进而扩展按下、移动、松开这三个函数，这也是常用的形式。但是这个方法太过简单，如果需要处理一些复杂的手势，用这个接口就会很麻烦。Android其实有一个手势库——GestureDetector，已经为我们封装了一些常用的手势方法，接下来就总结一下GestureDetector的使用和总结。</p>","link":"posts/1584803165","tags":["View"],"categories":["Android"]},{"title":"健康小记","date":"2020-03-21T10:45:34.000Z","date_formatted":{"ll":"2020年3月21日","L":"2020/03/21","MM-DD":"03-21"},"thumbnail":"https://tse2-mm.cn.bing.net/th/id/OIP.HEHLhOkAp4E1FiGupZBajQHaDh?pid=Api&rs=1","excerpt":"<p>父亲爱饮酒，爱熬夜，前段时间进了ICU，一时间颇为伤心。人在江湖，面向生活和工作，迫不得已，但也要时刻注意自己的身体。身体是你最大的资本和银行卡，时刻要把握一个度，不可本末倒置。</p>","link":"posts/1584787534","tags":["健康"],"categories":["生活"]},{"title":"Edittext的自动填充引起的Bug","date":"2020-03-07T15:11:30.000Z","date_formatted":{"ll":"2020年3月7日","L":"2020/03/07","MM-DD":"03-07"},"excerpt":"<p>最近发现线上有一个bug：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at com.android.internal.util.SyncResultReceiver.waitResult(SyncResultReceiver.java:<span class=\"number\">60</span>)</span><br><span class=\"line\">at com.android.internal.util.SyncResultReceiver.getIntResult(SyncResultReceiver.java:<span class=\"number\">68</span>)</span><br><span class=\"line\">at android.view.autofill.AutofillManager.ensureServiceClientAddedIfNeededLocked(AutofillManager.java:<span class=\"number\">1847</span>)</span><br><span class=\"line\">at android.view.autofill.AutofillManager.notifyViewEnteredLocked(AutofillManager.java:<span class=\"number\">966</span>)</span><br><span class=\"line\">at android.view.autofill.AutofillManager.notifyViewEntered(AutofillManager.java:<span class=\"number\">950</span>)</span><br><span class=\"line\">at android.view.autofill.AutofillManager.notifyViewEntered(AutofillManager.java:<span class=\"number\">901</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>并且只出现在Android10上，经查询原来是Edittext默认开启自动填充功能引起的，本片就简单了解一下自动Edittext自动填充功能，以及相应bug的解决方式。</p>","link":"posts/1583593890","tags":["Android","Bug","自动填充"],"categories":["Android"]},{"title":"记一次BuildConfig.DEBUG不准确导致的Bug","date":"2019-12-11T15:21:16.000Z","date_formatted":{"ll":"2019年12月11日","L":"2019/12/11","MM-DD":"12-11"},"excerpt":"<p>Android开发过程中通常我们区分debug和release的相关配置都会采用<code>BuildConfig.DEBUG</code>来进行判断，殊不知这个东西弄不好却是一个坑，刚好在最近的开发过程中遇到。</p>","link":"posts/1576077775","categories":["Android"]},{"title":"Android开发混淆的那些事","date":"2019-12-11T14:57:42.000Z","date_formatted":{"ll":"2019年12月11日","L":"2019/12/11","MM-DD":"12-11"},"excerpt":"<p>混淆想必大家都不陌生，android上用的这一套混淆规则和java混淆几乎是一样的。为何需要混淆呢？简单的说，就是将原本正常的项目文件，对其类，方法，字段，重新命名,a,b,c,d,e,f…之类的字母，达到混淆代码的目的，这样反编译出来，结构乱糟糟的，给反编译者制造一些代码阅读的麻烦。</p>","link":"posts/1576076353","tags":["混淆"],"categories":["Android"]},{"title":"Git分支管理最佳实践","date":"2019-11-19T15:31:00.000Z","date_formatted":{"ll":"2019年11月19日","L":"2019/11/19","MM-DD":"11-19"},"excerpt":"<p>Git是什么，这里就不再多说了，本篇就目前主流公司普遍流行的git分支管理方式做一个简单的总结，另外在开发过程中代码规范提交也是很重要的，本文也会做一个说明。</p>","link":"posts/1574177460","tags":["DevOps","Git"],"categories":["DevOps"]},{"title":"手撸LRU算法基本思路","date":"2019-10-21T12:54:17.000Z","date_formatted":{"ll":"2019年10月21日","L":"2019/10/21","MM-DD":"10-21"},"excerpt":"<p>LRU（Least Recently Used），即最近最少使用淘汰法，它是按照一个非常注明的计算机操作系统基础理论得来的：<strong>最近使用的页面数据会在未来一段时期内仍然被使用,已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用</strong>。本文就带着大家徒手撸一个最基本的LRU算法。</p>","link":"posts/1571663304","tags":["LRU","双链表","算法"],"categories":["算法"]},{"title":"Android媒体库你了解多少","date":"2019-10-19T14:15:26.000Z","date_formatted":{"ll":"2019年10月19日","L":"2019/10/19","MM-DD":"10-19"},"excerpt":"<p>Android系统中有一个媒体库，这个大家应该有所了解，平时在开发过程中如果不涉及媒体文件（图片、音频、视频）这块则很少接触到。有些时候我们在本地添加一张图片，但是在相册中却无法搜索到，这里主要原因就是没有通知系统媒体库刷新导致的。本篇我们就探讨下Android上媒体库的这些事。</p>\n<p>为什么通知媒体库后，媒体库里就能找到了呢？兴许你还会遇到一种情况，就是明明相册里可以发现这张图片，可是到图片的具体路径下却找不到这张图片。到此应该会猜测到是不是媒体库和本地相册都持有一份媒体文件信息呢？基本上猜到了八九不离十了，其实媒体库就是一个数据库，专门管理媒体文件的相关信息，例如图片信息，缩略图等。</p>","link":"posts/1571496871","tags":["媒体库"],"categories":["Android"]},{"title":"Java垃圾回收（三）GC算法","date":"2019-09-22T09:07:50.000Z","date_formatted":{"ll":"2019年9月22日","L":"2019/09/22","MM-DD":"09-22"},"excerpt":"<p>在前面的一篇已经讲过GC的过程了，本篇我们就讲一讲在GC过程中所伴随的一些回收算法，Java中标记垃圾的算法主要有两种，引用计数法和可达性分析算法，其中引用计数法由于某些缺陷而不被java所采用的，现阶段所用的各种回收算法都是在可达性分析算法基础上延伸出来的。</p>","link":"posts/1569143270","tags":["JVM","垃圾回收"],"categories":["Java"]},{"title":"Java垃圾回收（二）GC过程","date":"2019-09-22T08:07:50.000Z","date_formatted":{"ll":"2019年9月22日","L":"2019/09/22","MM-DD":"09-22"},"excerpt":"<p>什么样的对象才是垃圾？对于Java对象来讲，如果说这个对象没有被其他对象所引用该对象就是无用的，此对象就被称为垃圾，其占用的内存也就要被销毁。本篇我们就讲一讲GC（Garbage Collection）的具体过程。</p>","link":"posts/1569139670","tags":["JVM","垃圾回收"],"categories":["Java"]}]}