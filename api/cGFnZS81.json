{"per_page":10,"total":12,"current":5,"data":[{"title":"WebView高度自适应方案探究","date":"2020-04-14T15:59:52.000Z","date_formatted":{"ll":"2020年4月14日","L":"2020/04/14","MM-DD":"04-14"},"excerpt":"<p>Android项目开发中针对webview避免不了混合开发模式，可Android上的webview又很不争气，几乎每个Android版本都有webvie的改动，在国内这种鱼龙混杂环境下出乎意料的问题又很多，这次就谈谈webview高度自适应的问题。</p>","link":"posts/1586879992","tags":["WebView"],"categories":["Android"]},{"title":"Android开机启动的那些事","date":"2020-04-12T10:46:00.000Z","date_formatted":{"ll":"2020年4月12日","L":"2020/04/12","MM-DD":"04-12"},"excerpt":"<p>以前知道AMS、PMS这些概念及其功能，开发的过程中也会用到，就是不知道其来源，好奇心害死猫，扒着扒着扒到系统开机启动这个知识层面上来了，好吧，那今天就说说这个吧！</p>","link":"posts/1618224360","tags":["Android","开机启动","进程"],"categories":["Android"]},{"title":"更好的人生一定要学会做减法","date":"2020-04-10T16:16:50.000Z","date_formatted":{"ll":"2020年4月11日","L":"2020/04/11","MM-DD":"04-11"},"thumbnail":"https://www.fotor.com/images2/features/photo_effects/e_bw.jpg","excerpt":"<p>最近看到一篇人民日报推的一碗鸡汤——<a href=\"https://mp.weixin.qq.com/s/T50i62CuYjNexnn0BCPp6Q\" target=\"_blank\">《更好的人生，要学会做减法》</a>，我平时很少看这类鸡汤文章，但是这篇却无意触动了我，没有讲述故事，短小的一篇，仅仅列了几点，但是这几点却是我在这将近一年中感触最深的：</p>\n<ul>\n<li>学会欲望极简</li>\n<li>学会物质极简</li>\n<li>学会社交极简</li>\n<li>学会信息极简</li>\n<li>学会心事极简</li>\n<li>学会生活极简</li>\n</ul>\n<p>越来越发现自己对生活的细小琐事记性不好，这里做一个笔录，也是为了提醒自己在日后的这么长时间里认真生活。</p>","link":"posts/1586535410","tags":["生活"],"categories":["生活"]},{"title":"Android开发View滑动冲突处理","date":"2020-04-10T16:05:51.000Z","date_formatted":{"ll":"2020年4月11日","L":"2020/04/11","MM-DD":"04-11"},"excerpt":"<p>最近在重构一个老项目，遇到ScrollView嵌套WebView的场景，因为WebView加载的网页并不是自适应，所以导致在滑动网页的时候异常卡顿，很明显是滑动冲突了，解决方式也很常规，针对滑动冲突这里顺便做笔记吧。</p>","link":"posts/1586534751","tags":["View"],"categories":["Android"]},{"title":"Android开发约束布局ConstraintLayout学习总结","date":"2020-03-23T15:27:57.000Z","date_formatted":{"ll":"2020年3月23日","L":"2020/03/23","MM-DD":"03-23"},"excerpt":"<p>小伙伴都知道Android开发有常用的五大布局：LinearLayout、RelateLayout、FrameLayout、AbsolutLayout和TableLayout，今天再总结一个比较牛掰的一个布局——ConstraintLayout，完全可以代替LinearLayout和RelateLayout，具体为什么要使用他和怎么用是接下来需要说的。</p>","link":"posts/1584977277","tags":["布局"],"categories":["Android"]},{"title":"View手势GestureDetector使用","date":"2020-03-21T15:06:05.000Z","date_formatted":{"ll":"2020年3月21日","L":"2020/03/21","MM-DD":"03-21"},"excerpt":"<p>开发同学都知道自定义view的时候可以重写onTouch()方法，进而扩展按下、移动、松开这三个函数，这也是常用的形式。但是这个方法太过简单，如果需要处理一些复杂的手势，用这个接口就会很麻烦。Android其实有一个手势库——GestureDetector，已经为我们封装了一些常用的手势方法，接下来就总结一下GestureDetector的使用和总结。</p>","link":"posts/1584803165","tags":["View"],"categories":["Android"]},{"title":"健康小记","date":"2020-03-21T10:45:34.000Z","date_formatted":{"ll":"2020年3月21日","L":"2020/03/21","MM-DD":"03-21"},"thumbnail":"https://tse2-mm.cn.bing.net/th/id/OIP.HEHLhOkAp4E1FiGupZBajQHaDh?pid=Api&rs=1","excerpt":"<p>父亲爱饮酒，爱熬夜，前段时间进了ICU，一时间颇为伤心。人在江湖，面向生活和工作，迫不得已，但也要时刻注意自己的身体。身体是你最大的资本和银行卡，时刻要把握一个度，不可本末倒置。</p>","link":"posts/1584787534","tags":["健康"],"categories":["生活"]},{"title":"Edittext的自动填充引起的Bug","date":"2020-03-07T15:11:30.000Z","date_formatted":{"ll":"2020年3月7日","L":"2020/03/07","MM-DD":"03-07"},"excerpt":"<p>最近发现线上有一个bug：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at com.android.internal.util.SyncResultReceiver.waitResult(SyncResultReceiver.java:<span class=\"number\">60</span>)</span><br><span class=\"line\">at com.android.internal.util.SyncResultReceiver.getIntResult(SyncResultReceiver.java:<span class=\"number\">68</span>)</span><br><span class=\"line\">at android.view.autofill.AutofillManager.ensureServiceClientAddedIfNeededLocked(AutofillManager.java:<span class=\"number\">1847</span>)</span><br><span class=\"line\">at android.view.autofill.AutofillManager.notifyViewEnteredLocked(AutofillManager.java:<span class=\"number\">966</span>)</span><br><span class=\"line\">at android.view.autofill.AutofillManager.notifyViewEntered(AutofillManager.java:<span class=\"number\">950</span>)</span><br><span class=\"line\">at android.view.autofill.AutofillManager.notifyViewEntered(AutofillManager.java:<span class=\"number\">901</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>并且只出现在Android10上，经查询原来是Edittext默认开启自动填充功能引起的，本片就简单了解一下自动Edittext自动填充功能，以及相应bug的解决方式。</p>","link":"posts/1583593890","tags":["Android","Bug","自动填充"],"categories":["Android"]},{"title":"记一次BuildConfig.DEBUG不准确导致的Bug","date":"2019-12-11T15:21:16.000Z","date_formatted":{"ll":"2019年12月11日","L":"2019/12/11","MM-DD":"12-11"},"excerpt":"<p>Android开发过程中通常我们区分debug和release的相关配置都会采用<code>BuildConfig.DEBUG</code>来进行判断，殊不知这个东西弄不好却是一个坑，刚好在最近的开发过程中遇到。</p>","link":"posts/1576077775","categories":["Android"]},{"title":"Android开发混淆的那些事","date":"2019-12-11T14:57:42.000Z","date_formatted":{"ll":"2019年12月11日","L":"2019/12/11","MM-DD":"12-11"},"excerpt":"<p>混淆想必大家都不陌生，android上用的这一套混淆规则和java混淆几乎是一样的。为何需要混淆呢？简单的说，就是将原本正常的项目文件，对其类，方法，字段，重新命名,a,b,c,d,e,f…之类的字母，达到混淆代码的目的，这样反编译出来，结构乱糟糟的，给反编译者制造一些代码阅读的麻烦。</p>","link":"posts/1576076353","tags":["混淆"],"categories":["Android"]}]}