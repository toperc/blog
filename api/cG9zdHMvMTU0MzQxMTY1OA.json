{"title":"Gradle之Groovy语言","date":"2018-11-28T13:27:38.000Z","date_formatted":{"ll":"2018年11月28日","L":"2018/11/28","MM-DD":"11-28"},"link":"posts/1543411658","comments":true,"tags":["Gradle","Groovy"],"categories":["Android"],"updated":"2021-01-29T12:51:44.647Z","content":"<p>做Android开发的童鞋都了解gradle，知道怎么配置，但是如果在gradle里写一些脚本方法怎么写呢？Java不是Java，c不是c。所以了解核心很重要，这里的核心就是Gradle的生存之本——Groovy语言，其实Groovy很简单，用法上大部分甚至可以直接用Java代替。</p>\n<a id=\"more\"></a>\n<h2 id=\"groovy-语法\">Groovy 语法<a title=\"#groovy-语法\" href=\"#groovy-语法\"></a></h2>\n<h3 id=\"基本语法\">基本语法<a title=\"#基本语法\" href=\"#基本语法\"></a></h3>\n<p>1、Groovy注释标记和Java一样，支持 //或者/**/</p>\n<p>2、Groovy语句可以不用分号结尾。Groovy为了尽量减少代码的输入，确实煞费苦心</p>\n<p>3、单引号<br>\n单引号” 中的内容严格对应Java中的String，不对 $ 符号进行转义</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> s1 = <span class=\"string\">&#x27;i am 100 $ dolloar&#x27;</span></span><br><span class=\"line\">println( s1 )</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i am <span class=\"number\">100</span> $ dolloar</span><br></pre></td></tr></table></figure>\n<p>4、双引号<br>\n双引号”“的内容则和脚本语言的处理有点像，如果字符中有号的话，则它会表达式先求值。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> x = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> s1 = <span class=\"string\">&quot;i am $x dolloar&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">println( s1 )</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i am <span class=\"number\">100</span> dolloar</span><br></pre></td></tr></table></figure>\n<p>5、三引号<br>\n三个引号”’xxx”’中的字符串支持随意换行，比如:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> s1 = <span class=\"string\">&#x27;&#x27;&#x27; x</span></span><br><span class=\"line\"><span class=\"string\">y</span></span><br><span class=\"line\"><span class=\"string\">z</span></span><br><span class=\"line\"><span class=\"string\">f</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(s1)</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> x</span><br><span class=\"line\">y</span><br><span class=\"line\">z</span><br><span class=\"line\">f</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义变量\">定义变量<a title=\"#定义变量\" href=\"#定义变量\"></a></h3>\n<p>Groovy中支持动态类型，即定义变量的时候可以不指定其类型。Groovy中，变量定义可以使用关键字def。注意，虽然def不是必须的，但是为了代码清晰，建议还是使用def关键字</p>\n<ul>\n<li>定义一个变量</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> a = <span class=\"number\">1</span> <span class=\"comment\">//定义一个整形</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> b = <span class=\"string\">&quot;字符串&quot;</span> <span class=\"comment\">//定义一个字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"keyword\">double</span> c = <span class=\"number\">1.0</span>  <span class=\"comment\">//定义一个 double 类型，也可以指定变量类型</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"定义函数\">定义函数<a title=\"#定义函数\" href=\"#定义函数\"></a></h3>\n<p>无返回类型的函数定义，必须使用def关键字 ，最后一行代码的执行结果就是本函数的返回值</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无参函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> fun1()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//有参函数 , 无需指定参数类型  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> fun2( def1 , def2 )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果指定了函数返回类型，则可不必加def关键字来定义函数</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String fun3()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;返回值&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其实，所谓的无返回类型的函数，我估计内部都是按返回Object类型来处理的。毕竟，Groovy 是基于Java 的，而且最终会转成 Java Code 运行在 JVM 上 .</p>\n<p>Groovy的函数里，可以不使用return xxx 来设置 xxx 为函数返回值。如果不使用 return 语句的话，则函数里最后一句代码的执行结果被设置成返回值。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> getSomething()&#123;  </span><br><span class=\"line\">     <span class=\"string\">&quot;getSomething return value&quot;</span> <span class=\"comment\">//如果这是最后一行代码，则返回类型为String  </span></span><br><span class=\"line\">      <span class=\"number\">1000</span>  <span class=\"comment\">//如果这是最后一行代码，则返回类型为Integer  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>除了每行代码不用加分号外，Groovy中函数调用的时候还可以不加括号</p>\n<p>例子1：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> s1 = <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(s1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"></span><br><span class=\"line\">println s1 </span><br></pre></td></tr></table></figure>\n<p>例子2：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(fun1())</span><br><span class=\"line\"></span><br><span class=\"line\">println fun1()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> fun1()&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;你好&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你好</span><br><span class=\"line\">你好</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环-for\">循环 for<a title=\"#循环-for\" href=\"#循环-for\"></a></h3>\n<ul>\n<li>方式一</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span> ; i++) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;测试&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果： 输出5个测试<br>\ngroovy 语法中，注意 i 前面不用指定 int 类型。</p>\n<ul>\n<li>方式二</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.5</span>)&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式也是一种循环，只不过他输出的是 6 个 hello world , 如果想要输出5个，有3中方式。</p>\n<p><strong>第一种方法</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span>.&lt;<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第二种方法</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.4</span>)&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第三种方法</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.5</span>)&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环-time\">循环 time<a title=\"#循环-time\" href=\"#循环-time\"></a></h3>\n<p>times表示从0开始循环到4结束</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4.</span>times &#123;</span><br><span class=\"line\">    println it</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三目运算符\">三目运算符<a title=\"#三目运算符\" href=\"#三目运算符\"></a></h3>\n<p>Java 语法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def name</span><br><span class=\"line\">def result = name != <span class=\"keyword\">null</span> ? name : <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">println(result)</span><br></pre></td></tr></table></figure>\n<p>groovy 语法</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> name = <span class=\"string\">&#x27;d&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> result = name?: <span class=\"string\">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"捕获异常\">捕获异常<a title=\"#捕获异常\" href=\"#捕获异常\"></a></h3>\n<p>捕获所有的 Exception ，有两种写法</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种写法，Java 写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    println <span class=\"number\">5</span> / <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第二种写法，Groovy 写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    println <span class=\"number\">5</span> / <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (anything) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的any并不包括Throwable，如果你真想捕获everything，你必须明确的标明你想捕获Throwable</p>\n<h3 id=\"switch\">switch<a title=\"#switch\" href=\"#switch\"></a></h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> rate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10.</span><span class=\"number\">.26</span>:</span><br><span class=\"line\">        rate = <span class=\"number\">0.05</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">27.</span><span class=\"number\">.36</span>:</span><br><span class=\"line\">        rate = <span class=\"number\">0.06</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">37.</span><span class=\"number\">.46</span>:</span><br><span class=\"line\">        rate = <span class=\"number\">0.07</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"symbol\">default:</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println( rate)</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断是否为真\">判断是否为真<a title=\"#判断是否为真\" href=\"#判断是否为真\"></a></h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Java 写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (person!= <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (person.Data!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        println person.Data.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Groovy</span></span><br><span class=\"line\">println person?.Data?.name</span><br></pre></td></tr></table></figure>\n<h3 id=\"astype\">asType<a title=\"#astype\" href=\"#astype\"></a></h3>\n<p>asType 就是数据类型转换</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//String 转成 int </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> s2 = s1 <span class=\"keyword\">as</span> <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//String 转成 int </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> s3 = s1.asType(Integer)</span><br></pre></td></tr></table></figure>\n<h2 id=\"groovy-数据类型\">Groovy 数据类型<a title=\"#groovy-数据类型\" href=\"#groovy-数据类型\"></a></h2>\n<p>Groovy中的数据类型主要分2种，重点分以下3种情况：</p>\n<ul>\n<li>一个是Java中的基本数据类型。</li>\n<li>另外一个是Groovy中的容器类。</li>\n<li>最后一个非常重要的是闭包。</li>\n</ul>\n<h3 id=\"java-基本类型\">Java 基本类型<a title=\"#java-基本类型\" href=\"#java-基本类型\"></a></h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"keyword\">boolean</span> s1 = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"keyword\">int</span> s2 = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> String s3 = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (s1) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"groovy-容器\">Groovy 容器<a title=\"#groovy-容器\" href=\"#groovy-容器\"></a></h3>\n<p>List：链表，其底层对应Java中的List接口，一般用ArrayList作为真正的实现类。<br>\nMap：键-值表，其底层对应Java中的LinkedHashMap。<br>\nRange：范围，它其实是List的一种拓展。</p>\n<ul>\n<li>List</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变量定义：List变量由[]定义，其元素可以是任何对象</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> aList = [<span class=\"number\">5</span>,<span class=\"string\">&#x27;string&#x27;</span>,<span class=\"literal\">false</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">println(aList)</span><br><span class=\"line\"></span><br><span class=\"line\">println aList[<span class=\"number\">0</span>]  <span class=\"comment\">//获取第1个数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">println aList[<span class=\"number\">1</span>]  <span class=\"comment\">//获取第2个数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">println aList[<span class=\"number\">2</span>]  <span class=\"comment\">//获取第3个数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">println aList[<span class=\"number\">3</span>]  <span class=\"comment\">//获取第4个数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">println( <span class=\"string\">&quot;集合长度：&quot;</span> + aList.size())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">aList[<span class=\"number\">10</span>] = <span class=\"number\">100</span>  <span class=\"comment\">//给第10个值赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">aList&lt;&lt;<span class=\"number\">10</span> <span class=\"comment\">//在 aList 里面添加数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">println aList</span><br><span class=\"line\"></span><br><span class=\"line\">println <span class=\"string\">&quot;集合长度：&quot;</span> + aList.size()</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">5</span>, string, <span class=\"literal\">false</span>]</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">string</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\">集合长度：<span class=\"number\">3</span></span><br><span class=\"line\">[<span class=\"number\">5</span>, string, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\">集合长度：<span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>map</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def map &#x3D; [key1: &quot;value1&quot;, key2: &quot;value2&quot;, key3: &quot;value3&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">println map</span><br><span class=\"line\">&#x2F;&#x2F;[key1:value1, key2:value2, key3:value3]</span><br><span class=\"line\"></span><br><span class=\"line\">println(&quot;数据长度：&quot; + map.size())</span><br><span class=\"line\">&#x2F;&#x2F;数据长度：3</span><br><span class=\"line\"></span><br><span class=\"line\">println(map.keySet())</span><br><span class=\"line\">&#x2F;&#x2F;[key1, key2, key3]</span><br><span class=\"line\"></span><br><span class=\"line\">println(map.values())</span><br><span class=\"line\">&#x2F;&#x2F;[value1, value2, value3]</span><br><span class=\"line\"></span><br><span class=\"line\">println(&quot;key1的值：&quot; + map.key1)</span><br><span class=\"line\">&#x2F;&#x2F;key1的值：value1</span><br><span class=\"line\"></span><br><span class=\"line\">println(&quot;key1的值：&quot; + map.get(&quot;key1&quot;))</span><br><span class=\"line\">&#x2F;&#x2F;key1的值：value1</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;赋值</span><br><span class=\"line\">map.put(&quot;key4&quot;, &quot;value4&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">Iterator it &#x3D; map.iterator()</span><br><span class=\"line\">while (it.hasNext()) &#123;</span><br><span class=\"line\">    println &quot;遍历map: &quot; + it.next()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;遍历map: key1&#x3D;value1</span><br><span class=\"line\">&#x2F;&#x2F;遍历map: key2&#x3D;value2</span><br><span class=\"line\">&#x2F;&#x2F;遍历map: key3&#x3D;value3</span><br><span class=\"line\">&#x2F;&#x2F;遍历map: key4&#x3D;value4</span><br><span class=\"line\"></span><br><span class=\"line\">map.containsKey(&quot;key1&quot;) &#x2F;&#x2F;判断map是否包含某个key</span><br><span class=\"line\"></span><br><span class=\"line\">map.containsValue(&quot;values1&quot;)  &#x2F;&#x2F;判断map是否包含某个values</span><br><span class=\"line\"></span><br><span class=\"line\">map.clear()  &#x2F;&#x2F;清除map里面的内容</span><br><span class=\"line\"></span><br><span class=\"line\">Set set &#x3D; map.keySet(); &#x2F;&#x2F;把 map 的key值转换为 set</span><br></pre></td></tr></table></figure>\n<ul>\n<li>range</li>\n</ul>\n<p>Range 是 Groovy 对 List 的一种拓展</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> range = <span class=\"number\">1.</span><span class=\"number\">.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(range)</span><br><span class=\"line\"><span class=\"comment\">//[1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">range.size()  <span class=\"comment\">//长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">range.iterator() <span class=\"comment\">//迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> s1 = range.get(<span class=\"number\">1</span>) <span class=\"comment\">//获取标号为1的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">range.contains( <span class=\"number\">5</span>) <span class=\"comment\">//是否包含元素5</span></span><br><span class=\"line\"></span><br><span class=\"line\">range.last() <span class=\"comment\">//最后一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">range.remove(<span class=\"number\">1</span>) <span class=\"comment\">//移除标号为1的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">range.clear() <span class=\"comment\">//清空列表</span></span><br></pre></td></tr></table></figure>\n<p>例子2：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> range = <span class=\"number\">1.</span><span class=\"number\">.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(range)</span><br><span class=\"line\"><span class=\"comment\">//[1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(<span class=\"string\">&quot;第一个数据: &quot;</span>+range.from) <span class=\"comment\">//第一个数据</span></span><br><span class=\"line\"><span class=\"comment\">//第一个数据: 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(<span class=\"string\">&quot;最后一个数据: &quot;</span>+range.to)   <span class=\"comment\">//最后一个数据</span></span><br><span class=\"line\"><span class=\"comment\">//最后一个数据: 5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包(重要)\">闭包(重要)<a title=\"#闭包(重要)\" href=\"#闭包(重要)\"></a></h3>\n<p>闭包，英文叫Closure，是Groovy中非常重要的一个数据类型或者说一种概念了。闭包，是一种数据类型，它代表了一段可执行的代码。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> aClosure = &#123;<span class=\"comment\">//闭包是一段代码，所以需要用花括号括起来..  </span></span><br><span class=\"line\">    String param1, <span class=\"keyword\">int</span> param2 -&gt;  <span class=\"comment\">//这个箭头很关键。箭头前面是参数定义，箭头后面是代码  </span></span><br><span class=\"line\">    println<span class=\"string\">&quot;this is code&quot;</span> <span class=\"comment\">//这是代码，最后一句是返回值，  </span></span><br><span class=\"line\">   <span class=\"comment\">//也可以使用return，和Groovy中普通函数一样  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>简而言之，Closure的定义格式是：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> xxx = &#123;paramters -&gt; code&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者  </span></span><br><span class=\"line\"><span class=\"keyword\">def</span> xxx = &#123;无参数，纯code&#125;</span><br></pre></td></tr></table></figure>\n<p>说实话，从C/C++语言的角度看，闭包和函数指针很像。闭包定义好后，要调用它的方法就是：<br>\n闭包对象.call(参数)<br>\n或者更像函数指针调用的方法：<br>\n闭包对象(参数)<br>\n比如：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aClosure.call(<span class=\"string\">&quot;this is string&quot;</span>,<span class=\"number\">100</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者  </span></span><br><span class=\"line\">aClosure(<span class=\"string\">&quot;this is string&quot;</span>, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<p>实例演练,源码如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> fun1 = &#123;</span><br><span class=\"line\">    p1 -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> s = <span class=\"string\">&quot;我是一个闭包,&quot;</span> + p1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println(fun1.call())  <span class=\"comment\">//闭包 调用方式1</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(fun1.call(<span class=\"string\">&quot;我是一个参数&quot;</span>)) <span class=\"comment\">//闭包 调用方式2</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(fun1(<span class=\"string\">&quot;我是一个参数2&quot;</span>))</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是一个闭包,<span class=\"literal\">null</span></span><br><span class=\"line\">我是一个闭包,我是一个参数</span><br><span class=\"line\">我是一个闭包,我是一个参数<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p><strong>无参形式</strong><br>\n闭包没定义参数的话，则隐含有一个参数，这个参数名字叫it，和this的作用类似。it代表闭包的参数。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> fun2 = &#123;</span><br><span class=\"line\">    it-&gt; <span class=\"string\">&quot;dsdsd&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println( fun2.call())</span><br></pre></td></tr></table></figure>\n<p>如果在闭包定义时，采用下面这种写法，则表示闭包没有参数！</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> fun3 = &#123;</span><br><span class=\"line\">    -&gt; <span class=\"string\">&quot;dsdsd&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">println( fun3.call())</span><br></pre></td></tr></table></figure>\n<p>如果调用 fun3 的时候传递参数就会报错，比如</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun3.call(<span class=\"string\">&quot;d&quot;</span>)  <span class=\"comment\">//执行这个方法的时候就会报错</span></span><br></pre></td></tr></table></figure>\n<p><strong>省略圆括号</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]  <span class=\"comment\">//定义一个List</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用它的each，这段代码的格式看不懂了吧？each是个函数，圆括号去哪了?</span></span><br><span class=\"line\"></span><br><span class=\"line\">list.each &#123;</span><br><span class=\"line\">    println(it)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1</span></span><br><span class=\"line\"><span class=\"comment\"> * 2</span></span><br><span class=\"line\"><span class=\"comment\"> * 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>each函数调用的圆括号不见了！其实这在上边已经有所体现，当只有一个参数时可以直接去掉圆括号，这个特点非常关键，因为以后在Gradle中经常会出现这样的代码：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task hello&#123;</span><br><span class=\"line\">    doLast&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>省略圆括号虽然使得代码简洁，看起来更像脚本语言</p>\n<h2 id=\"java-属性\">Java 属性<a title=\"#java-属性\" href=\"#java-属性\"></a></h2>\n<p>Groovy中可以像Java那样写package，然后写类。比如我们在 Person.groovy 文件中编写Java 代码。</p>\n<p>如果不声明public/private等访问权限的话，Groovy中类及其变量默认都是public的。</p>\n<h2 id=\"再识-groovy\">再识 Groovy<a title=\"#再识-groovy\" href=\"#再识-groovy\"></a></h2>\n<p>Java中，我们最熟悉的是类。但是我们在Java的一个源码文件中，不能不写class（interface或者其他….），而Groovy可以像写脚本一样，把要做的事情都写在xxx.groovy中，而且可以通过groovy xxx.groovy直接执行这个脚本。这到底是怎么搞的？</p>\n<p>既然是基于Java的，Groovy会先把xxx.groovy中的内容转换成一个Java类。</p>\n<p>在运行完 Test.groovy 后，发现会产生一个 out 目录，在这个目录里面可以看到 Person.groovy 、Test.groovy 被转换成了 .class 文件</p>\n<ul>\n<li>编译完成后，.groovy 文件都被转换成了 .class 文件，每个 .class 文件都默认有静态 main 方法。每一个脚本都会生成一个static main函数。这样，当我们groovytest.groovy的时候，其实就是用java去执行这个main 函数。</li>\n<li>脚本中的所有代码都会放到run函数中。比如，println ‘Groovy world’，这句代码实际上是包含在run函数里的。</li>\n<li>Test 继承 Script 类。</li>\n</ul>\n<h3 id=\"script-类\">Script 类<a title=\"#script-类\" href=\"#script-类\"></a></h3>\n<p>在 groovy 的库文件中，可以看到 Script 类是一个抽象类，继承 GroovyObjectSupport 类，如下所示</p>\n<h3 id=\"脚本变量的作用域\">脚本变量的作用域<a title=\"#脚本变量的作用域\" href=\"#脚本变量的作用域\"></a></h3>\n<p>在 Test.groovy 里面定义变量 s1 , 方法 fun1 , 同时在 fun1 方法中输出 s1 , 代码如下：</p>\n<p>但是一运行就报错</p>\n<p>groovy中方法内不能随意引用java中的“全局”属性，如果想引用可将def去掉，但这种也不是直接引用，而是在groovy转Java的过程中方法体内会复制一份这个属性，如果想真正的进行引用可在字段前边加一个注解标识@Field</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Field</span> s1 = <span class=\"string\">&quot;123&quot;</span> <span class=\"comment\">//s1 彻彻底底变成 Test 的成员变量</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"json-操作\">JSON 操作<a title=\"#json-操作\" href=\"#json-操作\"></a></h2>\n<p>JsonOutput 类把对象转换成 json字符串。</p>\n<p>JsonSlurper 类把 json 字符串转换成对象</p>\n<p>定义 Person 实体类</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象转json-、-json-转对象\">对象转json 、 json 转对象<a title=\"#对象转json-、-json-转对象\" href=\"#对象转json-、-json-转对象\"></a></h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;zhaoyanjun&quot;</span></span><br><span class=\"line\">person.age = <span class=\"number\">27</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把对象转换为 json 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> json =JsonOutput.toJson(person)</span><br><span class=\"line\"></span><br><span class=\"line\">println(json)</span><br><span class=\"line\"></span><br><span class=\"line\">JsonSlurper jsonSlurper = <span class=\"keyword\">new</span> JsonSlurper()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把字符串转换为对象</span></span><br><span class=\"line\">Person person1 = jsonSlurper.parseText(json)</span><br><span class=\"line\"></span><br><span class=\"line\">println( person1.name )</span><br></pre></td></tr></table></figure>\n<p>运行效果如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">27</span>,<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhaoyanjun&quot;</span>&#125;</span><br><span class=\"line\">zhaoyanjun</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合对象转json-、json-转集合对象\">集合对象转json 、json 转集合对象<a title=\"#集合对象转json-、json-转集合对象\" href=\"#集合对象转json-、json-转集合对象\"></a></h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;zhaoyanjun&quot;</span></span><br><span class=\"line\">person.age = <span class=\"number\">27</span></span><br><span class=\"line\"></span><br><span class=\"line\">Person person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person1.name = <span class=\"string\">&quot;zhaoyanjun2&quot;</span></span><br><span class=\"line\">person1.age = <span class=\"number\">28</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> list = [person,person1]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把集合对象转换为 json 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> jsonArray =JsonOutput.toJson(list)</span><br><span class=\"line\"></span><br><span class=\"line\">println(jsonArray)</span><br><span class=\"line\"></span><br><span class=\"line\">JsonSlurper jsonSlurper = <span class=\"keyword\">new</span> JsonSlurper()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把字符串转换为集合对象</span></span><br><span class=\"line\">List&lt;Person&gt; list2 = jsonSlurper.parseText(jsonArray)</span><br><span class=\"line\"></span><br><span class=\"line\">println( list2.get(<span class=\"number\">1</span>).name )</span><br></pre></td></tr></table></figure>\n<p>运行结果为：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">27</span>,<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhaoyanjun&quot;</span>&#125;,&#123;<span class=\"string\">&quot;age&quot;</span>:<span class=\"number\">28</span>,<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;zhaoyanjun2&quot;</span>&#125;]</span><br><span class=\"line\">zhaoyanjun2</span><br></pre></td></tr></table></figure>\n<h2 id=\"i/o-操作\">I/O 操作<a title=\"#i/o-操作\" href=\"#i/o-操作\"></a></h2>\n<p>Groovy的 I/O 操作是在原有Java I/O操作上进行了更为简单方便的封装，并且使用Closure来简化代码编写。虽然比Java看起来简单，但要理解起来其实比较难。</p>\n<h3 id=\"文本文件读\">文本文件读<a title=\"#文本文件读\" href=\"#文本文件读\"></a></h3>\n<p>在电脑上新建一个文本文件 test.txt ， 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">今天是星期五</span><br><span class=\"line\">天气很好</span><br><span class=\"line\">明天就要放假了</span><br></pre></td></tr></table></figure>\n<p>下面用 groovy 读取里面的文本</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;C:/Users/T/Desktop/test.txt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath) ;</span><br><span class=\"line\"></span><br><span class=\"line\">file.eachLine &#123;</span><br><span class=\"line\">    println it</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你没有看错，就是这么简单，groovy 的文件读取操作简单到令人发指。但是这不够，还有跟令人发指的操作，比如：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;C:/Users/T/Desktop/test.txt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath) ;</span><br><span class=\"line\"></span><br><span class=\"line\">println file.text <span class=\"comment\">//输出文本</span></span><br></pre></td></tr></table></figure>\n<p><strong>更多用法</strong></p>\n<ul>\n<li>指定编码格式</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;C:/Users/T/Desktop/test.txt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定编码格式为 utf-8</span></span><br><span class=\"line\">file.eachLine(<span class=\"string\">&quot;utf-8&quot;</span>) &#123;</span><br><span class=\"line\">    println it  <span class=\"comment\">//读取文本</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>把小写转成大写</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;C:/Users/T/Desktop/test.txt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\">file.eachLine &#123;</span><br><span class=\"line\">    println( it.toUpperCase() )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文本文件写\">文本文件写<a title=\"#文本文件写\" href=\"#文本文件写\"></a></h3>\n<ul>\n<li>方式1</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;C:/Users/T/Desktop/test.txt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\">file.withPrintWriter &#123;</span><br><span class=\"line\">    it.println(<span class=\"string\">&quot;测试&quot;</span>)</span><br><span class=\"line\">    it.println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式2</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;C:/Users/T/Desktop/test.txt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> out = file.newPrintWriter();</span><br><span class=\"line\">out.println(<span class=\"string\">&quot;测试&quot;</span>)</span><br><span class=\"line\">out.println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">out.flush()</span><br><span class=\"line\">out.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件夹操作\">文件夹操作<a title=\"#文件夹操作\" href=\"#文件夹操作\"></a></h3>\n<ul>\n<li>遍历文件夹中的文件、文件</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;C:/Users/T/Desktop/123&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历 123 文件夹中文件夹</span></span><br><span class=\"line\">file.eachDir &#123;</span><br><span class=\"line\">    println <span class=\"string\">&quot;文件夹：&quot;</span>+it.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历 123 文件夹中的文件</span></span><br><span class=\"line\">file.eachFile &#123;</span><br><span class=\"line\">    println <span class=\"string\">&quot;文件：&quot;</span>+ it.name</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件夹：<span class=\"number\">1</span></span><br><span class=\"line\">文件夹：<span class=\"number\">2</span></span><br><span class=\"line\">文件夹：<span class=\"number\">3</span></span><br><span class=\"line\">文件：<span class=\"number\">1</span></span><br><span class=\"line\">文件：<span class=\"number\">2</span></span><br><span class=\"line\">文件：<span class=\"number\">3</span></span><br><span class=\"line\">文件：<span class=\"number\">4.</span>txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"深度遍历文件\">深度遍历文件<a title=\"#深度遍历文件\" href=\"#深度遍历文件\"></a></h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;e:/&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//深度遍历目录,也就是遍历目录中的目录</span></span><br><span class=\"line\">file.eachDirRecurse &#123;</span><br><span class=\"line\">    println it.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//深度遍历文件,包括目录和文件</span></span><br><span class=\"line\">file.eachFileRecurse &#123;</span><br><span class=\"line\">    println it.path</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"inputstream\">InputStream<a title=\"#inputstream\" href=\"#inputstream\"></a></h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;C:/Users/T/Desktop/test.txt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath) ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> ism =  file.newInputStream()</span><br><span class=\"line\"><span class=\"comment\">//操作ism，最后记得关掉</span></span><br><span class=\"line\"></span><br><span class=\"line\">ism.close</span><br></pre></td></tr></table></figure>\n<p>使用闭包操作 inputStream，以后在Gradle里会常看到这种搞法</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> filePath = <span class=\"string\">&quot;C:/Users/T/Desktop/test.txt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> file = <span class=\"keyword\">new</span> File(filePath) ;</span><br><span class=\"line\"></span><br><span class=\"line\">file.withInputStream &#123;ism-&gt;</span><br><span class=\"line\">    <span class=\"comment\">// 操作ism. 不用close。Groovy会自动替你close  </span></span><br><span class=\"line\">    ism.eachLine &#123;</span><br><span class=\"line\">        println it  <span class=\"comment\">//读取文本</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>确实够简单，令人发指。我当年死活也没找到withInputStream是个啥意思。所以，请各位开发者牢记Groovy I/O操作相关类的SDK地址：</p>\n<ul>\n<li>java.io.File: <a href=\"http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/File.html\">http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/File.html</a></li>\n<li>java.io.InputStream: <a href=\"http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/InputStream.html\">http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/InputStream.html</a></li>\n<li>java.io.OutputStream: <a href=\"http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/OutputStream.html\">http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/OutputStream.html</a></li>\n<li>java.io.Reader: <a href=\"http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/Reader.html\">http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/Reader.html</a></li>\n<li>java.io.Writer: <a href=\"http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/Writer.html\">http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/Writer.html</a></li>\n<li>java.nio.file.Path: <a href=\"http://docs.groovy-lang.org/latest/html/groovy-jdk/java/nio/file/Path.html\">http://docs.groovy-lang.org/latest/html/groovy-jdk/java/nio/file/Path.html</a></li>\n</ul>\n<h2 id=\"xml-解析\">xml 解析<a title=\"#xml-解析\" href=\"#xml-解析\"></a></h2>\n<p>在java中解析xml是非常繁琐的，通常需要用10行代码去解析5行的xml文件，非常不经济。在groovy 中解析xml 就很方便了。</p>\n<h3 id=\"实例1-解析简单xml\">实例1 解析简单xml<a title=\"#实例1-解析简单xml\" href=\"#实例1-解析简单xml\"></a></h3>\n<p>比如下面一段xml</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;langs type=<span class=\"string\">&quot;current&quot;</span>&gt;</span><br><span class=\"line\">&lt;language&gt;Java&lt;/language&gt;</span><br><span class=\"line\">&lt;language&gt;Groovy&lt;/language&gt;</span><br><span class=\"line\">&lt;language&gt;JavaScript&lt;/language&gt;</span><br><span class=\"line\">&lt;/langs&gt;</span><br></pre></td></tr></table></figure>\n<p>groovy 解析如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取 xml 文件的 langs 节点</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> langs = <span class=\"keyword\">new</span> XmlParser().parse(<span class=\"string\">&quot;C:/Users/T/Desktop/test.xml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取type 字段的值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> type = langs.attribute(<span class=\"string\">&quot;type&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">println type</span><br><span class=\"line\"></span><br><span class=\"line\">langs.language.each&#123;</span><br><span class=\"line\">    println it.text()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current</span><br><span class=\"line\">Java</span><br><span class=\"line\">Groovy</span><br><span class=\"line\">JavaScript</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例2-解析复杂-xml\">实例2 解析复杂 xml<a title=\"#实例2-解析复杂-xml\" href=\"#实例2-解析复杂-xml\"></a></h3>\n<p>xml 如下图所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;metadata&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;groupId&gt;com.yiba.sdk&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;weshareWiFiSDk&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;2.3.3&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;versioning&gt;</span><br><span class=\"line\">&lt;latest&gt;2.3.3&lt;/latest&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;versions&gt;</span><br><span class=\"line\">    &lt;version&gt;2.2.7&lt;/version&gt;</span><br><span class=\"line\">    &lt;version&gt;2.3.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;version&gt;2.3.1&lt;/version&gt;</span><br><span class=\"line\">    &lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class=\"line\">    &lt;version&gt;2.3.3&lt;/version&gt;</span><br><span class=\"line\">    &lt;/versions&gt;</span><br><span class=\"line\">&lt;/versioning&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/metadata&gt;</span><br></pre></td></tr></table></figure>\n<p>解析代码如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取metadata节点</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> metadata = <span class=\"keyword\">new</span> XmlParser().parse(<span class=\"string\">&quot;C:/Users/T/Desktop/test1.xml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取metadata下面的 groupId 属性值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> groupId = metadata.groupId.text()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取metadata下面的 artifactId 属性值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> artifactId = metadata.artifactId.text()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取metadata下面的 version 属性值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> version = metadata.version.text()</span><br><span class=\"line\"></span><br><span class=\"line\">println groupId + <span class=\"string\">&quot; &quot;</span> + artifactId + <span class=\"string\">&quot; &quot;</span> + version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取metadata下面的 versioning 节点</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> versioning = metadata.versioning</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取versioning 下面的 latest 属性值</span></span><br><span class=\"line\">println versioning.latest.text()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取versioning 下面的 versions 节点</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> versions = versioning.versions</span><br><span class=\"line\">versions.version.each&#123;</span><br><span class=\"line\">    <span class=\"comment\">//遍历 versions 下面的version 值</span></span><br><span class=\"line\">    println <span class=\"string\">&quot;version&quot;</span> + it.text()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.yiba.sdk weshareWiFiSDk <span class=\"number\">2.3</span><span class=\"number\">.3</span></span><br><span class=\"line\"><span class=\"number\">2.3</span><span class=\"number\">.3</span></span><br><span class=\"line\">version2<span class=\"number\">.2</span><span class=\"number\">.7</span></span><br><span class=\"line\">version2<span class=\"number\">.3</span><span class=\"number\">.0</span></span><br><span class=\"line\">version2<span class=\"number\">.3</span><span class=\"number\">.1</span></span><br><span class=\"line\">version2<span class=\"number\">.3</span><span class=\"number\">.2</span></span><br><span class=\"line\">version2<span class=\"number\">.3</span><span class=\"number\">.3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"http://www.groovy-lang.org/documentation.html\" target=\"_blank\">Groovy官方文档</a></li>\n<li><a href=\"https://blog.csdn.net/singwhatiwanna/article/details/76084580\" target=\"_blank\">Gradle从入门到实战 - Groovy基础</a></li>\n</ul>\n","prev":{"title":"Android开发之Touch事件的分发和消费机制","link":"posts/1543414682"},"next":{"title":"Android上的硬件加速","link":"posts/1543332938"},"plink":"https://blog.ixin.run/posts/1543411658/","toc":[{"id":"groovy-语法","title":"Groovy 语法","index":"1","children":[{"id":"基本语法","title":"基本语法","index":"1.1"},{"id":"定义变量","title":"定义变量","index":"1.2"},{"id":"定义函数","title":"定义函数","index":"1.3"},{"id":"循环-for","title":"循环 for","index":"1.4"},{"id":"循环-time","title":"循环 time","index":"1.5"},{"id":"三目运算符","title":"三目运算符","index":"1.6"},{"id":"捕获异常","title":"捕获异常","index":"1.7"},{"id":"switch","title":"switch","index":"1.8"},{"id":"判断是否为真","title":"判断是否为真","index":"1.9"},{"id":"astype","title":"asType","index":"1.10"}]},{"id":"groovy-数据类型","title":"Groovy 数据类型","index":"2","children":[{"id":"java-基本类型","title":"Java 基本类型","index":"2.1"},{"id":"groovy-容器","title":"Groovy 容器","index":"2.2"},{"id":"闭包(重要)","title":"闭包(重要)","index":"2.3"}]},{"id":"java-属性","title":"Java 属性","index":"3"},{"id":"再识-groovy","title":"再识 Groovy","index":"4","children":[{"id":"script-类","title":"Script 类","index":"4.1"},{"id":"脚本变量的作用域","title":"脚本变量的作用域","index":"4.2"}]},{"id":"json-操作","title":"JSON 操作","index":"5","children":[{"id":"对象转json-、-json-转对象","title":"对象转json 、 json 转对象","index":"5.1"},{"id":"集合对象转json-、json-转集合对象","title":"集合对象转json 、json 转集合对象","index":"5.2"}]},{"id":"i/o-操作","title":"I&#x2F;O 操作","index":"6","children":[{"id":"文本文件读","title":"文本文件读","index":"6.1"},{"id":"文本文件写","title":"文本文件写","index":"6.2"},{"id":"文件夹操作","title":"文件夹操作","index":"6.3"},{"id":"深度遍历文件","title":"深度遍历文件","index":"6.4"},{"id":"inputstream","title":"InputStream","index":"6.5"}]},{"id":"xml-解析","title":"xml 解析","index":"7","children":[{"id":"实例1-解析简单xml","title":"实例1 解析简单xml","index":"7.1"},{"id":"实例2-解析复杂-xml","title":"实例2 解析复杂 xml","index":"7.2"}]},{"id":"参考","title":"参考","index":"8"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1543411658/\" title=\"Gradle之Groovy语言\">https://blog.ixin.run/posts/1543411658/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}