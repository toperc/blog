{"title":"谈谈对Dex文件的认识","date":"2021-03-16T14:05:57.000Z","date_formatted":{"ll":"2021年3月16日","L":"2021/03/16","MM-DD":"03-16"},"link":"posts/1615903557","comments":true,"tags":["系统"],"categories":["Android"],"updated":"2021-03-17T08:47:09.534Z","content":"<p>针对dex文件，做android开发的应该都见过，没见过也听说过，至少听说过65536吧，本篇文章就带大家认识以下dex。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是dex文件\">什么是dex文件<a title=\"#什么是dex文件\" href=\"#什么是dex文件\"></a></h2>\n<p>大家知道JVM 是 JAVA 虚拟机，用来运行 JAVA 字节码程序。Dalvik 是 Google 设计的用于 Android平台的运行时环境，适合移动环境下内存和处理器速度有限的系统。ART 即 Android Runtime，是 Google 为了替换 Dalvik 设计的新 Android 运行时环境，在Android 4.4推出。这块内容可参看我之前的一篇文章<a href=\"./posts/1615783515\">《Jvm、Dalvik和Art的区别你知道吗》</a>。</p>\n<p>Android 程序一般使用 Java 语言开发，但是 Dalvik 虚拟机并不支持直接执行 JAVA 字节码，而是会对编译生成的 <code>.class</code> 文件进行翻译、重构、解释、压缩等处理，这个处理过程是由 dx 进行处理，处理完成后生成的产物会以 <code>.dex</code> 结尾，称为 Dex 文件。所以说Dex 文件是很多 <code>.class</code> 文件处理后的产物，最终可以在 Android 运行时环境执行。</p>\n<p>了解了 Dex 文件以后，对日常开发中遇到一些问题能有更深的理解。如：APK 的瘦身、热修复、插件化、应用加固、Android 逆向工程、64 K 方法数限制。</p>\n<h2 id=\"dex文件有什么好处\">dex文件有什么好处<a title=\"#dex文件有什么好处\" href=\"#dex文件有什么好处\"></a></h2>\n<p>有同学可能有疑问了，Android系统其实是基于Java语言上开发（此处暂且不谈kotlin），而Java源码编译后生成的是class字节码文件，该文件也是存储了Java源码的相关信息，Android系统为何不采用使用class文件而使用dex文件呢？</p>\n<p>android采用dex代替class文件，且不说与甲骨文的那点小过节，更多的是针对移动设备所做出的努力。class文件中的数据规范分明，每个class代表一个类，结构清晰，但它对于移动设备而言还是有以下弊端：</p>\n<ul>\n<li>class文件中包含各种数据如常量池、field等，而一个应用中有成百乃至更多的类，使用字节码文件存储类信息，内存占用过大，不适合移动端；</li>\n<li>class文件是堆栈的加栈模式，加载速度慢；</li>\n<li>文件IO操作多，类查找慢；因为每个class文件中只存储了一个Java源文件信息。</li>\n</ul>\n<p>这三个是最明显的弊端，因此不适合移动设备的加载使用，而Dex是对众多 <code>.class</code> 文件进行了整合并且做了很多优化，整体统一，空间占用小，易加载（dex基于寄存器），在不脱离java的束缚下是移动端最好的应对方案。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/B254C7AD9C674D71B5442C7EEB35D43C?method=download&amp;shareKey=7680d8d7af8341ac73da4b642c8444c1\" alt=\"class和dex内部区别\" class=\"φbs\"></p>\n<h2 id=\"dex文件是怎么生成的\">dex文件是怎么生成的<a title=\"#dex文件是怎么生成的\" href=\"#dex文件是怎么生成的\"></a></h2>\n<p>java 代码转化为 dex 文件的流程如图所示：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/B41923374A614AB680DF88ED7ACCB853?method=download&amp;shareKey=0db7541f8d5113933cddf28e8eddcc9a\" alt=\"java代码转化为dex文件的流程示意图\" class=\"φbs\"></p>\n<p>例如有一个Hello.java文件，则通过两步即可生成dex文件：</p>\n<p>第一步： 通过 JDK 的 <code>javac</code> 工具，将 .java文件转化为.class二进制文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Hello</span><br></pre></td></tr></table></figure>\n<p>第二步： 通过 SDK 中的 <code>dx</code>工具，将 .class文件进行翻译、重构、解释、压缩等操作，生成 .dex 文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dx --dex --output&#x3D;Hello.dex Hello.class</span><br></pre></td></tr></table></figure>\n<h2 id=\"dex文件的具体格式\">dex文件的具体格式<a title=\"#dex文件的具体格式\" href=\"#dex文件的具体格式\"></a></h2>\n<p>就像 MP3，MP4，JPG，PNG 文件一样，Dex 文件也有它自己的格式，只有遵守了这些格式，才能被 Android 运行时环境正确识别。</p>\n<p>Dex 文件整体布局如下图所示：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/5D6E411B7EB64A4E8D7E89C05662DB8C?method=download&amp;shareKey=ecfe82e1c5d4eccdc93dbed4a8d274d0\" alt=\"Dex文件整体布局\" class=\"φbs\"></p>\n<ul>\n<li>文件头：header记录了dex文件信息及所有字段大致的分布；</li>\n<li>索引区：分别记录了字符串、类型、方法原型、域、方法的索引，这部分指定了dex文件中所有不同类型数据存储的位置，数据最终存储于“数据区”；</li>\n<li>数据区：此块可分成普通数据区和链接数据区，后者听起来较为陌生，总所周知Android中常有一些动态链接库so的引用，而链接数据区就是对这个的指向。</li>\n</ul>\n<h2 id=\"dex文件头\">dex文件头<a title=\"#dex文件头\" href=\"#dex文件头\"></a></h2>\n<p>文件头区域决定了该怎样来读取这个文件。具体的格式如下表(在文件中排列的顺序就是下面表格中的顺序)：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/FC91DA02022E45F29FE18D91AA9BB830?method=download&amp;shareKey=d8d3388807f7094fee1dd182c4d1acb8\" alt=\"Dex文件头区域\" class=\"φbs\"></p>\n<p>Dex文件头二进制一览：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/461E25AD786C47E9AF3D6DCC160F821F?method=download&amp;shareKey=4e2d0842784de61294e2a6fce5bbc226\" alt=\"Dex文件头二进制一览\" class=\"φbs\"></p>\n<h2 id=\"65536问题\">65536问题<a title=\"#65536问题\" href=\"#65536问题\"></a></h2>\n<p>好多同学都知道android可执行文件“.dex”中的Java方法数引用不能超过65536个，否则就会报<code>com.android.dex.DexIndexOverflowException:method IDnotin[0,0xffff]:65536</code>的错误。但是为什么是65536呢？</p>\n<p>这个问题是由于dex文件格式限制，一个dex文件中的method个数采用使用原生类型short来索引文件的方法，也就是2个字节共16位，最多表达65536个method，field/class个数也均有此限制，对于dex文件，则是将工程所需要全部class文件合并压缩到一个dex文件期间，也就是Android打包的dex过程中，单个dex文件可被引用的方法总数(自己开发的代码以及所引用的Android框架、类库的代码)被限制为66536。</p>\n<p>因此如果工程代码量比较大，方法数若超过65536个则必须采用dex分包形式处理。</p>\n<p>对于为什么采用short来作为索引范围，我猜当时工程师考量的问题还是和移动端硬件和内存比较吃紧有关，纯属个人想法。</p>\n<h2 id=\"odex、oat、vdex\">odex、oat、vdex<a title=\"#odex、oat、vdex\" href=\"#odex、oat、vdex\"></a></h2>\n<p>dex文件是DVM虚拟机可执行的文件，但是真正在app运行的时候虚拟机并不是执行的dex文件。虚拟机运行程序之前需要对dex文件做进一步优化，进而降低内存占用，提高执行效率。</p>\n<h3 id=\"odex\">odex<a title=\"#odex\" href=\"#odex\"></a></h3>\n<p>全称：optimized dex； 即优化过的dex。</p>\n<p>Android5.0之前APP在安装时会进行验证和优化，为了校验代码合法性及优化代码执行速度，验证和优化后，会产生odex文件，运行Apk的时候，直接加载odex，避免重复验证和优化，加快了Apk的响应时间。</p>\n<h3 id=\"oat\">oat<a title=\"#oat\" href=\"#oat\"></a></h3>\n<p>oat是ART虚拟机运行的文件,是ELF格式二进制文件,包含dex和编译的本地机器指令,oat文件包含dex文件，因此比odex文件占用空间更大。</p>\n<p>Android L( 5.0 ) 引入Android Runtime (ART)，ART 使用设备自带的 dex2oat 工具来编译应用,提高启动速度，dex2oat默认会把classes.dex翻译成本地机器指令，生成ELF格式的oat文件，<strong>ART加载OAT文件后不需要经过处理就可以直接运行，它在编译时就从字节码装换成机器码了</strong>，因此运行速度更快。</p>\n<p>不过android5.0之后oat文件还是以.odex后缀结尾，但是已经不是android5.0之前的文件格式，而是ELF格式封装的本地机器码。可以认为oat在dex上加了一层壳，可以从oat里提取出dex。</p>\n<h3 id=\"vdex\">vdex<a title=\"#vdex\" href=\"#vdex\"></a></h3>\n<p>Android O ( 8.0 ) 引入了vdex，目的是为了降低dex2oat时间。</p>\n<p>vdex 文件有助于提升软件更新的性能和用户体验。vdex 文件会存储包含验证程序依赖项且经过预验证的 dex 文件，以便 ART 在应用更新期间无需再次解压和验证 dex 文件。从而优化了启动速度。</p>\n<p>vdex 目的不是为了提升性能，而是为了避免不必要的验证Dex 文件合法性的过程，例如首次安装时进行dex2oat时会校验Dex 文件各个section的合法性，这时候使用的compiler filter 为了照顾安装速度等方面，并没有采用全量编译，当app启动运行一段时间后，收集了足够多的jit 热点方法信息，Android会在后台重新进行dex2oat, 将热点方法编译成机器代码，这时候就不用再重复做验证Dex文件的过程了。这点有点类似机器学习。</p>\n<h2 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h2>\n<p>本文仅仅是对dex整体结构做了一个初步的认识，至于dex内部的深度刨析，作者不做系统开发，因此没有做过深研究。对dex有一个基础看法，这将为以后的类加载、热修复、插件化等技术栈提升有很大的帮助。如果大家有任何的建议或意见，欢迎指出。</p>\n","prev":{"title":"浅谈Android编译打包流程","link":"posts/1615946471"},"next":{"title":"Jvm、Dalvik和Art的区别你知道吗","link":"posts/1615783515"},"plink":"https://blog.ixin.run/posts/1615903557/","toc":[{"id":"什么是dex文件","title":"什么是dex文件","index":"1"},{"id":"dex文件有什么好处","title":"dex文件有什么好处","index":"2"},{"id":"dex文件是怎么生成的","title":"dex文件是怎么生成的","index":"3"},{"id":"dex文件的具体格式","title":"dex文件的具体格式","index":"4"},{"id":"dex文件头","title":"dex文件头","index":"5"},{"id":"65536问题","title":"65536问题","index":"6"},{"id":"odex、oat、vdex","title":"odex、oat、vdex","index":"7","children":[{"id":"odex","title":"odex","index":"7.1"},{"id":"oat","title":"oat","index":"7.2"},{"id":"vdex","title":"vdex","index":"7.3"}]},{"id":"最后","title":"最后","index":"8"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1615903557/\" title=\"谈谈对Dex文件的认识\">https://blog.ixin.run/posts/1615903557/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}