{"title":"Lambda表达式你会吗","date":"2021-02-17T06:57:18.000Z","date_formatted":{"ll":"2021年2月17日","L":"2021/02/17","MM-DD":"02-17"},"link":"posts/1613545058","comments":true,"tags":["Java","Lambda"],"categories":["Java"],"updated":"2021-02-24T13:38:32.879Z","content":"<p>Lambda表达式是Java8的一个新特性，使得Java也能进行简单的函数式编程。臃肿的代码轻量化，实现逻辑突出化，可以取代大部分的匿名内部类，写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>\n<p>举个简单栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常规匿名写法</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;runnable实现常规写法!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Lambda表达式写法</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"string\">&quot;runnable实现lambda写法!&quot;</span>)).start();</span><br></pre></td></tr></table></figure>\n<p>怎么样？简单吧，一行搞定！下边我就带着大家一起揭开Lambda表达式神秘的面纱。</p>\n<a id=\"more\"></a>\n<p>Java8新特性系列：</p>\n<ul>\n<li><a href=\"https://blog.ixin.run/posts/1613545058\" target=\"_blank\">《Lambda表达式你会吗》</a></li>\n<li><a href=\"https://blog.ixin.run/posts/1613575203\" target=\"_blank\">《Stream流式编程知识总结》</a></li>\n<li><a href=\"https://blog.ixin.run/posts/1613581746\" target=\"_blank\">《Stream流式编程实现原理》</a></li>\n</ul>\n<h2 id=\"为什么用lambda表达式\">为什么用Lambda表达式<a title=\"#为什么用lambda表达式\" href=\"#为什么用lambda表达式\"></a></h2>\n<p>大家知道Java的开山就是OOP思想，即面向对象，无论干什么事总要产生一个对象来调用相应的方法，而Java中有很多匿名内部类，其实现同样离不开OOP思想，所以也避免不了<code>new出来一个对象实现一个方法</code>这样固定的框架，然而匿名内部类使用的主要目的是方法内部逻辑的实现，那些多写几行的框架似乎对于我们这些猴子来说并不想关心。。。</p>\n<p>Lambda表达式正式为解决此类问题而生，Lambda表达式属于函数式编程，以往我们函数的入参需要传递一个对象，现在我们可以直接传入一段逻辑，这就直接省去了生成一个对象的不必要写法，简单到一行代码几个字符就可以搞定一个匿名内部类的实现。</p>\n<h2 id=\"什么时候可以使用lambda表达式\">什么时候可以使用Lambda表达式<a title=\"#什么时候可以使用lambda表达式\" href=\"#什么时候可以使用lambda表达式\"></a></h2>\n<p>虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。</p>\n<p>说到这引申出一个概念——“Function Interface（函数式接口）”。函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口，<strong>Lambda表达式只能出现在目标类型为函数式接口的上下文中！</strong></p>\n<p>说白了Lambda表达式的目的就是<strong>只做一件事</strong>，其他花里胡哨的东西不关心，甚至连方法名都不管。</p>\n<p>JDK 1.8 之前已有的函数式接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Runnable</span><br><span class=\"line\">java.util.concurrent.Callable</span><br><span class=\"line\">java.security.PrivilegedAction</span><br><span class=\"line\">java.util.Comparator</span><br><span class=\"line\">java.io.FileFilter</span><br><span class=\"line\">java.nio.file.PathMatcher</span><br><span class=\"line\">java.lang.reflect.InvocationHandler</span><br><span class=\"line\">java.beans.PropertyChangeListener</span><br><span class=\"line\">java.awt.event.ActionListener</span><br><span class=\"line\">javax.swing.event.ChangeListener</span><br></pre></td></tr></table></figure>\n<p>JDK 1.8 新增了一个库包：<code>java.util.function</code>，里面包含很多常用的函数式接口：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/59AE8331BC6A4B7398633FA7AAA13666?method=download&amp;shareKey=ead563589221d00390594b156aad3fcd\" alt=\"JDK1.8新增函数式接口\" class=\"φbs\"></p>\n<p>JDK1.8新增函数式接口场景如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Consumer: 消费某个对象</span><br><span class=\"line\">Predicate: 判断对象是否符合某个条件</span><br><span class=\"line\">Function: 实现一个”一元函数“，即传入一个值经过函数的计算返回另一个值</span><br><span class=\"line\">Supplier: 接口仅包含一个无参的方法: T get()，用来获取一个泛型参数指定类型的对象数据</span><br><span class=\"line\">UnaryOperator: UnaryOperator继承了Function，与Function作用相同，不过UnaryOperator，限定了传入类型和返回类型必需相同。</span><br></pre></td></tr></table></figure>\n<h2 id=\"lambda表达式的基本组成\">Lambda表达式的基本组成<a title=\"#lambda表达式的基本组成\" href=\"#lambda表达式的基本组成\"></a></h2>\n<p>Lambda表达式由三部分组成：</p>\n<ol>\n<li>形参列表。形参列表允许省略形参类型。如果形参列表中只有一个参数，甚至连形参列表的圆括号也可以省略；</li>\n<li>箭头（-&gt;）。必须通过英文中画线和大于符号组成，读作（goes to）；</li>\n<li>代码块。如果代码块只包含一条语句，Lambda表达式允许省略代码块的花括号；Lambda代码块只有一条return语句，可以省略return关键字；</li>\n</ol>\n<h2 id=\"lambda表达式基础语法\">Lambda表达式基础语法<a title=\"#lambda表达式基础语法\" href=\"#lambda表达式基础语法\"></a></h2>\n<p>下边写六个函数式接口来描述Lambda的基础写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**无参无返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NoReturnNoParam</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NoReturnOneParam</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**多参数无返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">NoReturnMultiParam</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** 无参有返回*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReturnNoParam</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**一个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReturnOneParam</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**多个参数有返回值*/</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ReturnMultiParam</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下边是Lambda表达式的基本实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参无返回</span></span><br><span class=\"line\">        NoReturnNoParam noReturnNoParam = () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnNoParam&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnNoParam.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数无返回</span></span><br><span class=\"line\">        NoReturnOneParam noReturnOneParam = (<span class=\"keyword\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数无返回</span></span><br><span class=\"line\">        NoReturnMultiParam noReturnMultiParam = (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;NoReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a +<span class=\"string\">&quot;,&quot;</span> + + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        noReturnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参有返回值</span></span><br><span class=\"line\">        ReturnNoParam returnNoParam = () -&gt; &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;ReturnNoParam&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = returnNoParam.method();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一个参数有返回值</span></span><br><span class=\"line\">        ReturnOneParam returnOneParam = (<span class=\"keyword\">int</span> a) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnOneParam param:&quot;</span> + a);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res2 = returnOneParam.method(<span class=\"number\">6</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//多个参数有返回值</span></span><br><span class=\"line\">        ReturnMultiParam returnMultiParam = (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ReturnMultiParam param:&quot;</span> + <span class=\"string\">&quot;&#123;&quot;</span> + a + <span class=\"string\">&quot;,&quot;</span> + b +<span class=\"string\">&quot;&#125;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res3 = returnMultiParam.method(<span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;return:&quot;</span> + res3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"lambda表达式语法简化\">Lambda表达式语法简化<a title=\"#lambda表达式语法简化\" href=\"#lambda表达式语法简化\"></a></h2>\n<p>上边的六个例子是lambda的基本实现，当然还不够精简，接下来由浅入深通过四种简化方式简化一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.简化参数类型，可以不写参数类型，但是必须所有参数都不写</span></span><br><span class=\"line\">        NoReturnMultiParam lamdba1 = (a, b) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数类型&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lamdba1.method(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.简化参数小括号，如果只有一个参数则可以省略参数小括号</span></span><br><span class=\"line\">        NoReturnOneParam lambda2 = a -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;简化参数小括号&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lambda2.method(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.简化方法体大括号，如果方法条只有一条语句，则可以省略方法体大括号</span></span><br><span class=\"line\">        NoReturnNoParam lambda3 = () -&gt; System.out.println(<span class=\"string\">&quot;简化方法体大括号&quot;</span>);</span><br><span class=\"line\">        lambda3.method();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号和return关键字</span></span><br><span class=\"line\">        ReturnOneParam lambda4 = a -&gt; a+<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        ReturnMultiParam lambda5 = (a, b) -&gt; a+b;</span><br><span class=\"line\">        System.out.println(lambda5.method(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"lambda表达式方法引用简化\">Lambda表达式方法引用简化<a title=\"#lambda表达式方法引用简化\" href=\"#lambda表达式方法引用简化\"></a></h2>\n<h3 id=\"方法引用简化\">方法引用简化<a title=\"#方法引用简化\" href=\"#方法引用简化\"></a></h3>\n<p>有时候已经有<strong>其他方法</strong>实现了函数接口的方法了，那么我们可以直接引用此方法代替函数接口的实现方法，常见的引用形式有以下语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态方法引用：ClassName::methodName</span><br><span class=\"line\">实例方法引用：object::methodName</span><br><span class=\"line\">超类方法引用：super::methodName</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Exe1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ReturnOneParam lambda1 = a -&gt; doubleNum(a);</span><br><span class=\"line\">        System.out.println(lambda1.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda2 引用了已经实现的 doubleNum 方法</span></span><br><span class=\"line\">        ReturnOneParam lambda2 = Exe1::doubleNum;</span><br><span class=\"line\">        System.out.println(lambda2.method(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Exe1 exe = <span class=\"keyword\">new</span> Exe1();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//lambda4 引用了已经实现的 addTwo 方法</span></span><br><span class=\"line\">        ReturnOneParam lambda4 = exe::addTwo;</span><br><span class=\"line\">        System.out.println(lambda4.method(<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 要求</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.参数数量和类型要与函数接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.返回值类型要与函数接口中定义的一致</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">doubleNum</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addTwo</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Exe1中有两个方法，方法的入参和返回值均和函数接口中定义一直，那么这些方法我们可以直接拿来引用，使用形式<code>方法归属者::方法名</code>，入参和返回都不需要显式展现。</p>\n<h3 id=\"构造方法简化\">构造方法简化<a title=\"#构造方法简化\" href=\"#构造方法简化\"></a></h3>\n<p>一般我们需要声明接口，该接口作为对象的生成器，通过 <code>类名::new</code> 的方式来实例化对象，然后调用方法返回对象。构造方法简化的语法形式和方法引用简化一样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造方法引用：ClassName::<span class=\"keyword\">new</span></span><br><span class=\"line\">数组构造引用：TypeName[]::<span class=\"keyword\">new</span></span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ItemCreatorBlankConstruct</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Item <span class=\"title\">getItem</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ItemCreatorParamContruct</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Item <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name, <span class=\"keyword\">double</span> price)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Exe2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ItemCreatorBlankConstruct creator = () -&gt; <span class=\"keyword\">new</span> Item();</span><br><span class=\"line\">        Item item = creator.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        ItemCreatorBlankConstruct creator2 = Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        Item item2 = creator2.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        ItemCreatorParamContruct creator3 = Item::<span class=\"keyword\">new</span>;</span><br><span class=\"line\">        Item item3 = creator3.getItem(<span class=\"number\">112</span>, <span class=\"string\">&quot;鼠标&quot;</span>, <span class=\"number\">135.99</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h2>\n<p>相信看到这基本上对Lambda的使用有一定了解了吧，至于网上说Lambda的几个用法：</p>\n<ul>\n<li>集合迭代</li>\n<li>集合元素删除</li>\n<li>集合排序</li>\n<li>map转换</li>\n<li>filter过滤</li>\n</ul>\n<p>等等，这些其实不属于Lambda的范畴，更多的是java函数属性高级使用，或者是java8新特性的一些高级使用，只不过通过Lambda表达式更加逼格化而已，好了，Lambda深入就到此为止，有时间大伙可以了解以下Java8的流式编程再结合本篇你将受益更多。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://www.runoob.com/java/java8-functional-interfaces.html\">https://www.runoob.com/java/java8-functional-interfaces.html</a></li>\n<li><a href=\"https://www.runoob.com/java/java8-method-references.html\">https://www.runoob.com/java/java8-method-references.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000012269548\">https://segmentfault.com/a/1190000012269548</a></li>\n<li><a href=\"https://www.cnblogs.com/haixiang/p/11029639.html\">https://www.cnblogs.com/haixiang/p/11029639.html</a></li>\n</ul>\n","prev":{"title":"Stream流式编程知识总结","link":"posts/1613575203"},"next":{"title":"玩转响应式编程RxJava【更新中...】","link":"posts/1613529505"},"plink":"https://blog.ixin.run/posts/1613545058/","toc":[{"id":"为什么用lambda表达式","title":"为什么用Lambda表达式","index":"1"},{"id":"什么时候可以使用lambda表达式","title":"什么时候可以使用Lambda表达式","index":"2"},{"id":"lambda表达式的基本组成","title":"Lambda表达式的基本组成","index":"3"},{"id":"lambda表达式基础语法","title":"Lambda表达式基础语法","index":"4"},{"id":"lambda表达式语法简化","title":"Lambda表达式语法简化","index":"5"},{"id":"lambda表达式方法引用简化","title":"Lambda表达式方法引用简化","index":"6","children":[{"id":"方法引用简化","title":"方法引用简化","index":"6.1"},{"id":"构造方法简化","title":"构造方法简化","index":"6.2"}]},{"id":"最后","title":"最后","index":"7"},{"id":"参考","title":"参考","index":"8"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1613545058/\" title=\"Lambda表达式你会吗\">https://blog.ixin.run/posts/1613545058/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}