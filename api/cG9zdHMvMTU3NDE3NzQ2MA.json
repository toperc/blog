{"title":"Git分支管理最佳实践","date":"2019-11-19T15:31:00.000Z","date_formatted":{"ll":"2019年11月19日","L":"2019/11/19","MM-DD":"11-19"},"link":"posts/1574177460","comments":true,"tags":["DevOps","Git"],"categories":["DevOps"],"updated":"2021-01-29T12:51:44.654Z","content":"<p>Git是什么，这里就不再多说了，本篇就目前主流公司普遍流行的git分支管理方式做一个简单的总结，另外在开发过程中代码规范提交也是很重要的，本文也会做一个说明。</p>\n<a id=\"more\"></a>\n<h2 id=\"git-分支管理方式\">Git 分支管理方式<a title=\"#git-分支管理方式\" href=\"#git-分支管理方式\"></a></h2>\n<h3 id=\"单主干\">单主干<a title=\"#单主干\" href=\"#单主干\"></a></h3>\n<p>单主干的分支实践（Trunk-based development，TBD）在 SVN 中比较流行。trunk 是 SVN 中主干分支的名称，对应到 Git 中则是 master 分支。TBD的特点是所有团队成员都在单个主干分支上进行开发。当需要发布时，先考虑使用标签（tag），tag 即某个 commit 来作为发布的版本。如果仅靠 tag 不能满足要求，则从主干分支创建发布分支。bug 修复在主干分支中进行，再 cherry-pick 到发布分支。下图是 TBD 中分支流程的示意图。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/B3D64FBA2EE24118A68DB3574B7642F9?method=download&amp;shareKey=d2122ce40a0f3ed2c5a6fe72ca6a99b2\" alt=\"单主干分支管理方式\"></p>\n<p>由于所有开发人员都在同一个分支上工作，团队需要合理的分工和充分的沟通来保证不同开发人员的代码尽可能少的发生冲突。持续集成和自动化测试是必要的，用来及时发现主干分支中的 bug。因为主干分支是所有开发人员公用的，一个开发人员引入的 bug 可能对其他很多人造成影响。不过好处是由于分支所带来的额外开销非常小。开发人员不需要频繁在不同的分支之间切换。</p>\n<h3 id=\"github-flow\">GitHub flow<a title=\"#github-flow\" href=\"#github-flow\"></a></h3>\n<p>GitHub flow 是 GitHub 所使用的一种简单的流程。该流程只使用两类分支，并依托于 GitHub 的 pull request 功能。在 GitHub flow 中，master 分支中包含稳定的代码。该分支已经或即将被部署到生产环境。master 分支的作用是提供一个稳定可靠的代码基础。任何开发人员都不允许把未测试或未审查的代码直接提交到 master 分支。</p>\n<p>对代码的任何修改，包括 bug 修复、hotfix、新功能开发等都在单独的分支中进行。不管是一行代码的小改动，还是需要几个星期开发的新功能，都采用同样的方式来管理。当需要进行修改时，从 master 分支创建一个新的分支。新分支的名称应该简单清晰地描述该分支的作用。所有相关的代码修改都在新分支中进行。开发人员可以自由地提交代码和 push 到远程仓库。</p>\n<p>当新分支中的代码全部完成之后，通过 GitHub 提交一个新的 pull request。团队中的其他人员会对代码进行审查，提出相关的修改意见。由持续集成服务器（如 Jenkins）对新分支进行自动化测试。当代码通过自动化测试和代码审查之后，该分支的代码被合并到 master 分支。再从 master 分支部署到生产环境。下图是 GitHub flow 分支流程的示意图。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/E219C3F8883043C388F3EB772EAA4FCF?method=download&amp;shareKey=9b63bddbd0f60023a2644fd52668b72e\" alt=\"github-flow分支管理方式\"></p>\n<p>GitHub flow 的好处在于非常简单实用。开发人员需要注意的事项非常少，很容易形成习惯。当需要进行任何修改时，总是从 master 分支创建新分支。完成之后通过 pull request 和相关的代码审查来合并回 master 分支。GitHub flow 要求项目有完善的自动化测试、持续集成和部署等相关的基础设施。每个新分支都需要测试和部署，如果这些不能自动化进行，会增加开发人员的工作量，导致无法有效地实施该流程。这种分支实践也要求团队有代码审查的相应流程。</p>\n<h3 id=\"git-flow\">git-flow<a title=\"#git-flow\" href=\"#git-flow\"></a></h3>\n<p>git-flow 应该是目前流传最广的 Git 分支管理实践。git-flow 围绕的核心概念是版本发布（release）。目前推崇的做法是持续集成和随时发布，也有可能很长时间发布某个功能，或者版本发布时候由于市场的考量，只发布其中某些功能等，git-flow及其适合这种灵活以及稳定性的场景。</p>\n<p>git-flow 流程中包含 5 类分支，分别是 master、develop、新功能分支（feature）、发布分支（release）和 hotfix。这些分支的作用和生命周期各不相同。master 分支中包含的是可以部署到生产环境中的代码，这一点和 GitHub flow 是相同的。develop 分支中包含的是下个版本需要发布的内容。从某种意义上来说，develop 是一个进行代码集成的分支。当 develop 分支集成了足够的新功能和 bug 修复代码之后，通过一个发布流程来完成新版本的发布。发布完成之后，develop 分支的代码会被合并到 master 分支中。</p>\n<p>其余三类分支的描述如下表所示。这三类分支只在需要时从 develop 或 master 分支创建。在完成之后合并到 develop 或 master 分支。合并完成之后该分支被删除。这几类分支的名称应该遵循一定的命名规范，以方便开发人员识别。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/D146768064D04A7A8D79B030D81E62D9?method=download&amp;shareKey=5798585c36701914a737f1d1d5d5654e\" alt=\"git-flow分支命名规范表\"></p>\n<p>对于开发过程中的不同任务，需要在对应的分支上进行工作并正确地进行合并。每个任务开始前需要按照指定的步骤完成分支的创建。例如当需要开发一个新的功能时，基本的流程如下：</p>\n<ul>\n<li>从 develop 分支创建一个新的 feature 分支，如 feature/my-awesome-feature。</li>\n<li>在该 feature 分支上进行开发，提交代码，push 到远端仓库。</li>\n<li>当代码完成之后，合并到 develop 分支并删除当前 feature 分支。</li>\n</ul>\n<p>在进行版本发布和 hotfix 时也有类似的流程。当需要发布新版本时，采用的是如下的流程：</p>\n<ul>\n<li>从 develop 分支创建一个新的 release 分支，如 release/1.4。</li>\n<li>把 release 分支部署到持续集成服务器上进行测试。测试包括自动化集成测试和手动的用户接受测试。</li>\n<li>对于测试中发现的问题，直接在 release 分支上提交修改。完成修改之后再次部署和测试。</li>\n<li>当 release 分支中的代码通过测试之后，把 release 分支合并到 develop 和 master 分支，并在 master 分支上添加相应的 tag。</li>\n</ul>\n<h2 id=\"git-commit-msssage-规范\">Git commit msssage 规范<a title=\"#git-commit-msssage-规范\" href=\"#git-commit-msssage-规范\"></a></h2>\n<p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;hello world&quot;</span><br></pre></td></tr></table></figure>\n<p>一般情况简简单单一句话就能够说明本次提交的信息，但是我们在大项目开发时，正如上边所说，持续集成，随时发布，提交的次数是很多的，这样回顾的时候很容易弄混，并且不清晰，所以我们在提交时候最好还是针对提交message有一个规范，这样看起来有条有理，甚好。这里引用阮一峰所提到的<a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0\" target=\"_blank\">Angular 规范</a>规范，并简单解释说明。</p>\n<h3 id=\"commit-message-的格式\">Commit message 的格式<a title=\"#commit-message-的格式\" href=\"#commit-message-的格式\"></a></h3>\n<p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">&#x2F;&#x2F; 空一行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&#x2F;&#x2F; 空一行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n<p>其中，Header 是必需的，Body 和 Footer 可以省略。</p>\n<p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>\n<h4 id=\"header\">Header<a title=\"#header\" href=\"#header\"></a></h4>\n<p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p>\n<p><strong>type</strong></p>\n<p>type用于说明 commit 的类别，只允许使用下面7个标识。</p>\n<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n<p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p>\n<p><strong>scope</strong></p>\n<p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<p><strong>subject</strong></p>\n<p>subject是 commit 目的的简短描述，不超过50个字符。</p>\n<ol>\n<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li>\n<li>第一个字母小写</li>\n<li>结尾不加句号（.）</li>\n</ol>\n<h4 id=\"body\">Body<a title=\"#body\" href=\"#body\"></a></h4>\n<p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">More detailed explanatory text, if necessary.  Wrap it to </span><br><span class=\"line\">about 72 characters or so. </span><br><span class=\"line\"></span><br><span class=\"line\">Further paragraphs come after blank lines.</span><br><span class=\"line\"></span><br><span class=\"line\">- Bullet points are okay, too</span><br><span class=\"line\">- Use a hanging indent</span><br></pre></td></tr></table></figure>\n<p>有两个注意点:</p>\n<ol>\n<li>使用第一人称现在时，比如使用change而不是changed或changes。</li>\n<li>应该说明代码变动的动机，以及与以前行为的对比。</li>\n</ol>\n<h4 id=\"footer\">Footer<a title=\"#footer\" href=\"#footer\"></a></h4>\n<p>Footer 部分只用于两种情况。</p>\n<p><strong>1.不兼容变动</strong></p>\n<p>如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class=\"line\"></span><br><span class=\"line\">    To migrate the code follow the example below:</span><br><span class=\"line\"></span><br><span class=\"line\">    Before:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &#39;attribute&#39;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    After:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &#39;@&#39;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    The removed &#96;inject&#96; wasn&#39;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure>\n<p><strong>2.关闭 Issue</strong></p>\n<p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #234</span><br></pre></td></tr></table></figure>\n<p>也可以一次关闭多个 issue。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #123, #245, #992</span><br></pre></td></tr></table></figure>\n<h4 id=\"revert\">Revert<a title=\"#revert\" href=\"#revert\"></a></h4>\n<p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: feat(pencil): add &#39;graphiteWidth&#39; option</span><br><span class=\"line\"></span><br><span class=\"line\">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure>\n<p>Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。</p>\n<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p>\n<h3 id=\"生成-change-log\">生成 Change log<a title=\"#生成-change-log\" href=\"#生成-change-log\"></a></h3>\n<p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成，这种在Github上最为<a href=\"https://github.com/karma-runner/karma/blob/master/CHANGELOG.md\" target=\"_blank\">常见</a>。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/4EDC22D1B2BD4CDB9A4C6013F9EEB165?method=download&amp;shareKey=c71382103fb9eda48c63ac271ace0330\" alt=\"Change-log示例\"></p>\n<p>生成的文档包括以下三个部分:</p>\n<ul>\n<li>New features</li>\n<li>Bug fixes</li>\n<li>Breaking changes.</li>\n</ul>\n<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p>\n<p>至于生成Change log工具，大家可以自行根据自家的代码管理平台进行搜索，安装，这里就不说了。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html\">https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></li>\n</ul>\n","prev":{"title":"Android开发混淆的那些事","link":"posts/1576076353"},"next":{"title":"LRU算法基本思路","link":"posts/1571663304"},"plink":"https://blog.ixin.run/posts/1574177460/","toc":[{"id":"git-分支管理方式","title":"Git 分支管理方式","index":"1","children":[{"id":"单主干","title":"单主干","index":"1.1"},{"id":"github-flow","title":"GitHub flow","index":"1.2"},{"id":"git-flow","title":"git-flow","index":"1.3"}]},{"id":"git-commit-msssage-规范","title":"Git commit msssage 规范","index":"2","children":[{"id":"commit-message-的格式","title":"Commit message 的格式","index":"2.1"},{"id":"生成-change-log","title":"生成 Change log","index":"2.2"}]},{"id":"参考","title":"参考","index":"3"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1574177460/\" title=\"Git分支管理最佳实践\">https://blog.ixin.run/posts/1574177460/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}