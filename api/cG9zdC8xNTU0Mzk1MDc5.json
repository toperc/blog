{"title":"谈谈session、cookie、token的区别","date":"2019-04-04T16:24:39.000Z","date_formatted":{"ll":"2019年4月5日","L":"2019/04/05","MM-DD":"04-05"},"link":"post/1554395079","comments":true,"tags":["网络"],"categories":["计算机基础"],"updated":"2021-01-14T08:08:54.927Z","content":"<p>作为移动端开发有好多同学对session、cookie、token这三个概念起初是陌生的，如果不涉及到架构很少接触的这一块。在android开发中用到的session和token比较多些，自己也是从小白一路走过来的，根据以往的学习和经验在这里就谈谈这三者的区别，以便于在日后的开发过程中温故而知新顺手能够拿来。</p>\n<a id=\"more\"></a>\n<h2 id=\"http协议无状态\">Http协议无状态<a title=\"#http协议无状态\" href=\"#http协议无状态\"></a></h2>\n<p>这里的无状态是指在标准的Http协议中并没有Session、cookie之类的记忆功能的，对于同一个url的链接请求没有上下文关系，并且每次请求都是独立的，客户端请求服务器也只能自己单独携带一些参数请求。这样就造成一个普遍的囧像，例如逛淘宝买东西，每个页面服务器都要知道是谁在买，又是谁买的什么，又是谁买了什么买了多少…</p>\n<p>事实上并不是这样的，我们逛淘宝只需登录一次，然后全程买东西并不需要再次登陆了，并且你也会发现甚至好几天都不用登录，直接进官网就已经默认登录了。这也是目前好多网站通用的做法。如何做到的呢？下边也就引出了session、cookie、token的概念。</p>\n<h2 id=\"session\">session<a title=\"#session\" href=\"#session\"></a></h2>\n<p>session顾名思义就是“会话”，大白话就是“你访问我，需要让我知道你是谁，我才能和你交流”。这也是针对上边的http无状态呈现的问题最早最直接的解决方案。session是服务端生成，把客户端的个人登录信息以kv形式存储在服务器中。客户端第一次登录服务端会返回给客户端一个唯一的sessionId（key），然后后边的每次请求都会携带此sessionId到服务端，服务端根据此sessionId查询相应的session信息，查到了即表示验证通过能够正常访问。session还有一个过期时间概念，每次请求都会更新当前的请求时间，如果长时间不请求则会session失效，要进行重新登录。</p>\n<p>session有一个很大的弊端就是session信息都要在服务器上保存，一个人两个人登录没问题，如果成千上万都保存在服务器上，这样服务器的压力就会很大了。另外一些大的公司一般都不只一个服务器，那么又会面临一个新问题：“这个服务器上有，那个服务器上没有”，也有人给出的一个方案是负载均衡，就是两个服务器上相互复制，但是挪来挪去也是一个问题。还有人给出了统一源存储的思想，就是用一个中央服务器存放这些session，其他服务器统一从这个中央处理器上取，但是有没有想过一旦中央服务器宕机了所有人都要重新登录一遍，有没有想骂娘的节奏。<br>\nsession负载均衡：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/E6094301847B4B539745F1FBA904F607?method=download&amp;shareKey=2c20b18a4e4359f390d841054bf36dcb\" alt=\"session负载均衡\"></p>\n<p>session统一源存储：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/497DF82DCB054194BABC6BC916162CAB?method=download&amp;shareKey=edbb4e7ab38556d49683b24effbdabae\" alt=\"session统一源存储\"></p>\n<h2 id=\"cookie\">cookie<a title=\"#cookie\" href=\"#cookie\"></a></h2>\n<p>cookie是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。上边提到session验证时每次请求都要将sessionId发送给服务端验证，那么这个sessionId存在浏览器哪个地方呢？这里就提到cookie的作用了。cookie是由服务端生成保存浏览器某个特有的文件夹下，浏览器也加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。</p>\n<h2 id=\"token\">token<a title=\"#token\" href=\"#token\"></a></h2>\n<p>因为上边遇到了session的种种弊端，再后来又延伸出了一个token思想，token顾名思义就是“令牌”，意思是服务端会向客户端发放一个令牌，客户端保存到本地，每次请求的时候客户端只需要带上这个令牌通过验证即可，服务器也不需要存储这个令牌，因此也就不需要到库里进行查询验证，这样就大大减少了服务器的压力了。</p>\n<p>在我个人理解session和token最重要的区别就是session是一个固件，需要双方保存，必要的时候都拿出来做一下对比，而token是一个算法思想，只需要双方都保持一致的算法验证，无论是请求还是响应只需要把各自携带的参数因子根据这种算法得出一个结果再与一并携带的签名作比对验证通过即可，这里注意因子和签名都是客户端发来的，服务器只是帮着验证一下。目前大多数token的算法获取是采用HMAC-SHA256加密形式得出的，秘钥保存在服务器上，这样做也是防止token篡改。一个简单的token验证元素至少包含用户唯一标示（userID或设备号等）、请求的时间戳(token过期问题)、上次服务器返回的签名(token)。token应该在HTTP的头部发送从而保证了Http请求无状态。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/5FC49197F96E4EADA83E8FA846279EE0?method=download&amp;shareKey=beb14ce06b55fec36a5edf0e75fa18c2\" alt=\"token验证\"></p>\n<p>基于Token的身份验证的过程如下:</p>\n<ol>\n<li>用户通过用户名和密码发送请求。</li>\n<li>程序验证。</li>\n<li>程序返回一个签名的token 给客户端。</li>\n<li>客户端储存token,并且每次用于每次发送请求。</li>\n<li>服务端验证token并返回数据。</li>\n</ol>\n<p>每一次请求都需要token。实现思路如下：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/E170D1CA6F5C4B2FBEBC511844A820D6?method=download&amp;shareKey=8b73421b57b55cfcb2f6f996944290c7\" alt=\"前后端token验证过程\"></p>\n<p>综上token相比session有众多优点：</p>\n<ol>\n<li>无状态<br>\n服务器无需保存token信息，大大减轻服务器的压力。</li>\n<li>安全性<br>\n请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。加密过程是由服务端规定，以及密钥存储也是服务端管理保证了一定的安全性。另外token同样保持着时效性，一段时间之后用户需要重新验证。</li>\n<li>可扩展性<br>\n可以给一些第三方账号放权，例如可以使用微信或支付宝账号登录，只需要根据这些第三方账号设置特定的api，得出特殊权限的token即可。</li>\n<li>多平台跨域<br>\n以前的session大多是配合cookie用在B/S端，token不但可以用在B/S端，目前的主流形式用在C/S端更多，例如移动端。</li>\n</ol>\n","prev":{"title":"网络优化之HttpDNS实践","link":"post/1554649638"},"next":{"title":"记一次Git抽风现场","link":"post/1553955764"},"plink":"https://blog.ixin.run/post/1554395079/","toc":[{"id":"http协议无状态","title":"Http协议无状态","index":"1"},{"id":"session","title":"session","index":"2"},{"id":"cookie","title":"cookie","index":"3"},{"id":"token","title":"token","index":"4"}],"reward":true,"copyright":{"custom":"转载请注明出处，谢谢支持。"}}