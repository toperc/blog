{"title":"对象拷贝性能对比分析","date":"2019-07-20T04:30:09.000Z","date_formatted":{"ll":"2019年7月20日","L":"2019/07/20","MM-DD":"07-20"},"link":"posts/1563597009","comments":true,"tags":["Android基础","Java基础"],"categories":["Android"],"updated":"2021-01-29T12:51:44.651Z","content":"<p>对象拷贝可分为浅拷贝和深拷贝，在开发过程中深拷贝不是随处可见，大部分是引用的赋值，也即是内存地址的引用。如果简单的类似<code>Student studen1 = student0</code>这样便认为复制了一份，这就大错特错了，有些时候你会莫名的发现studen1没有任何操作里面的属性却发生变化了，不用说一定是student0在某个时候被修改了，因为这两个对象引用的是一个地址的内容。开发过程中，因为嵌套过深，对象中转过多，着实需要小心。</p>\n<p>真正的拷贝是完全复制一份，从而与原对象隔离开，保证了原对象的定格，从而在操作过程中不用担心原对象被修改，必要时可“一键还原”。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是浅拷贝？什么是深拷贝？\">什么是浅拷贝？什么是深拷贝？<a title=\"#什么是浅拷贝？什么是深拷贝？\" href=\"#什么是浅拷贝？什么是深拷贝？\"></a></h2>\n<p>先了解一个基础知识：堆内存和栈内存。</p>\n<p>针对变量，栈内存上分配一些基本类型的变量与对象的引用，而堆内存分配给真正的对象本身以及数组等，堆内存上的数据由栈内存上的相应变量引用，相当于栈中存储着堆内存中实际对象或数组的标记或别名（实际上是堆内存变量首地址）。这里包含两部分：一个是基本数据类型，一个是引用数据类型，浅拷贝和深拷贝就是在这个基础之上做的区分。</p>\n<p>假如在拷贝这个对象的时候，只对基本数据类型进行了拷贝，而对引用数据类型只是进行了引用的传递，而没有真实的创建一个新的对象，则认为是浅拷贝。反之，在对引用数据类型进行拷贝的时候，创建了一个新的对象，并且复制其内的成员变量，则认为是深拷贝。</p>\n<p>简单的说：<strong>不能拷贝完全的就是浅拷贝，能够完完全全复制一份的叫深拷贝</strong>。</p>\n<p><strong>浅拷贝</strong>：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405235026378.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMDk3OA==,size_16,color_FFFFFF,t_70\" alt=\"浅拷贝\"><br>\n对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</p>\n<p><strong>深拷贝</strong>：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405234939115.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMDk3OA==,size_16,color_FFFFFF,t_70\" alt=\"深拷贝\"><br>\n对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</p>\n<h2 id=\"android常见的拷贝方式\">Android常见的拷贝方式<a title=\"#android常见的拷贝方式\" href=\"#android常见的拷贝方式\"></a></h2>\n<p>Android开发常见的拷贝方式总结大概有以下六种：</p>\n<ol>\n<li>对象属性相互赋值</li>\n<li>Serializable</li>\n<li>Parcelable</li>\n<li>Gson</li>\n<li>Cloneable</li>\n<li>Mapstruct</li>\n</ol>\n<h3 id=\"对象的相互赋值\">对象的相互赋值<a title=\"#对象的相互赋值\" href=\"#对象的相互赋值\"></a></h3>\n<p>对象属性相互赋值这个是最普通也是操作最笨重的，就是两个对象所有属性相互赋值，从而实现对象的拷贝；注意前边说的是操作最笨重的，但是如果从性能和执行效率上考虑应该是最快的，因为免去了其他额外的开销直接从最基本入手。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student student = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">student.setAge(<span class=\"number\">11</span>);</span><br><span class=\"line\">student.setName(<span class=\"string\">&quot;小明&quot;</span>);</span><br><span class=\"line\">Classmate classmate = <span class=\"keyword\">new</span> Classmate();</span><br><span class=\"line\">classmate.setAge(<span class=\"number\">12</span>);</span><br><span class=\"line\">classmate.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">student.setClassmates(classmate);</span><br><span class=\"line\"></span><br><span class=\"line\">Student studen1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">studen1.setAge(student.getAge());</span><br><span class=\"line\">studen1.setName(student.getName());</span><br><span class=\"line\">studen1.setClassmates(student.getClassmate());</span><br></pre></td></tr></table></figure>\n<p>细心的同学看到上边有一个引用类型classmate，前边已经说过如果对引用数据类型只是进行了引用的传递，而没有真实的创建一个新的对象，则认为是浅拷贝。那么深拷贝应该如何操作呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">student1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">student1.setName(student.getName());</span><br><span class=\"line\">student1.setAge(student.getAge());</span><br><span class=\"line\">Classmate classmate1 = <span class=\"keyword\">new</span> Classmate();</span><br><span class=\"line\">classmate1.setName(student.getClassmates().getName());</span><br><span class=\"line\">classmate1.setAge(student.getClassmates().getAge());</span><br><span class=\"line\">student1.setClassmates(classmate1);</span><br></pre></td></tr></table></figure>\n<p>如上把studen的Classmate各个属性值重新拼装成一个对象然后存入stuent1中，充分将student中的各个属性做一个拷贝过程，算是一个深拷贝。</p>\n<h3 id=\"serializable\">Serializable<a title=\"#serializable\" href=\"#serializable\"></a></h3>\n<p>Serializable实现拷贝过程原理是将对象序列化成二进制流到本地硬盘，然后在反序列化成对象，因此整个过程不存在某个引用类型共同指向问题，因此整个拷贝过程都属于深拷贝。需要注意的是拷贝的对象包括其内部引用类型的属性对象都要实现Serializable接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象拷贝，传入和返回的T必须是serializable类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * 将对象序列化成流,因为写在流里的是对象的一个拷贝，而原对象仍然存在于JVM里面。所以利用这个特性可以实现对象的深拷贝。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Serializable&gt; <span class=\"function\">T <span class=\"title\">sCopy</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将对象写到流里</span></span><br><span class=\"line\">        ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(baos);</span><br><span class=\"line\">        oos.writeObject(object);</span><br><span class=\"line\">        <span class=\"comment\">//从流里读出对象</span></span><br><span class=\"line\">        ByteArrayInputStream bais = <span class=\"keyword\">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bais);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) ois.readObject();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"parcelable\">Parcelable<a title=\"#parcelable\" href=\"#parcelable\"></a></h3>\n<p>Parcelable实现拷贝过程的原理和Serializable如出一辙，Parcelable和Serializable的区别是一个序列化时的状态的保存，前者仅仅是保存在内存中，后者保存在硬盘中，因此前者性能更快，这也是android序列化所推荐的。因此Parcelable的拷贝过程也是深拷贝，所拷贝的对象以及引用类型的属性对象都要实现Parcelable接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象拷贝，传入的对象是Parcelable类型。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Parcelable&gt; <span class=\"function\">T <span class=\"title\">pCopy</span><span class=\"params\">(T object)</span> </span>&#123;</span><br><span class=\"line\">    Parcel parcel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        parcel = Parcel.obtain();</span><br><span class=\"line\">        parcel.writeParcelable(object, <span class=\"number\">0</span>);</span><br><span class=\"line\">        parcel.setDataPosition(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parcel.readParcelable(object.getClass().getClassLoader());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parcel != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            parcel.recycle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gson\">Gson<a title=\"#gson\" href=\"#gson\"></a></h3>\n<p>Gson拷贝的原理同样是序列化和反序列的过程，和Serializable是类似的，只不过Gson仅仅是序列化成json格式，并且不保存对象的相关方法和状态（反序列化时需要指定相应的对象类型），因此相比Serializable性能更优。使用时需要Gson相关依赖。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Gson copy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, S&gt; <span class=\"function\">T <span class=\"title\">gCopy</span><span class=\"params\">(S source, Class&lt;T&gt; targetType)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sGson.fromJson(sGson.toJson(source), targetType);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"cloneable\">Cloneable<a title=\"#cloneable\" href=\"#cloneable\"></a></h3>\n<p>Cloneable拷贝是java对象固有的功能，每个实体类中父类Object中都有一个clone方法，专门用于本类的拷贝工作的。采用Cloneable拷贝需要实体类中实现Cloneable接口，并且要重写Object中的clone方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Classmate classmates;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Classmate <span class=\"title\">getClassmates</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> classmates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setClassmates</span><span class=\"params\">(Classmate classmates)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.classmates = classmates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        Student student = (Student) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        student.classmates = (Classmate) <span class=\"keyword\">this</span>.classmates.clone();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> student;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意观察Student中引用型属性对象classmates，重写的clone方法中如果仅仅是对Studen对象进行clone，而不对classmates进行clone的话则属于浅拷贝。这里我们需要深拷贝，所以需要针对Student中的所有引用型属性对象做一个clone（这里指classmates）。依次类推Classmate同样实现Cloneable，同样需要重写clone方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classmate</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Classmate实体类中没有引用型属性对象了，所以重写的clone方法里面仅仅返回父类的clone()方法即可。</p>\n<h3 id=\"mapstruct\">Mapstruct<a title=\"#mapstruct\" href=\"#mapstruct\"></a></h3>\n<p>MapStruct是一种类型安全的bean映射类生成java注释处理器。<br>\n我们要做的就是定义一个映射器接口，声明必需的映射方法。在编译的过程中，MapStruct会生成此接口的实现。该实现使用纯java方法调用的源和目标对象之间的映射，MapStruct节省了时间，通过生成代码完成繁琐和容易出错的代码逻辑。这里巧妙借助一下其映射功能实现类的拷贝，其拷贝原理和对象属性相互赋值相同。</p>\n<p>android中使用Mapstruct需要在build.gradle中引入Mapstruct的相关依赖：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模型映射</span></span><br><span class=\"line\">implementation <span class=\"string\">&#x27;org.mapstruct:mapstruct:1.2.0.Final&#x27;</span></span><br><span class=\"line\">annotationProcessor <span class=\"string\">&#x27;org.mapstruct:mapstruct-processor:1.2.0.Final&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>使用也很简单，只需要自定义一个Mapstruct接口，在编译时会根绝注解自动生成相关代码方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MapStructCopy</span> </span>&#123;</span><br><span class=\"line\">    MapStructCopy INSTANCE = Mappers.getMapper(MapStructCopy.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">Student <span class=\"title\">copy</span><span class=\"params\">(Student t)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Classmate <span class=\"title\">copy</span><span class=\"params\">(Classmate c)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是，如果仅仅定义Student的映射方法，则同样属于浅拷贝，因为Classmate属于Student中的一个引用型对象属性，所以需要在自定义接口中定义一个属于Classmate的映射方法；来覆盖Student中属性映射。接下来就可以对Student对象拷贝了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student student = MapStructCopy.INSTANCE.copy(student);</span><br></pre></td></tr></table></figure>\n<h2 id=\"性能对比\">性能对比<a title=\"#性能对比\" href=\"#性能对比\"></a></h2>\n<p>下边通过一个例子来对比以上各个拷贝的性能做一个分析对比。</p>\n<p>假设这里有一个Student类，包含名字、年龄、同学Classmate（名字，年龄），这里做两个功能：</p>\n<ol>\n<li>分别对上边的各个方法拷贝一万次，观察各个耗时。</li>\n<li>修改拷贝对象属性值，查看原对象属性值是否变化，来验证是深拷贝还是浅拷贝。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">Parcelable</span>, <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Classmate classmates;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Classmate <span class=\"title\">getClassmates</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> classmates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setClassmates</span><span class=\"params\">(Classmate classmates)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.classmates = classmates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</span><br><span class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        dest.writeInt(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">        dest.writeParcelable(<span class=\"keyword\">this</span>.classmates, flags);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Student</span><span class=\"params\">(Parcel in)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = in.readString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = in.readInt();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.classmates = in.readParcelable(Classmate.class.getClassLoader());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;Student&gt; CREATOR = <span class=\"keyword\">new</span> Parcelable.Creator&lt;Student&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel source)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student(source);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Student[] newArray(<span class=\"keyword\">int</span> size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student[size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        Student student = (Student) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        student.classmates = (Classmate) <span class=\"keyword\">this</span>.classmates.clone();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> student;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classmate</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">Parcelable</span>, <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</span><br><span class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">        dest.writeInt(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Classmate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Classmate</span><span class=\"params\">(Parcel in)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = in.readString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = in.readInt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;Classmate&gt; CREATOR = <span class=\"keyword\">new</span> Parcelable.Creator&lt;Classmate&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Classmate <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel source)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Classmate(source);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Classmate[] newArray(<span class=\"keyword\">int</span> size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Classmate[size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class=\"line\">        executorService.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Student student = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">                student.setAge(<span class=\"number\">11</span>);</span><br><span class=\"line\">                student.setName(<span class=\"string\">&quot;小明&quot;</span>);</span><br><span class=\"line\">                Classmate classmate = <span class=\"keyword\">new</span> Classmate();</span><br><span class=\"line\">                classmate.setAge(<span class=\"number\">12</span>);</span><br><span class=\"line\">                classmate.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">                student.setClassmates(classmate);</span><br><span class=\"line\"></span><br><span class=\"line\">                Student student1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> last;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> count = <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                Log.e(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;+++++++++++++++++开始&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    last = System.currentTimeMillis();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                        student1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">                        student1.setName(student.getName());</span><br><span class=\"line\">                        student1.setAge(student.getAge());</span><br><span class=\"line\">                        Classmate classmate1 = <span class=\"keyword\">new</span> Classmate();</span><br><span class=\"line\">                        classmate1.setName(student.getClassmates().getName());</span><br><span class=\"line\">                        classmate1.setAge(student.getClassmates().getAge());</span><br><span class=\"line\">                        student1.setClassmates(classmate1);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    log(<span class=\"string\">&quot;Normal&quot;</span>, last, student1, student);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    last = System.currentTimeMillis();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                        student1 = CopyUtil.sCopy(student);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    log(<span class=\"string\">&quot;Serializable&quot;</span>, last, student1, student);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    last = System.currentTimeMillis();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                        student1 = CopyUtil.pCopy(student);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    log(<span class=\"string\">&quot;Parcelable&quot;</span>, last, student1, student);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    last = System.currentTimeMillis();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                        student1 = CopyUtil.gCopy(student, Student.class);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    log(<span class=\"string\">&quot;Gson&quot;</span>, last, student1, student);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    last = System.currentTimeMillis();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                        student1 = (Student) student.clone();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    log(<span class=\"string\">&quot;Cloneable&quot;</span>, last, student1, student);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    last = System.currentTimeMillis();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                        student1 = MapStructCopy.INSTANCE.copy(student);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    log(<span class=\"string\">&quot;MapStruct&quot;</span>, last, student1, student);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(String tag, <span class=\"keyword\">long</span> lastTime, Student targetBean, Student resouceBean)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>, <span class=\"string\">&quot;+++++&quot;</span> + tag+<span class=\"string\">&quot;+++++&quot;</span>);</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>, <span class=\"string\">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - lastTime)</span><br><span class=\"line\">                + <span class=\"string\">&quot;  student hash:&quot;</span> + (targetBean.hashCode() == resouceBean.hashCode())</span><br><span class=\"line\">                + <span class=\"string\">&quot;  classmate hash:&quot;</span> + (targetBean.getClassmates().hashCode() == resouceBean.getClassmates().hashCode()));</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>, <span class=\"string\">&quot;student1 name:&quot;</span> + targetBean.getName()+<span class=\"string\">&quot;  classmate1 name:&quot;</span> + targetBean.getClassmates().getName());</span><br><span class=\"line\">        targetBean.setName(<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">        targetBean.getClassmates().setName(<span class=\"string\">&quot;赵六&quot;</span>);</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>, <span class=\"string\">&quot;student name:&quot;</span> + resouceBean.getName()+<span class=\"string\">&quot;  classmate name:&quot;</span> + resouceBean.getClassmates().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印结果如下：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200405235109887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMDk3OA==,size_16,color_FFFFFF,t_70\" alt=\"对比结果\"></p>\n<p>根据打印结果可以得出一个性能对比队列：</p>\n<p>Cloneable &gt; Normal = MapStruct &gt; parcelable &gt; Serializable = Gson</p>\n<p>这个结果也是合乎常理的，前面已经着重针对每种拷贝原理做了分析，不用说凡是内存上操作的肯定优于硬盘上操作的。</p>\n<p>如果根据操作麻烦程度可以得到一个对比队列：</p>\n<p>Gson &gt; Serializable &gt; MapStruct &gt; Cloneable &gt; Parcelable &gt; Normal</p>\n<p>根据以上对比，项目开发过程中我个人认为，如果仅仅是<strong>简单的拷贝不必在意于性能多消耗那么一点点</strong>可以采用Gson，如果项目中的Model都实现了Serializable，也可以采用Serializable序列化形式；如果要兼顾性能和易用性，推荐Cloneable。</p>\n<h2 id=\"知识扩展\">知识扩展<a title=\"#知识扩展\" href=\"#知识扩展\"></a></h2>\n<p>文中提到MapStruct是一种类型安全的bean映射类生成java注释处理器，而文中仅仅是利用很简单的映射来实现拷贝功能，其实MapStruct功能很强大，下边就举几个简单实用场景：</p>\n<h3 id=\"两个对象的映射\">两个对象的映射<a title=\"#两个对象的映射\" href=\"#两个对象的映射\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderInfoMapper</span> </span>&#123;</span><br><span class=\"line\">    OrderInfoMapper INSTANCE = Mappers.getMapper(OrderInfoMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @Mapping(source = &quot;feeDesc&quot;, target = &quot;feeTypeDesc&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        @Mapping(source = &quot;origAmount&quot;, target = &quot;originAmount&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        @Mapping(source = &quot;confirmationNo&quot;, target = &quot;orderNo&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"function\">PriceInfo <span class=\"title\">dbToOrderPriceInfo</span><span class=\"params\">(OrderPriceOffineDb orderOffineDb)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里将OrderPriceOffineDb中的字段’feeDesc’、‘origAmount’、‘confirmationNo’字段赋值给PriceInfo的’feeTypeDesc’、‘originAmount’、'orderNo’这三个字段，其他这两个对象中字段相同的相互赋值，不同的根据MapStruct处理器策略做相应处理。</p>\n<h3 id=\"多个对象的映射\">多个对象的映射<a title=\"#多个对象的映射\" href=\"#多个对象的映射\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AddressMapper</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Mappings(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @Mapping(source = &quot;person.description&quot;, target = &quot;description&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        @Mapping(source = &quot;address.houseNo&quot;, target = &quot;houseNumber&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"function\">DeliveryAddressDto <span class=\"title\">personAndAddressToDeliveryAddressDto</span><span class=\"params\">(Person person, Address address)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里映射来源有两个分别是Person、Address，分别将Person对象中description字段和Address对象中houseNo字段的值分别赋值给DeliveryAddressDto中description、houseNumber。</p>\n<p>如果多个源对象定义具有相同名称的属性，则必须使用@Mapping注解指定从中检索属性的source参数，如示例中的description属性所示。如果不解决这种歧义，将会引发错误。对于在给定源对象中仅存在一次的属性，可以选择指定源参数的名称，因为它可以自动确定。</p>\n<h3 id=\"mapstruct映射策略\">MapStruct映射策略<a title=\"#mapstruct映射策略\" href=\"#mapstruct映射策略\"></a></h3>\n<p>正如上边两个对象的映射一样，所采用的映射策略是<code>unmappedTargetPolicy = ReportingPolicy.IGNORE</code>，假如目标映射对象有字段未被映射将被忽略，如果没有这个策略指定则会给出响应的提示警告。</p>\n<p>下边给出MapStruct常用的映射策略：<br>\n<img src=\"https://img-blog.csdnimg.cn/2020040523520342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMDk3OA==,size_16,color_FFFFFF,t_70\" alt=\"MapStruct常用的映射策略\"></p>\n<h3 id=\"其他\">其他<a title=\"#其他\" href=\"#其他\"></a></h3>\n<ul>\n<li>MapStruct GitHub 访问地址 : <a href=\"https://github.com/mapstruct/mapstruct/\">https://github.com/mapstruct/mapstruct/</a></li>\n<li>使用例子 : <a href=\"https://github.com/mapstruct/mapstruct-examples\">https://github.com/mapstruct/mapstruct-examples</a></li>\n<li>MapStrcut与其它工具对比以及使用说明! <a href=\"http://www.tuicool.com/articles/uiIRjai\">http://www.tuicool.com/articles/uiIRjai</a></li>\n<li>MapStruct 1.1.0.Final中文参考指南 <a href=\"https://blog.csdn.net/YoshinoNanjo/article/details/81363285\">https://blog.csdn.net/YoshinoNanjo/article/details/81363285</a></li>\n</ul>\n","prev":{"title":"Android数据库GreenDao的使用完全解析","link":"posts/1563884419"},"next":{"title":"DO AS ONE WISHES","link":"posts/0"},"plink":"https://blog.ixin.run/posts/1563597009/","toc":[{"id":"什么是浅拷贝？什么是深拷贝？","title":"什么是浅拷贝？什么是深拷贝？","index":"1"},{"id":"android常见的拷贝方式","title":"Android常见的拷贝方式","index":"2","children":[{"id":"对象的相互赋值","title":"对象的相互赋值","index":"2.1"},{"id":"serializable","title":"Serializable","index":"2.2"},{"id":"parcelable","title":"Parcelable","index":"2.3"},{"id":"gson","title":"Gson","index":"2.4"},{"id":"cloneable","title":"Cloneable","index":"2.5"},{"id":"mapstruct","title":"Mapstruct","index":"2.6"}]},{"id":"性能对比","title":"性能对比","index":"3"},{"id":"知识扩展","title":"知识扩展","index":"4","children":[{"id":"两个对象的映射","title":"两个对象的映射","index":"4.1"},{"id":"多个对象的映射","title":"多个对象的映射","index":"4.2"},{"id":"mapstruct映射策略","title":"MapStruct映射策略","index":"4.3"},{"id":"其他","title":"其他","index":"4.4"}]}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1563597009/\" title=\"对象拷贝性能对比分析\">https://blog.ixin.run/posts/1563597009/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}