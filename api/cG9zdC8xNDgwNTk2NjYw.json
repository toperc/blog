{"title":"Android开发序列化Serializable和Parcelable对比和抉择","date":"2016-12-01T12:51:57.000Z","date_formatted":{"ll":"2016年12月1日","L":"2016/12/01","MM-DD":"12-01"},"link":"post/1480596660","comments":true,"tags":["序列化"],"categories":["Android"],"updated":"2021-01-14T08:08:54.897Z","content":"<p>说起序列化想必都不陌生，无论是远程传输，还是本地存储，只要涉及到二进制流的问题都需要序列化，Android中涉及到的序列化方式有两种：Serializable和Parcelable，本片就针对这两种简单介绍一下。</p>\n<a id=\"more\"></a>\n<h2 id=\"首先说明序列化是干什么的？\">首先说明序列化是干什么的？<a title=\"#首先说明序列化是干什么的？\" href=\"#首先说明序列化是干什么的？\"></a></h2>\n<p>序列化的作用就是保存一些在内存中的对象的状态，例如当前对象有哪些属性？这些属性此刻的值都有哪些？序列化后我们可以将此刻这种状态下的对象随意传递或者保存到本地文件或者网络传输到远程，并且经过传递后我们还能读出定格在那一刻状态下的相关属性和属性值。另外序列化还有一个好处，就是将对象转化成字节流，传输更加快速。</p>\n<h2 id=\"什么情况下需要序列化?\">什么情况下需要序列化?<a title=\"#什么情况下需要序列化?\" href=\"#什么情况下需要序列化?\"></a></h2>\n<ol>\n<li>想把内存中的对象保存到文件中或者数据库。</li>\n<li>想用套接字在网络上传输此对象（例如聊天内容的传递）。</li>\n<li>想通过RMI(远程方法调用机制)传递对象。</li>\n<li>在Android开发时，Activity间某个状态下对象的传递。</li>\n</ol>\n<h2 id=\"注意以下两点\">注意以下两点<a title=\"#注意以下两点\" href=\"#注意以下两点\"></a></h2>\n<ol>\n<li>当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；</li>\n<li>当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；</li>\n</ol>\n<h2 id=\"性能和抉择\">性能和抉择<a title=\"#性能和抉择\" href=\"#性能和抉择\"></a></h2>\n<p>Android开发序列化有两种方式：Serializable和Parcelable，Serializable是java中固有的序列化接口，而Parcelable是Android开发中固有的，其设计初衷就是因为Serializable效率太慢的问题。</p>\n<p>Serializable接口是一种标识接口（marker interface，只声明接口不声明方法），这意味着无需实现方法，Java便会对这个对象进行高效的序列化操作。这种方法的缺点是使用了反射，序列化的过程较慢。这种机制会在序列化的时候创建许多的临时对象，容易触发垃圾回收。Parcelable比Serializable传输速度上快十多倍。</p>\n<p>Parcelable的性能比Serializable好，因为前者是在内存上进行序列，所以在内存间数据传输时推荐使用Parcelable，如activity间传输数据；而对于持久化，Serializable可将数据持久化方便保存，所以在需要保存或网络传输数据时选择Serializable，不推荐使用Parcelable进行数据持久化操作。</p>\n<h2 id=\"serializable使用\">Serializable使用<a title=\"#serializable使用\" href=\"#serializable使用\"></a></h2>\n<p>Serializable使用非常简单，在需要序列化的实体类实现Serializable接口即可。</p>\n<h3 id=\"定义serializable类\">定义Serializable类<a title=\"#定义serializable类\" href=\"#定义serializable类\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">627728343585474443L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String studentName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> studentAge;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentBean</span><span class=\"params\">(String studentName, <span class=\"keyword\">int</span> studentAge)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.studentName = studentName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.studentAge = studentAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStudentName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> studentName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStudentName</span><span class=\"params\">(String studentName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.studentName = studentName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getStudentAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> studentAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStudentAge</span><span class=\"params\">(<span class=\"keyword\">int</span> studentAge)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.studentAge = studentAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"serializable在activity之间传值有两种方式：\">Serializable在activity之间传值有两种方式：<a title=\"#serializable在activity之间传值有两种方式：\" href=\"#serializable在activity之间传值有两种方式：\"></a></h3>\n<p>第一种传值取值方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传值</span></span><br><span class=\"line\">StudentBean studentBean = <span class=\"keyword\">new</span> StudentBean(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">Bundle bundle = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">bundle.putSerializable(<span class=\"string\">&quot;student&quot;</span>,studentBean);</span><br><span class=\"line\">Intent intent  = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>,OtherActivity.class);</span><br><span class=\"line\">intent.putExtras(bundle);</span><br><span class=\"line\">startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取值</span></span><br><span class=\"line\">Intent intent = getIntent();</span><br><span class=\"line\">Bundle bundle = intent.getExtras();</span><br><span class=\"line\">StudentBean studentBean = (StudentBean) bundle.get(<span class=\"string\">&quot;student&quot;</span>);</span><br><span class=\"line\">Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;名字是：&quot;</span>+studentBean.getStudentName()+<span class=\"string\">&quot;,年龄是：&quot;</span>+studentBean.getStudentAge(),Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure>\n<p>第二种传值取值方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传值</span></span><br><span class=\"line\">StudentBean studentBean = <span class=\"keyword\">new</span> StudentBean(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">Intent intent  = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>,OtherActivity.class);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;student&quot;</span>,studentBean);</span><br><span class=\"line\">startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取值</span></span><br><span class=\"line\">Intent intent = getIntent();</span><br><span class=\"line\">StudentBean studentBean = (StudentBean) intent.getSerializableExtra(<span class=\"string\">&quot;student&quot;</span>);</span><br><span class=\"line\">Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;名字是：&quot;</span>+studentBean.getStudentName()+<span class=\"string\">&quot;,年龄是：&quot;</span>+studentBean.getStudentAge(),Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure>\n<p>这两种内部实现机制是一样的，第一种采用面向对象的写法显的更加规整。</p>\n<h3 id=\"serialversionuid\">SerialVersionUID<a title=\"#serialversionuid\" href=\"#serialversionuid\"></a></h3>\n<p>一般实现Serializable类中都会添加一个serialVersionUID，他的作用是一个标识。例如我们需要向硬盘中写入一个对象，如果第二次写入的时候我把这个对象的某个属性删掉或者又添加一个新属性，此时把serialVersionUID进行改变，然后进行写入就不行了，报异常错误，道理很简单：两个实体虽然名字一样，可是版本不一样，系统当然不认。</p>\n<p>其实每次向硬盘写入的时候，同时也会记录当前对象的序列化serialVersionUID的，如果serialVersionUID已存在，再次写入的时候就是看serialVersionUID是否一致，一致就写入，不一致就报异常不让写入。serialVersionUID属于long型，有两种写法：一种是自己定义，另外一种是系统根据类型属性等合成的一个序列值。推荐使用后者，eclipse中如果没有写serialVersionUID会提示让添加的。AndroidStudio默认提示功能关闭的，我们可以这样打开：</p>\n<ol>\n<li>File -&gt; Settings… -&gt; Editor -&gt; Inspections -&gt; Serialization issues[在java类目下] -&gt; Serializable class without ‘serialVersionUID’（选中）</li>\n<li>进入实现了Serializable中的类，选中类名，Alt+Enter弹出提示，然后直接导入完成。</li>\n</ol>\n<h3 id=\"transient的使用\">Transient的使用<a title=\"#transient的使用\" href=\"#transient的使用\"></a></h3>\n<p>有些时候我们并不想让某个元素进行jvm默认序列化，可以采用transient来修饰，例如:<code>private transient int studentAge</code>;<br>\n但有些时候我们又想自己序列化这个元素怎么办？除了用transient来修饰这个元素外，还要在类中进行写入读取签名：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeObject</span><span class=\"params\">(ObjectOutputStream stream)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    stream.defaultWriteObject(); <span class=\"comment\">//把jvm能默认序列化的元素进行序列化操作</span></span><br><span class=\"line\">    stream.writeInt(studentAge); <span class=\"comment\">//自己完成studentAge的序列化操作</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readObject</span><span class=\"params\">(ObjectInputStream stream)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">    stream.defaultReadObject(); <span class=\"comment\">//把jvm能默认反序列化的元素进行反序列化操作</span></span><br><span class=\"line\">    studentAge = stream.readInt(); <span class=\"comment\">//自己完成studentAge的反序列操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有同学可能会说，“你似不似洒”，不让默认序列化操作而自己确序列化操作，这不是多此一举嘛。按照其表面确实是多此一举，但是有些情况下这样操作的目的是可以提高读写效率，或者还有其他用途，反正签名是自己写的。我们可以查看ArrayList的源码：<br>\nArrayList中有两个成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The number of elements in this list.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The elements in this list, followed by nulls.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] array;</span><br></pre></td></tr></table></figure>\n<p>签名是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeObject</span><span class=\"params\">(ObjectOutputStream stream)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    stream.defaultWriteObject();</span><br><span class=\"line\">    stream.writeInt(array.length);   <span class=\"comment\">//对数组长度又序列化一遍</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        stream.writeObject(array[i]);  <span class=\"comment\">//将默认不能序列化的数组元素一一序列化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readObject</span><span class=\"params\">(ObjectInputStream stream)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">    stream.defaultReadObject();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cap = stream.readInt();   <span class=\"comment\">//将数组长度进行反序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cap &lt; size) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidObjectException(</span><br><span class=\"line\">                <span class=\"string\">&quot;Capacity: &quot;</span> + cap + <span class=\"string\">&quot; &lt; size: &quot;</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    array = (cap == <span class=\"number\">0</span> ? EmptyArray.OBJECT : <span class=\"keyword\">new</span> Object[cap]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        array[i] = stream.readObject();   <span class=\"comment\">//将默认不能反序列化的数组元素一一反序列化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从源码可以看出ArrayList的序列化操作是只序列化有效长度的数组元素，同样反序列化操作也是只反序列化有效长度的数组元素。这样很明显在序列化和反序列化操作的时候更加快速，效率更高。</p>\n<h2 id=\"parcelable的使用：\">Parcelable的使用：<a title=\"#parcelable的使用：\" href=\"#parcelable的使用：\"></a></h2>\n<p>Parcelable在代码编写上相比Serializable稍微有点复杂，但是考虑到性能优化上该麻烦的时候要勇于去麻烦。</p>\n<h3 id=\"实现parcelable要实现四步\">实现Parcelable要实现四步<a title=\"#实现parcelable要实现四步\" href=\"#实现parcelable要实现四步\"></a></h3>\n<ol>\n<li>重写writeToParcel用于写入数据进行保存。</li>\n<li>重写describeContents用于标记对象中是否含有文件描述符。因为一旦有文件标识符我们就可以获取文件的内容了，这在对象传输过程中是禁止的，很容易产生漏洞，如果有文件标识符我们返回CONTENTS_FILE_DESCRIPTOR,一般默认返回0即可。</li>\n<li>实例化静态内部类对象CREATOR实现接口Parcelable中的接口Creator，修饰符必须是public static final，并且对象名必须是CREATOR,并重写接口中的两个方法:createFromParcel和newArray。前者实现从Parcel容器中读取传递的数据值并封装成Parcelable对象返回逻辑层供对象的数据读取；后者返回一个size大小的新数组。</li>\n<li>根据CREATOR中重写的方法createFromParcel()返回对象Parcel流，并读取数据。</li>\n</ol>\n<h3 id=\"工作机制\">工作机制<a title=\"#工作机制\" href=\"#工作机制\"></a></h3>\n<p>存的时候通过writeToParcel保存对象数据将此刻的对象映射成Parcel流，读的时候通过CREATOR中的实现方法createFromParcel将Parcel流转化成此刻的该类的对象，进而可以得到对象的属性值。存对象和读对象并没有像字典一样有一个标记来进行读取，所以我们只能根据前后顺序保持一致这样的标准来准确读取了。</p>\n<h3 id=\"定义parcelable类\">定义Parcelable类<a title=\"#定义parcelable类\" href=\"#定义parcelable类\"></a></h3>\n<p>注意一点就是boolean类型，因为Parcel类中没有针对boolean类型的封装，所以这里我们要变换一种写法了。另外AndroidStudio有一个插件：Android parcelable code generator。使用和GsonFormat类似，使用前只需要定义好类中各个属性名即可。</p>\n<p>Parcelable类实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> childNumber;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String familyName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isLove;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChildBean</span><span class=\"params\">(<span class=\"keyword\">int</span> num,String familyName,<span class=\"keyword\">boolean</span> isLove)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.childNumber = num;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.familyName = familyName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isLove = isLove;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFamilyName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> familyName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFamilyName</span><span class=\"params\">(String familyName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.familyName = familyName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isLove;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLove</span><span class=\"params\">(<span class=\"keyword\">boolean</span> love)</span> </span>&#123;</span><br><span class=\"line\">        isLove = love;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> childNumber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setChildNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> childNumber)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.childNumber = childNumber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 写数据进行保存</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dest</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> flags</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</span><br><span class=\"line\">        dest.writeInt(<span class=\"keyword\">this</span>.childNumber);</span><br><span class=\"line\">        dest.writeString(<span class=\"keyword\">this</span>.familyName);</span><br><span class=\"line\">        dest.writeByte(<span class=\"keyword\">this</span>.isLove ? (<span class=\"keyword\">byte</span>) <span class=\"number\">1</span> : (<span class=\"keyword\">byte</span>) <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Creator&lt;ChildBean&gt; CREATOR = <span class=\"keyword\">new</span> Creator&lt;ChildBean&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ChildBean <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel in)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ChildBean(in);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> ChildBean[] newArray(<span class=\"keyword\">int</span> size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ChildBean[size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读数据进行恢复</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> in</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">ChildBean</span><span class=\"params\">(Parcel in)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.childNumber =  in.readInt();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.familyName = in.readString();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isLove = in.readByte() != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"parcelable类传值取值\">Parcelable类传值取值<a title=\"#parcelable类传值取值\" href=\"#parcelable类传值取值\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传值</span></span><br><span class=\"line\">ChildBean childBean = <span class=\"keyword\">new</span> ChildBean(<span class=\"number\">18</span>,<span class=\"string\">&quot;张三&quot;</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">Intent intent  = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>,OtherActivity.class);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;child&quot;</span>,childBean);</span><br><span class=\"line\">startActivity(intent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取值</span></span><br><span class=\"line\">Intent intent = getIntent();</span><br><span class=\"line\">ChildBean childBean = (ChildBean) intent.getParcelableExtra(<span class=\"string\">&quot;child&quot;</span>);</span><br><span class=\"line\">Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;个数是：&quot;</span>+childBean.getChildNumber()+<span class=\"string\">&quot;,家庭是：&quot;</span>+childBean.getFamilyName()+<span class=\"string\">&quot;,有爱吗：&quot;</span>+childBean.isLove(),Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure>","prev":{"title":"Java中对==、equals()、hashcode()三者的理解","link":"post/1481187426"},"next":{"title":"Android开发图片缓存框架Glide的总结","link":"post/1480508516"},"plink":"https://blog.ixin.run/post/1480596660/","toc":[{"id":"首先说明序列化是干什么的？","title":"首先说明序列化是干什么的？","index":"1"},{"id":"什么情况下需要序列化?","title":"什么情况下需要序列化?","index":"2"},{"id":"注意以下两点","title":"注意以下两点","index":"3"},{"id":"性能和抉择","title":"性能和抉择","index":"4"},{"id":"serializable使用","title":"Serializable使用","index":"5","children":[{"id":"定义serializable类","title":"定义Serializable类","index":"5.1"},{"id":"serializable在activity之间传值有两种方式：","title":"Serializable在activity之间传值有两种方式：","index":"5.2"},{"id":"serialversionuid","title":"SerialVersionUID","index":"5.3"},{"id":"transient的使用","title":"Transient的使用","index":"5.4"}]},{"id":"parcelable的使用：","title":"Parcelable的使用：","index":"6","children":[{"id":"实现parcelable要实现四步","title":"实现Parcelable要实现四步","index":"6.1"},{"id":"工作机制","title":"工作机制","index":"6.2"},{"id":"定义parcelable类","title":"定义Parcelable类","index":"6.3"},{"id":"parcelable类传值取值","title":"Parcelable类传值取值","index":"6.4"}]}],"reward":true,"copyright":{"custom":"转载请注明出处，谢谢支持。"}}