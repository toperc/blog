{"title":"Android开发图片缓存框架Glide的总结","date":"2016-11-30T12:21:56.000Z","date_formatted":{"ll":"2016年11月30日","L":"2016/11/30","MM-DD":"11-30"},"link":"posts/1480508516","comments":true,"categories":["Android"],"updated":"2021-01-29T12:51:44.636Z","content":"<p>前段时间写过一篇图片缓存框架Picasso的用法，对于Picasso有些同学也比较熟悉，采用Lru最近最少缓存策略，并且自带内存和硬盘缓存机制，在图片加载尤其是多图加载着实为大伙省了不少力，在此之前同样也相识有Afinal、Xutil、UniversalImageLoader等优秀的开源框架，今天再总结一个图片加载缓存框架 — Glide，以助自己后边的项目构建舔砖加瓦吧。</p>\n<a id=\"more\"></a>\n<h3 id=\"glide简介\">Glide简介<a title=\"#glide简介\" href=\"#glide简介\"></a></h3>\n<p>Glide是一个快速高效的开源媒体和图片加载框架，他把媒体解码、内存和磁盘二级缓存还有一些资源缓存池封装成一个个简单的接口，使用很方便，并且Glide也是google推荐使用的图片加载框架。Glide支持下载、解码、展示视频快照和图片资源以及GIF动画，Glide支持插件扩展并使用于任何网络网络引擎，默认情况下采用的是HttpUrlconnection网络加载形式，当然也可以采用Google的volley框架和Square的OkHttp来取代。<br>\nGlide官方说明：<a href=\"https://github.com/bumptech/glide\">https://github.com/bumptech/glide</a></p>\n<h3 id=\"glide特点\">Glide特点<a title=\"#glide特点\" href=\"#glide特点\"></a></h3>\n<ul>\n<li>使用简单</li>\n<li>可配置度高，自适应程度高</li>\n<li>支持常见图片格式 Jpg png gif webp</li>\n<li>支持多种数据源  网络、本地、资源、Assets 等</li>\n<li>高效缓存策略    支持Memory和Disk图片缓存 默认Bitmap格式采用RGB_565内存使用至少减少一半</li>\n<li>生命周期集成   根据Activity/Fragment生命周期自动管理请求</li>\n<li>高效处理Bitmap  使用Bitmap Pool使Bitmap复用，主动调用recycle回收需要回收的Bitmap，减小系统回收压力</li>\n</ul>\n<h3 id=\"glide和picasso对比\">Glide和Picasso对比<a title=\"#glide和picasso对比\" href=\"#glide和picasso对比\"></a></h3>\n<p>Glide和Picasso在使用上非常相似，之前也总结过Picasso,发现在某些地方甚至可以完全模仿Picasso写Glide，不过二者在核心上还是有一定区别的：</p>\n<ol>\n<li>Picasso接收的上下文是Context,而Glide传入的上下文可以有Context、Activity、Fragment。Activity和Fragment有生命周期，因此在某个生命周期阶段图片加载也响应收到控制，更灵活。另外在某些情况下也避免了对象未进行引用而造成的内存泄漏问题。</li>\n<li>Glide默认的图片格式RGB565而Picasso支持的图片格式ARGB8888,尽管前者没有后者图像更清晰（相差不大），但是在内存开销上却比前者少了一半，加载更快</li>\n<li>Glide默认对图片缓存仅仅是展示控件的大小，如果在另外一个不同大小控件上加载相同的图片需要再次下载。Picasso缓存的图片默认是原图，可对原图进行随处展示。</li>\n<li>Glide支持媒体解码，支持GIF动画加载，Picasso不能。<br>\nGlide和Picasso区别不止以上这些，以上只是些典型的区别。对于Glide的使用，下边一一道来。</li>\n</ol>\n<h3 id=\"glide的基础用法\">Glide的基础用法<a title=\"#glide的基础用法\" href=\"#glide的基础用法\"></a></h3>\n<p>1.glide项目引用<br>\n对于Glide这么强大的开源框架，又是google推荐的早已加入到jcenter()仓库中了，所以我们使用的时候只需要在gradle中引用一下仓库的包即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#39;com.github.bumptech.glide:glide:3.7.0&#39;</span><br></pre></td></tr></table></figure>\n<p>2.绑定生命周期，让Glide加载图片过程根据生命周期管理。<br>\n上边也提到Glide可以根据多种形式绑定上下文，尤其是针对Activity的引用，可用于在生命周期内对图片加载进行控制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(Context context);&#x2F;&#x2F; 绑定Context</span><br><span class=\"line\">Glide.with(Activity activity);&#x2F;&#x2F; 绑定Activity</span><br><span class=\"line\">Glide.with(FragmentActivity activity);&#x2F;&#x2F; 绑定FragmentActivity</span><br><span class=\"line\">Glide.with(Fragment fragment);&#x2F;&#x2F; 绑定Fragment</span><br></pre></td></tr></table></figure>\n<p>3.简单加载（这里也可以加载本地和asset，可参考Picasso的简单用法）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>4.设置加载前和加载失败时的图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).placeholder(R.mipmap.ic_launcher).error(R.mipmap.ic_launcher).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>5.设置下载优先级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).priority(Priority.NORMAL).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>6.设置内存缓存（是否进行内存缓存）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).skipMemoryCache(true).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>7.设置磁盘缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).diskCacheStrategy(DiskCacheStrategy.ALL).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>磁盘缓存策略说明：</p>\n<ul>\n<li>ALL:缓存源资源和转换后的资源</li>\n<li>NONE:不作任何磁盘缓存</li>\n<li>SOURCE:缓存源资源</li>\n<li>RESULT:缓存转换后的资源</li>\n</ul>\n<p>8.设置加载动画<br>\napi中默认也存在动画，这里可以自己设置，并且也支持属性动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).animate(R.anim.item_alpha_in).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>设置淡入动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl)</span><br><span class=\"line\">.crossFade(1000)        &#x2F;&#x2F;设置淡入动画，并且淡入过度时间为1秒</span><br><span class=\"line\">.override(80,80)         &#x2F;&#x2F;最终呈现的像素值80*80</span><br><span class=\"line\">.into(imageView3);</span><br></pre></td></tr></table></figure>\n<p>9.设置缩略图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).thumbnail(0.1f).into(imageView); &#x2F;&#x2F;显示的图片大小为原图的1&#x2F;10</span><br></pre></td></tr></table></figure>\n<p>10.设置加载尺寸(像素)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).override(800, 800).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>11.设置图片适配和转换<br>\nApi提供了centerCrop()、fitCenter()两种适配方式，前者效果是将图片按照最小边充满，最大边裁剪适配，后者效果是将图片按照最大边充满最小边居中空缺适配。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).centerCrop().into(imageView);</span><br></pre></td></tr></table></figure>\n<p>也可以自定义Transformation来设置自己的形状，如设置圆角图形，圆角半径单位是dp：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlideRoundTransform</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapTransformation</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> radius = <span class=\"number\">0f</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GlideRoundTransform</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>(context, <span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GlideRoundTransform</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> dp)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.radius = Resources.getSystem().getDisplayMetrics().density * dp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">transform</span><span class=\"params\">(BitmapPool pool, Bitmap toTransform, <span class=\"keyword\">int</span> outWidth, <span class=\"keyword\">int</span> outHeight)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> roundCrop(pool, toTransform);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">roundCrop</span><span class=\"params\">(BitmapPool pool, Bitmap source)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (source == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                result = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Canvas canvas = <span class=\"keyword\">new</span> Canvas(result);</span><br><span class=\"line\">            Paint paint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">            paint.setShader(<span class=\"keyword\">new</span> BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</span><br><span class=\"line\">            paint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            RectF rectF = <span class=\"keyword\">new</span> RectF(<span class=\"number\">0f</span>, <span class=\"number\">0f</span>, source.getWidth(), source.getHeight());</span><br><span class=\"line\">            canvas.drawRoundRect(rectF, radius, radius, paint);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getClass().getName() + Math.round(radius);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>设置圆角图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).transform(new</span><br><span class=\"line\">GlideRoundTransform(this,100)).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>也可以自定义圆形图片：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlideCircleTransform</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapTransformation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GlideCircleTransform</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">transform</span><span class=\"params\">(BitmapPool pool, Bitmap toTransform, <span class=\"keyword\">int</span> outWidth, <span class=\"keyword\">int</span> outHeight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> circleCrop(pool, toTransform);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">circleCrop</span><span class=\"params\">(BitmapPool pool, Bitmap source)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (source == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//获取最小边长</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = Math.min(source.getWidth(), source.getHeight());</span><br><span class=\"line\">        <span class=\"comment\">//获取圆形图片的宽度和高度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (source.getWidth() - size) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (source.getHeight() - size) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// TODO this could be acquired from the pool too</span></span><br><span class=\"line\">        Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);</span><br><span class=\"line\"></span><br><span class=\"line\">        Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Canvas canvas = <span class=\"keyword\">new</span> Canvas(result);</span><br><span class=\"line\">        Paint paint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">        paint.setShader(<span class=\"keyword\">new</span> BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</span><br><span class=\"line\">        paint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> r = size / <span class=\"number\">2f</span>;   <span class=\"comment\">//得到圆形半径</span></span><br><span class=\"line\">        canvas.drawCircle(r, r, r, paint);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getClass().getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置圆形图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).transform(new GlideCircleTransform(this)).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>12.设置要下载的内容<br>\n有些时候我们不想直接将加载的图片显示到控件上，或者我们想下载这张图片，又或者我们暂时不想在此处展示这张图片，可以这样处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).centerCrop().into(new SimpleTarget&lt;GlideDrawable&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;这里可根据resource自行处理（下载...）</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>13.设置监听请求接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).listener(new RequestListener&lt;String, GlideDrawable&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;imageView.setImageDrawable(resource);</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>14.设置GIF加载方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(this).load(imageUrl).asBitmap().into(imageView);&#x2F;&#x2F;显示gif静态图片</span><br><span class=\"line\">Glide.with(this).load(imageUrl).asGif().into(imageView);&#x2F;&#x2F;显示gif动态图片</span><br></pre></td></tr></table></figure>\n<p>15.缓存动态清理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.get(this).clearDiskCache(); &#x2F;&#x2F;清理磁盘缓存</span><br><span class=\"line\">Glide.get(this).clearMemory(); &#x2F;&#x2F;清理内存缓存</span><br></pre></td></tr></table></figure>\n<h3 id=\"glide的高级用法\">Glide的高级用法<a title=\"#glide的高级用法\" href=\"#glide的高级用法\"></a></h3>\n<p>Glide内部有一个GlideModule,是用来全局配置Glide的，可进行设置缓存路径，缓存空间，图片格式，自定义cache指示等操作。</p>\n<p>1.GlideModule添加<br>\n自定义一个GlideModule :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGlideModule</span> <span class=\"keyword\">implements</span> <span class=\"title\">GlideModule</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">applyOptions</span><span class=\"params\">(Context context, GlideBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Apply options to the builder here.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerComponents</span><span class=\"params\">(Context context, Glide glide)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// register ModelLoaders here.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AndroidManifest.xml注册:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;manifest ...&gt;</span><br><span class=\"line\">    &lt;!-- ... permissions --&gt;</span><br><span class=\"line\">    &lt;application ...&gt;</span><br><span class=\"line\">        &lt;meta-data</span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;com.mypackage.MyGlideModule&quot;</span></span><br><span class=\"line\">            android:value=<span class=\"string\">&quot;GlideModule&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;!-- ... activities and other components --&gt;</span><br><span class=\"line\">    &lt;/application&gt;</span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>\n<p>混淆处理:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-keepnames class com.mypackage.MyGlideModule</span><br><span class=\"line\"># or more generally:</span><br><span class=\"line\">#-keep public class * implements com.bumptech.glide.module.GlideModule</span><br></pre></td></tr></table></figure>\n<p>多个GlideModule冲突问题<br>\n一般情况下我们一个项目可以有多个library项目，这样就可能有多个GlideModule的存在，但是多个GlideModule存在却会出现冲突，为了避免这种情况发生，一般我们尽量只设置一个GlideModule，当然也可在配置清单中忽略某个GlideMoudle：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta-data android:name&#x3D;”com.mypackage.MyGlideModule” tools:node&#x3D;”remove” &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<p>2.GlideModule相关配置<br>\n设置Glide内存缓存大小:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int maxMemory &#x3D; (int) Runtime.getRuntime().maxMemory();&#x2F;&#x2F;获取系统分配给应用的总内存大小</span><br><span class=\"line\">int memoryCacheSize &#x3D; maxMemory &#x2F; 8;&#x2F;&#x2F;设置图片内存缓存占用八分之一</span><br><span class=\"line\">&#x2F;&#x2F;设置内存缓存大小</span><br><span class=\"line\">builder.setMemoryCache(new LruResourceCache(memoryCacheSize));</span><br></pre></td></tr></table></figure>\n<p>有些时候我们也需要获取一下默认的内存缓存大小:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MemorySizeCalculator calculator &#x3D; new MemorySizeCalculator(context);  </span><br><span class=\"line\">int defaultMemoryCacheSize &#x3D; calculator.getMemoryCacheSize();  </span><br><span class=\"line\">int defaultBitmapPoolSize &#x3D; calculator.getBitmapPoolSize(); </span><br></pre></td></tr></table></figure>\n<p>设置Glide磁盘缓存大小和磁盘缓存存放位置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File cacheDir &#x3D; context.getExternalCacheDir();&#x2F;&#x2F;指定的是数据的缓存地址</span><br><span class=\"line\">int diskCacheSize &#x3D; 1024 * 1024 * 30;&#x2F;&#x2F;最多可以缓存多少字节的数据</span><br><span class=\"line\">&#x2F;&#x2F;设置磁盘缓存大小和位置</span><br><span class=\"line\">builder.setDiskCache(new DiskLruCacheFactory(cacheDir.getPath(), &quot;glide&quot;, diskCacheSize));</span><br></pre></td></tr></table></figure>\n<p>也可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;存放在data&#x2F;data&#x2F;xxxx&#x2F;cache&#x2F;</span><br><span class=\"line\">builder.setDiskCache(new InternalCacheDiskCacheFactory(context, &quot;glide&quot;, diskCacheSize));</span><br><span class=\"line\">&#x2F;&#x2F;存放在外置文件浏览器</span><br><span class=\"line\">builder.setDiskCache(new ExternalCacheDiskCacheFactory(context, &quot;glide&quot;, diskCacheSize));</span><br></pre></td></tr></table></figure>\n<p>设置图片解码格式:<br>\nGlide默认的图片解码格式是RGB_565相比RGB_8888占内存更小，但是却损失了一部分图片质量，需求根据自己定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;设置图片解码格式</span><br><span class=\"line\">builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);</span><br><span class=\"line\">&#x2F;&#x2F;设置BitmapPool内存缓存大小</span><br><span class=\"line\">builder.setBitmapPool(new LruBitmapPool(memoryCacheSize));</span><br></pre></td></tr></table></figure>\n<p>3.使用ModelLoader自定义数据源：<br>\n有些时候我们需要根据不同的情况加载不同格式的图片，可采用工厂模式来进行选取。</p>\n<p>定义处理URL接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IDataModel &#123;</span><br><span class=\"line\">    String buildDataModelUrl(int width, int height);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现处理URL接口<br>\nJpgDataModel:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JpgDataModel</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDataModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataModelUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JpgDataModel</span><span class=\"params\">(String dataModelUrl)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataModelUrl = dataModelUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">buildDataModelUrl</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//http://78re52.com1.z0.glb.clouddn.com/resource/gogopher.jpg?imageView2/1/w/200/h/200/format/jpg</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;%s?imageView2/1/w/%d/h/%d/format/jpg&quot;</span>, dataModelUrl, width, height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>WebpDataModel:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebpDataModel</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDataModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataModelUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WebpDataModel</span><span class=\"params\">(String dataModelUrl)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataModelUrl = dataModelUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">buildDataModelUrl</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//http://78re52.com1.z0.glb.clouddn.com/resource/gogopher.jpg?imageView2/1/w/200/h/200/format/webp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;%s?imageView2/1/w/%d/h/%d/format/webp&quot;</span>, dataModelUrl, width, height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置图片加工工厂</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDataLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseGlideUrlLoader</span>&lt;<span class=\"title\">IDataModel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyDataLoader</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyDataLoader</span><span class=\"params\">(ModelLoader&lt;GlideUrl, InputStream&gt; urlLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(urlLoader, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getUrl</span><span class=\"params\">(IDataModel model, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.buildDataModelUrl(width, height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ModelLoaderFactory</span>&lt;<span class=\"title\">IDataModel</span>, <span class=\"title\">InputStream</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ModelLoader&lt;IDataModel, InputStream&gt; <span class=\"title\">build</span><span class=\"params\">(Context context, GenericLoaderFactory factories)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyDataLoader(factories.buildModelLoader(GlideUrl.class, InputStream.class));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">teardown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据不同的要求采用不同的策略加载图片</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;加载jpg图片</span><br><span class=\"line\">Glide.with(this).using(new MyDataLoader(this)).load(new JpgDataModel(imageUrl)).into(imageView);</span><br><span class=\"line\">&#x2F;&#x2F;加载webp图片</span><br><span class=\"line\">Glide.with(this).using(new MyDataLoader(this)).load(new WebpDataModel(imageUrl)).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>这样每次加载都要.using(),我们也可以不用.using(),方法就是将MyDataLoader的工厂注册到GlideModel中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyGlideModule implements GlideModule &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void registerComponents(Context context, Glide glide) &#123;</span><br><span class=\"line\">        glide.register(IDataModel.class, InputStream.class, </span><br><span class=\"line\">            new MyUrlLoader.Factory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;加载jpg图片</span><br><span class=\"line\">Glide.with(this).load(new JpgDataModel(imageUrl)).into(imageView);</span><br><span class=\"line\">&#x2F;&#x2F;加载webp图片</span><br><span class=\"line\">Glide.with(this).load(new WebpDataModel(imageUrl)).into(imageView);</span><br></pre></td></tr></table></figure>\n<p>以上是个人对Glide的相关总结，Glide功能不止这些，甚或是还可以自定义图片缓存TAG来实现对图片软删除等操作，这些功能在开发中也是微乎其微了，当然Glide开发团队也是想的周到，以实现程序的健壮性。Glide和Picasso有很多相似之处，了解Picasso的同学可以根据Picasso的相关Api很容易上手Glide，返过来也如此，总之后续继续深入吧。</p>\n","prev":{"title":"Android开发序列化Serializable和Parcelable对比和抉择","link":"posts/1480596660"},"next":{"title":"Java反射你知道多少","link":"posts/1479635474"},"plink":"https://blog.ixin.run/posts/1480508516/","toc":[{"id":"glide简介","title":"Glide简介","index":"1"},{"id":"glide特点","title":"Glide特点","index":"2"},{"id":"glide和picasso对比","title":"Glide和Picasso对比","index":"3"},{"id":"glide的基础用法","title":"Glide的基础用法","index":"4"},{"id":"glide的高级用法","title":"Glide的高级用法","index":"5"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1480508516/\" title=\"Android开发图片缓存框架Glide的总结\">https://blog.ixin.run/posts/1480508516/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}