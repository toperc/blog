{"title":"Java反射你知道多少","date":"2016-11-20T09:51:14.000Z","date_formatted":{"ll":"2016年11月20日","L":"2016/11/20","MM-DD":"11-20"},"link":"posts/1479635474","comments":true,"categories":["Java"],"updated":"2021-01-29T12:51:44.658Z","content":"<p>一直想把java反射原理详细的总结一下，昨天看到一位大虾利用许多小栗子阐述的很清楚，我就顺手拈来着手敲了一遍并加以修正补充和说明，以便日后回顾和深入学习。</p>\n<a id=\"more\"></a>\n<h2 id=\"定义\">定义<a title=\"#定义\" href=\"#定义\"></a></h2>\n<p>JAVA反射机制(JAVA-Reflect)是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p>\n<h2 id=\"功能\">功能<a title=\"#功能\" href=\"#功能\"></a></h2>\n<p>Java反射机制主要提供了以下功能：</p>\n<ul>\n<li>在运行时判断任意一个对象所属的类。</li>\n<li>在运行时构造任意一个类的对象。</li>\n<li>在运行时判断任意一个类所具有的成员变量和方法。</li>\n<li>在运行时调用任意一个对象的方法。</li>\n<li>生成动态代理。</li>\n</ul>\n<h2 id=\"class类的使用\">Class类的使用<a title=\"#class类的使用\" href=\"#class类的使用\"></a></h2>\n<h3 id=\"class类是什么？\">Class类是什么？<a title=\"#class类是什么？\" href=\"#class类是什么？\"></a></h3>\n<p>在面向对象的世界里，万事万物皆对象。其实在java里面有两样东西不是对象。一个是java的普通的数据类型（他们的包装类属于对象），另外一个就是java的静态成员方法或者变量，这个不是对象而是属于某个类。</p>\n<p>我们平时写的每一个类都是对象，而类又是java.long.Class的实例对象。说明白点就是任何一个类即有自己的对象（本身new出来的），同时本身又是Class的实例对象（能够从Class中得到该类的实例）。</p>\n<h3 id=\"如何得到class的实例对象？\">如何得到Class的实例对象？<a title=\"#如何得到class的实例对象？\" href=\"#如何得到class的实例对象？\"></a></h3>\n<p>先来看看Class类的源码，了解其内部构造：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Constructor. Only the Java Virtual Machine creates Class</span></span><br><span class=\"line\"><span class=\"comment\"> * objects.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Class</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>由源码可知，Class类的构造方法是私有的，根据注释我们知道只有java虚拟机才能创建Class类的对象，并且是处于运行时创建，因此我们不能在代码中直接new出一个Class对象。此路是不通了，但是我们有其他路可走，这里有三条路：</p>\n<p>我们先创建一个我们自己的类对象：<code>Demo demo = new Demo();</code></p>\n<ul>\n<li>第一条路,通过类的静态成员变量来获取Class类的实例对象（或者叫Demo类的类类型）：<code>Class c = Demo.class;</code><br>\n另外，基本的数据类型和引用类型以及void关键字都可用此方式得到它们的类类型。</li>\n<li>第二条路,通过类对象中的getClass()方法来获取。<code>Class c = demo.getClass();</code></li>\n<li>第三条路,通过Class类中的静态方法forName()来获取，此种形式属于动态加载，在代码中我们无法判定正确与否，只有在运行时才能检测出该类是否存在，调用是否正确。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里传入的是全路径，包名路径要写全。</span></span><br><span class=\"line\">    c = Class.forName(<span class=\"string\">&quot;Reflect.Demo&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态加载和动态加载\">静态加载和动态加载<a title=\"#静态加载和动态加载\" href=\"#静态加载和动态加载\"></a></h3>\n<p>编译时刻的加载属于静态加载，运行时刻的加载属于动态加载。平时我们采用new创建的对象都是静态加载类，在编译时候就要进行加载，所以只要有一个对象不存在或者方法错误，则其他的对象也都无法加载了，编译就不能通过。而动态加载常常用于在保证整体框架完善编译能够通过，至于我们添加的参数如何也就只能在运行时才能检测出来，一句话：能通过的都过，不能通过的报出来。</p>\n<h3 id=\"获取相关类的对象\">获取相关类的对象<a title=\"#获取相关类的对象\" href=\"#获取相关类的对象\"></a></h3>\n<p>通过Class类的实例（Demo类的类类型）来获取Demo类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo demo  = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里要进行强转一下，并且也要进行一些异常处理。</span></span><br><span class=\"line\">    demo = (Demo)c.newInstance();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (InstantiationException e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">    e1.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IllegalAccessException e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">    e1.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是，通过newInstance()调用的是该类的无参构造方法，假如该类中仅仅写有参构造方法，那么默认的无参构造方法将会被覆盖，所以这段代码也就无法运行下去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.InstantiationException: Demo </span><br><span class=\"line\">at java.lang.Class.newInstance(Unknown Source) </span><br><span class=\"line\">at Demo.main(Demo.java:<span class=\"number\">8</span>) </span><br></pre></td></tr></table></figure>\n<p>所以我们平时写一个类的时候，如果预计到将来这个可能类要被反射获取，最好在该类中写一个无参构造方法。</p>\n<h2 id=\"小栗子\">小栗子<a title=\"#小栗子\" href=\"#小栗子\"></a></h2>\n<h3 id=\"【栗1】通过一个对象获得完整的包名和类名\">【栗1】通过一个对象获得完整的包名和类名<a title=\"#【栗1】通过一个对象获得完整的包名和类名\" href=\"#【栗1】通过一个对象获得完整的包名和类名\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Test test =<span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">        Class&lt;?&gt; c = test.getClass();</span><br><span class=\"line\">        System.out.println(c.getName());  <span class=\"comment\">//获取包含完整路径的类的名称</span></span><br><span class=\"line\">        System.out.println(c.getSimpleName()); <span class=\"comment\">//获取不包含包名的类的名称</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.reflect.Test </span><br><span class=\"line\">Test</span><br></pre></td></tr></table></figure>\n<h3 id=\"【栗2】实例化class类对象\">【栗2】实例化Class类对象<a title=\"#【栗2】实例化class类对象\" href=\"#【栗2】实例化class类对象\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </span><br><span class=\"line\">        Class&lt;?&gt; c1=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Class&lt;?&gt; c2=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Class&lt;?&gt; c3=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里采用包名加类名（全路径写法）</span></span><br><span class=\"line\">            c1=Class.forName(<span class=\"string\">&quot;com.reflect.Test&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c2=<span class=\"keyword\">new</span> Test().getClass();</span><br><span class=\"line\">        c3=Test.class;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类名称   &quot;</span>+c1.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类名称   &quot;</span>+c2.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类名称   &quot;</span>+c3.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名称 com.reflect.Test </span><br><span class=\"line\">类名称 com.reflect.Test </span><br><span class=\"line\">类名称 com.reflect.Test</span><br></pre></td></tr></table></figure>\n<h3 id=\"【栗3】通过class实例化其他类的对象\">【栗3】通过Class实例化其他类的对象<a title=\"#【栗3】通过class实例化其他类的对象\" href=\"#【栗3】通过class实例化其他类的对象\"></a></h3>\n<p>通过无参构造实例化对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[&quot;</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">&quot;  &quot;</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            c = Class.forName(<span class=\"string\">&quot;com.reflect.Person&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Person per = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            per = (Person) c.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        per.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        per.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">        System.out.print(per);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[张三 <span class=\"number\">18</span>] </span><br></pre></td></tr></table></figure>\n<p>但是注意一下，当我们把Person中的默认的无参构造函数取消的时候，比如自己定义只定义一个有参数的构造函数之后，会出现错误。<br>\n比如我定义了一个构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后继续运行上面的程序，会出现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.InstantiationException: com.reflect.Person</span><br><span class=\"line\">    at java.lang.Class.newInstance(Unknown Source)</span><br><span class=\"line\">    at com.reflect.Test.main(Test.java:<span class=\"number\">16</span>)</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class=\"line\">    at com.reflect.Test.main(Test.java:<span class=\"number\">25</span>)</span><br></pre></td></tr></table></figure>\n<p>所以大家以后再编写使用Class实例化其他类的对象的时候，一定要自己定义无参的构造函数</p>\n<h3 id=\"【栗4】获取某个类的全部构造函数，并根据这些构造函数实例化该类的一个对象\">【栗4】获取某个类的全部构造函数，并根据这些构造函数实例化该类的一个对象<a title=\"#【栗4】获取某个类的全部构造函数，并根据这些构造函数实例化该类的一个对象\" href=\"#【栗4】获取某个类的全部构造函数，并根据这些构造函数实例化该类的一个对象\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[&quot;</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">&quot;  &quot;</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            c = Class.forName(<span class=\"string\">&quot;com.reflect.Person&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e1) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Person per1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Person per2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Person per3 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Person per4 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 取得全部的构造函数</span></span><br><span class=\"line\">        Constructor&lt;?&gt;[] cons = c.getConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cons.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;cons[&quot;</span> + i + <span class=\"string\">&quot;] : &quot;</span>+cons[i]);</span><br><span class=\"line\">            <span class=\"comment\">//获取每个构造函数的相关参数类型</span></span><br><span class=\"line\">            Class&lt;?&gt; clazzs[] = cons[i].getParameterTypes();</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;该构造函数的参数类型有: (&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; clazzs.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j == clazzs.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">                    System.out.print(clazzs[j].getName());</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    System.out.print(clazzs[j].getName() + <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 这里需注意：一定要先把所有构造函数获取到，然后根据获取的构造函数进行对号入座正确的去根据特定的构造函数进行实例化对象。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            per1 = (Person) cons[<span class=\"number\">3</span>].newInstance();</span><br><span class=\"line\">            per2 = (Person) cons[<span class=\"number\">2</span>].newInstance(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">            per3 = (Person) cons[<span class=\"number\">1</span>].newInstance(<span class=\"number\">18</span>);</span><br><span class=\"line\">            per4 = (Person) cons[<span class=\"number\">0</span>].newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(per1);</span><br><span class=\"line\">        System.out.println(per2);</span><br><span class=\"line\">        System.out.println(per3);</span><br><span class=\"line\">        System.out.println(per4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cons[<span class=\"number\">0</span>] : <span class=\"keyword\">public</span> com.reflect.Person(java.lang.String,<span class=\"keyword\">int</span>) </span><br><span class=\"line\">该构造函数的参数类型有: (java.lang.String,<span class=\"keyword\">int</span>) </span><br><span class=\"line\">cons[<span class=\"number\">1</span>] : <span class=\"keyword\">public</span> com.reflect.Person(<span class=\"keyword\">int</span>) </span><br><span class=\"line\">该构造函数的参数类型有: (<span class=\"keyword\">int</span>) </span><br><span class=\"line\">cons[<span class=\"number\">2</span>] : <span class=\"keyword\">public</span> com.reflect.Person(java.lang.String) </span><br><span class=\"line\">该构造函数的参数类型有: (java.lang.String) </span><br><span class=\"line\">cons[<span class=\"number\">3</span>] : <span class=\"keyword\">public</span> com.reflect.Person() </span><br><span class=\"line\">该构造函数的参数类型有: () </span><br><span class=\"line\">[<span class=\"keyword\">null</span> <span class=\"number\">0</span>] </span><br><span class=\"line\">[张三 <span class=\"number\">0</span>] </span><br><span class=\"line\">[<span class=\"keyword\">null</span> <span class=\"number\">18</span>] </span><br><span class=\"line\">[张三 <span class=\"number\">18</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"【栗5】-返回某个类的父类和实现的接口：\">【栗5】 返回某个类的父类和实现的接口：<a title=\"#【栗5】-返回某个类的父类和实现的接口：\" href=\"#【栗5】-返回某个类的父类和实现的接口：\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISay</span> </span>&#123;</span><br><span class=\"line\">    String name = <span class=\"string\">&quot;xinrun&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayAge</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISay</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            c = Class.forName(<span class=\"string\">&quot;com.reflect.Test&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; superClass = c.getSuperclass();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Test类的父类是：&quot;</span>+superClass.getName());</span><br><span class=\"line\">        <span class=\"comment\">// 获取该类中实现的所有接口</span></span><br><span class=\"line\">        Class&lt;?&gt; intes[] = c.getInterfaces();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Test类中实现的所有接口有：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; intes.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(intes[i].getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test类的父类是：java.lang.Object </span><br><span class=\"line\">Test类中实现的所有接口有： </span><br><span class=\"line\">com.reflect.ISay</span><br></pre></td></tr></table></figure>\n<h3 id=\"【栗6】获取某个类的全部属性以及本类和父类的公有属性\">【栗6】获取某个类的全部属性以及本类和父类的公有属性<a title=\"#【栗6】获取某个类的全部属性以及本类和父类的公有属性\" href=\"#【栗6】获取某个类的全部属性以及本类和父类的公有属性\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String baseName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> baseAge;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String testName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> testAge;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            c = Class.forName(<span class=\"string\">&quot;com.reflect.Test&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==========获取本类的全部属性==========&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//仅获取本类的全部属性</span></span><br><span class=\"line\">        Field[] field = c.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; field.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取属性权限修饰符</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> mo = field[i].getModifiers();  <span class=\"comment\">//每种修饰符都有特定的编号，然后根据编号得到修饰符的名字。</span></span><br><span class=\"line\">            String priv = Modifier.toString(mo);</span><br><span class=\"line\">            <span class=\"comment\">// 获取属性类型</span></span><br><span class=\"line\">            Class&lt;?&gt; type = field[i].getType();</span><br><span class=\"line\">            System.out.println(priv + <span class=\"string\">&quot; &quot;</span> + type.getName() + <span class=\"string\">&quot; &quot;</span> + field[i].getName() + <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==========获取本类和父类的公有属性==========&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取本类和父类的公有属性（public）</span></span><br><span class=\"line\">        Field[] field1 = c.getFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; field1.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取属性权限修饰符</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> mo = field1[i].getModifiers();</span><br><span class=\"line\">            String priv = Modifier.toString(mo);</span><br><span class=\"line\">            <span class=\"comment\">// 获取属性类型</span></span><br><span class=\"line\">            Class&lt;?&gt; type = field1[i].getType();</span><br><span class=\"line\">            System.out.println(priv + <span class=\"string\">&quot; &quot;</span> + type.getName() + <span class=\"string\">&quot; &quot;</span> + field1[i].getName() + <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==========获取本类的全部属性========== </span><br><span class=\"line\"><span class=\"keyword\">public</span> java.lang.String testName; </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> testAge; </span><br><span class=\"line\">==========获取本类和父类的公有属性========== </span><br><span class=\"line\"><span class=\"keyword\">public</span> java.lang.String testName; </span><br><span class=\"line\"><span class=\"keyword\">public</span> java.lang.String baseName;</span><br></pre></td></tr></table></figure>\n<h3 id=\"【栗7】通过反射操作属性\">【栗7】通过反射操作属性<a title=\"#【栗7】通过反射操作属性\" href=\"#【栗7】通过反射操作属性\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String baseName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> baseAge;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> <span class=\"title\">aseClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String testName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> testAge;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = Class.forName(<span class=\"string\">&quot;com.reflect.BaseClass&quot;</span>);</span><br><span class=\"line\">        Object obj = c.newInstance();  </span><br><span class=\"line\">        Field field = c.getDeclaredField(<span class=\"string\">&quot;baseAge&quot;</span>);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>); <span class=\"comment\">// 因BaseClass中的baseAge属性是私有的，所以必须对其“解锁”才能操作，公有属性就无关紧要了</span></span><br><span class=\"line\">        field.set(obj, <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;baseAge的值是： &quot;</span>+field.get(obj));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">baseAge的值是： 1 </span><br></pre></td></tr></table></figure>\n<p>这里需注意一定要事先搞清楚该属性是什么类型才可赋值。</p>\n<h3 id=\"【栗8】获取某个类的和父类的公有方法以及方法所抛出的异常\">【栗8】获取某个类的和父类的公有方法以及方法所抛出的异常<a title=\"#【栗8】获取某个类的和父类的公有方法以及方法所抛出的异常\" href=\"#【栗8】获取某个类的和父类的公有方法以及方法所抛出的异常\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String baseName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> baseAge;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">basePrivateTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是BaseClass的私有方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basePublicTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是BaseClass的无参公有方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basePublicTest</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是BaseClass的含参公有方法,名字是：&quot;</span>+name+<span class=\"string\">&quot;，年龄是：&quot;</span>+age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String testName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> testAge;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = Class.forName(<span class=\"string\">&quot;com.reflect.BaseClass&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//获取该类以及父类的所有公有方法</span></span><br><span class=\"line\">        Method[] methods = c.getMethods();  </span><br><span class=\"line\">        <span class=\"comment\">//获取该类的所有方法</span></span><br><span class=\"line\">        <span class=\"comment\">//Method[] methods = c.getDeclaredMethods(); </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; returnType = methods[i].getReturnType();</span><br><span class=\"line\">            Class&lt;?&gt; para[] = methods[i].getParameterTypes();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = methods[i].getModifiers();</span><br><span class=\"line\">            System.out.print(Modifier.toString(temp) + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            System.out.print(returnType.getName() + <span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            System.out.print(methods[i].getName() + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;(&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; para.length; ++j) &#123;</span><br><span class=\"line\">                System.out.print(para[j].getName() + <span class=\"string\">&quot; &quot;</span> + <span class=\"string\">&quot;arg&quot;</span> + j);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j &lt; para.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取该方法的所有异常类</span></span><br><span class=\"line\">            Class&lt;?&gt; exce[] = methods[i].getExceptionTypes();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (exce.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;) throws &quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; exce.length; ++k) &#123;</span><br><span class=\"line\">                    System.out.print(exce[k].getName() + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (k &lt; exce.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basePublicTest</span> <span class=\"params\">(java.lang.String arg0,<span class=\"keyword\">int</span> arg1)</span> <span class=\"keyword\">throws</span> java.lang.Exception </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basePublicTest</span> <span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span> <span class=\"params\">(<span class=\"keyword\">long</span> arg0)</span> <span class=\"keyword\">throws</span> java.lang.InterruptedException </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span> <span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.lang.InterruptedException </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span> <span class=\"params\">(<span class=\"keyword\">long</span> arg0,<span class=\"keyword\">int</span> arg1)</span> <span class=\"keyword\">throws</span> java.lang.InterruptedException </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> java.lang.Class <span class=\"title\">getClass</span> <span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span> <span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span> <span class=\"params\">(java.lang.Object arg0)</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> java.lang.String <span class=\"title\">toString</span> <span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyAll</span> <span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notify</span> <span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"【栗9】调用其他类的方法\">【栗9】调用其他类的方法<a title=\"#【栗9】调用其他类的方法\" href=\"#【栗9】调用其他类的方法\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String testName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> testAge;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = Class.forName(<span class=\"string\">&quot;com.reflect.BaseClass&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//调用BaseClass中的无参方法</span></span><br><span class=\"line\">        Method method = c.getMethod(<span class=\"string\">&quot;basePublicTest&quot;</span>);</span><br><span class=\"line\">        method.invoke(c.newInstance());</span><br><span class=\"line\">        <span class=\"comment\">//调用BaseClass中的有参方法</span></span><br><span class=\"line\">        Method method1 = c.getMethod(<span class=\"string\">&quot;basePublicTest&quot;</span>, String.class, <span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">        method1.invoke(c.newInstance(), <span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是BaseClass的无参共有方法 </span><br><span class=\"line\">这是BaseClass的含参共有方法,名字是：张三，年龄是：<span class=\"number\">18</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"【栗10】通过反射取得并修改数组的信息和数组大小\">【栗10】通过反射取得并修改数组的信息和数组大小<a title=\"#【栗10】通过反射取得并修改数组的信息和数组大小\" href=\"#【栗10】通过反射取得并修改数组的信息和数组大小\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;======================获取数组信息===========&quot;</span>);</span><br><span class=\"line\">        Class&lt;?&gt; ctC = temp.getClass().getComponentType();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;数组类型： &quot;</span> + ctC.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;数组长度  &quot;</span> + Array.getLength(temp));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;数组的第一个元素: &quot;</span> + Array.get(temp, <span class=\"number\">0</span>));</span><br><span class=\"line\">        Array.set(temp, <span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;修改之后数组第一个元素为： &quot;</span> + Array.get(temp, <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=======================扩大数组长度===========&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] newTemp = (<span class=\"keyword\">int</span>[]) arrayInc(temp, <span class=\"number\">15</span>);</span><br><span class=\"line\">        print(newTemp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 修改数组大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">arrayInc</span><span class=\"params\">(Object obj, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; arr = obj.getClass().getComponentType();</span><br><span class=\"line\">        Object newArr = Array.newInstance(arr, len);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> co = Array.getLength(obj);</span><br><span class=\"line\">        System.arraycopy(obj, <span class=\"number\">0</span>, newArr, <span class=\"number\">0</span>, co);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印新数组</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = obj.getClass();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!c.isArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;扩展后的数组长度为： &quot;</span> + Array.getLength(obj));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;扩展后的数组为：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Array.getLength(obj); i++) &#123;</span><br><span class=\"line\">            System.out.print(Array.get(obj, i) + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================获取数组信息=========== </span><br><span class=\"line\">数组类型： <span class=\"keyword\">int</span> </span><br><span class=\"line\">数组长度 <span class=\"number\">5</span> </span><br><span class=\"line\">数组的第一个元素: <span class=\"number\">0</span> </span><br><span class=\"line\">修改之后数组第一个元素为： <span class=\"number\">100</span> </span><br><span class=\"line\">=======================扩大数组长度=========== </span><br><span class=\"line\">扩展后的数组长度为： <span class=\"number\">15</span> </span><br><span class=\"line\">扩展后的数组为： </span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"【栗11】动态代理\">【栗11】动态代理<a title=\"#【栗11】动态代理\" href=\"#【栗11】动态代理\"></a></h3>\n<p>首先来看看如何获得类加载器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类加载器是：&quot;</span>+test.getClass().getClassLoader().getClass().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类加载器是：sun.misc.Launcher$AppClassLoader</span><br></pre></td></tr></table></figure>\n<p>在java中有四类加载器：<br>\n1） Bootstrap ClassLoader 负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类。<br>\n2） Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\\lib\\ext目录中的类。<br>\n3） AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。<br>\n4） Custom ClassLoader 属于应用程序根据自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader。</p>\n<p>这一块涉及到JVM的执行和类的生命周期以及类的加载过程，后续专门详细总结一下。</p>\n<p>代理是java设计模式中的一种，分为静态代理和动态代理。什么是代理？给大家举个例子：<br>\n一个人想要告状，他只知道他要告谁，需要准备的文件有哪些，可是他没有经验，为了保证告状赢的成功率他只好找一个律师帮着他告，这个律师除了说出告状者的心声而且还在公堂之上激情四射把自己的毕生所学发挥的淋漓尽致，这些是告状者不具备的。整个告状的过程是律师帮着告，告状人只是为律师提供相关材料和证据。这就是代理。</p>\n<p>静态代理和动态代理的最根本的区别就是静态代理的代理者必须事先明确，而动态代理则是事先不确定代理者可运行时再传入。<br>\n动态代理要先设置一个动态代理处理器并实现InvocationHandler接口，进而在内部得到一个动态代理的方法。用的时候先拿到代理者实例，再调用动态代理方法，整个动态代理过程如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ppackage com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被代理者和代理者所需要实现的接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISay</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被代理者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISay</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;名字叫&quot;</span> + name + <span class=\"string\">&quot;,年龄&quot;</span> + age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 控制动态代理的处理器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object object = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取代理者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">bind</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到被代理者实例</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.object = object;</span><br><span class=\"line\">        <span class=\"comment\">//根据被代理者返回动态代理类实例，第一个参数是指定类加载器，第二个参数是指定代理类需要实现的一系列接口，第三个参数是控制动态代理的处理器本身实例</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(),<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *代理者需要实现的代理方法 </span></span><br><span class=\"line\"><span class=\"comment\">     *参数一：代理者实例（上边bind方法返回的）；</span></span><br><span class=\"line\"><span class=\"comment\">     *参数二：被代理者调用的方法对象</span></span><br><span class=\"line\"><span class=\"comment\">     *参数三：被代理者传入的相关参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理人说出了这个人的信息：&quot;</span>);</span><br><span class=\"line\">        method.invoke(<span class=\"keyword\">this</span>.object, args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        MyInvocationHandler invocationHandler = <span class=\"keyword\">new</span> MyInvocationHandler(); </span><br><span class=\"line\">        ISay personProxy = (ISay) invocationHandler.bind(<span class=\"keyword\">new</span> Person());</span><br><span class=\"line\">        personProxy.say(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代理人说出了这个人的信息： </span><br><span class=\"line\">名字叫张三,年龄<span class=\"number\">18</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"【栗12】工厂模式\">【栗12】工厂模式<a title=\"#【栗12】工厂模式\" href=\"#【栗12】工厂模式\"></a></h3>\n<p>工厂模式也是常用的一种设计模式，从字面意思就能差不多明白其原理了，工厂模式就是根据一些特定条件生产出一些”相同功能”的产品来供使用者去选择。<br>\n下面就以选择某个地图导航为例阐述工厂模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 导航定位接口内含一个定位功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">location</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 磨具1：百度导航定位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Baidu</span> <span class=\"keyword\">implements</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">location</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是百度，地图牛逼，已确定您的位置。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 磨具2：高德导航定位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gaode</span> <span class=\"keyword\">implements</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">location</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是高德，定位准确，已确定您的位置。&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂，根据特定条件或者标示生产不同磨具的产品</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> INavigation <span class=\"title\">getInstance</span><span class=\"params\">(String navigationName)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;选择&quot;</span>+navigationName);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;工厂寻找磨具，准备生产...&quot;</span>);</span><br><span class=\"line\">        INavigation navigation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;Baidu&quot;</span>.equals(navigationName)) &#123;</span><br><span class=\"line\">            navigation = <span class=\"keyword\">new</span> Baidu();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;Gaode&quot;</span>.equals(navigationName)) &#123;</span><br><span class=\"line\">            navigation = <span class=\"keyword\">new</span> Gaode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> navigation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        INavigation navigation = Factory.getInstance(<span class=\"string\">&quot;Baidu&quot;</span>);</span><br><span class=\"line\">        navigation.location();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择Baidu </span><br><span class=\"line\">工厂寻找磨具，准备生产… </span><br><span class=\"line\">我是百度，地图牛逼，已确定您的位置。</span><br></pre></td></tr></table></figure>\n<p>这种写法有个弊端：当我们在添加一个子类的时候，就需要修改工厂类了。如果我们添加太多的子类的时候，改的就会很多。<br>\n稍微修改一下利用反射来实现工厂模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 导航定位接口内含一个定位功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">location</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 磨具1：百度导航定位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Baidu</span> <span class=\"keyword\">implements</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">location</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是百度，地图牛逼，已确定您的位置。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 磨具2：高德导航定位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gaode</span> <span class=\"keyword\">implements</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">location</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是高德，定位准确，已确定您的位置。&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂，根据特定条件或者标示生产不同磨具的产品</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> INavigation <span class=\"title\">getInstance</span><span class=\"params\">(String navigationName)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;选择&quot;</span>+navigationName);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;工厂寻找磨具，准备生产...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        INavigation navigation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            navigation = (INavigation) Class.forName(navigationName).newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> navigation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        INavigation navigation = Factory.getInstance(<span class=\"string\">&quot;com.reflect.Baidu&quot;</span>);</span><br><span class=\"line\">        navigation.location();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择com.reflect.Baidu </span><br><span class=\"line\">工厂寻找磨具，准备生产… </span><br><span class=\"line\">我是百度，地图牛逼，已确定您的位置。</span><br></pre></td></tr></table></figure>\n<p>这样我们添加任意多个子类的时候工厂类就不需要修改了。但是这里又有一个弊端了：虽然可以通过反射取得接口的实例，但是需要传入完整的包和类名。而且用户也无法知道一个接口有多少个可以使用的子类。</p>\n<p>所以我们可以通过属性文件的形式配置所需要的子类，首先在本地创建一个配置文件navigation.properties，内容是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gaode&#x3D;com.reflect.Gaode</span><br><span class=\"line\">Baidu&#x3D;com.reflect.Baidu</span><br></pre></td></tr></table></figure>\n<p>下面是结合属性文件的工厂模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 导航定位接口内含一个定位功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">location</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 磨具1：百度导航定位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Baidu</span> <span class=\"keyword\">implements</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">location</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是百度，地图牛逼，已确定您的位置。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 磨具2：高德导航定位</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gaode</span> <span class=\"keyword\">implements</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">location</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是高德，定位准确，已确定您的位置。&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂，根据特定条件或者标示生产不同磨具的产品</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> INavigation <span class=\"title\">getInstance</span><span class=\"params\">(String navigationName)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;选择&quot;</span>+navigationName);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;工厂寻找磨具，准备生产...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        INavigation navigation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            navigation = (INavigation) Class.forName(navigationName).newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> navigation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException</span>&#123;</span><br><span class=\"line\">        Properties pro=<span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        File f=<span class=\"keyword\">new</span> File(<span class=\"string\">&quot;navigation.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f.exists())&#123;</span><br><span class=\"line\">            pro.load(<span class=\"keyword\">new</span> FileInputStream(f));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            pro.setProperty(<span class=\"string\">&quot;Baidu&quot;</span>, <span class=\"string\">&quot;com.reflect.Baidu&quot;</span>);</span><br><span class=\"line\">            pro.setProperty(<span class=\"string\">&quot;Gaode&quot;</span>, <span class=\"string\">&quot;com.reflect.Gaode&quot;</span>);</span><br><span class=\"line\">            pro.store(<span class=\"keyword\">new</span> FileOutputStream(f), <span class=\"string\">&quot;NAVIGATION CLASS&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        INavigation navigation = Factory.getInstance(pro.getProperty(<span class=\"string\">&quot;Baidu&quot;</span>));</span><br><span class=\"line\">        navigation.location();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【运行结果】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择com.reflect.Baidu </span><br><span class=\"line\">工厂寻找磨具，准备生产… </span><br><span class=\"line\">我是百度，地图牛逼，已确定您的位置。</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\">最后<a title=\"#最后\" href=\"#最后\"></a></h2>\n<p>总结至此，从上到下算是对java反射有一个清晰的认识，要明白反射最好还是要先弄清类的加载过程，这里仅仅阐述了其使用的方法，所涉及的知识还需慢慢深入，共勉。</p>\n","prev":{"title":"Android开发图片缓存框架Glide的总结","link":"posts/1480508516"},"next":{"title":"Android开发之WebView详细总结","link":"posts/1476191895"},"plink":"https://blog.ixin.run/posts/1479635474/","toc":[{"id":"定义","title":"定义","index":"1"},{"id":"功能","title":"功能","index":"2"},{"id":"class类的使用","title":"Class类的使用","index":"3","children":[{"id":"class类是什么？","title":"Class类是什么？","index":"3.1"},{"id":"如何得到class的实例对象？","title":"如何得到Class的实例对象？","index":"3.2"},{"id":"静态加载和动态加载","title":"静态加载和动态加载","index":"3.3"},{"id":"获取相关类的对象","title":"获取相关类的对象","index":"3.4"}]},{"id":"小栗子","title":"小栗子","index":"4","children":[{"id":"【栗1】通过一个对象获得完整的包名和类名","title":"【栗1】通过一个对象获得完整的包名和类名","index":"4.1"},{"id":"【栗2】实例化class类对象","title":"【栗2】实例化Class类对象","index":"4.2"},{"id":"【栗3】通过class实例化其他类的对象","title":"【栗3】通过Class实例化其他类的对象","index":"4.3"},{"id":"【栗4】获取某个类的全部构造函数，并根据这些构造函数实例化该类的一个对象","title":"【栗4】获取某个类的全部构造函数，并根据这些构造函数实例化该类的一个对象","index":"4.4"},{"id":"【栗5】-返回某个类的父类和实现的接口：","title":"【栗5】 返回某个类的父类和实现的接口：","index":"4.5"},{"id":"【栗6】获取某个类的全部属性以及本类和父类的公有属性","title":"【栗6】获取某个类的全部属性以及本类和父类的公有属性","index":"4.6"},{"id":"【栗7】通过反射操作属性","title":"【栗7】通过反射操作属性","index":"4.7"},{"id":"【栗8】获取某个类的和父类的公有方法以及方法所抛出的异常","title":"【栗8】获取某个类的和父类的公有方法以及方法所抛出的异常","index":"4.8"},{"id":"【栗9】调用其他类的方法","title":"【栗9】调用其他类的方法","index":"4.9"},{"id":"【栗10】通过反射取得并修改数组的信息和数组大小","title":"【栗10】通过反射取得并修改数组的信息和数组大小","index":"4.10"},{"id":"【栗11】动态代理","title":"【栗11】动态代理","index":"4.11"},{"id":"【栗12】工厂模式","title":"【栗12】工厂模式","index":"4.12"}]},{"id":"最后","title":"最后","index":"5"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1479635474/\" title=\"Java反射你知道多少\">https://blog.ixin.run/posts/1479635474/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}