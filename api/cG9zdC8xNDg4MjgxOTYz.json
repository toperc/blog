{"title":"Android架构MVC、MVP和MVVM的区别","date":"2017-02-28T11:39:23.000Z","date_formatted":{"ll":"2017年2月28日","L":"2017/02/28","MM-DD":"02-28"},"link":"post/1488281963","comments":true,"tags":["系统架构"],"categories":["Android"],"updated":"2021-01-14T08:08:54.897Z","content":"<p>Android比较流行的应用架构目前有3种形式：MVC、MVP、MVVM。MVC是最古老的用法，但是随着业务的拓展，框架冗余度也相应变大，以至于到最后不容易维护，近些年逐渐被MVP和MVVM所代替。以下仅仅针对这三种进行图示说明，便于更清楚的理解。</p>\n<a id=\"more\"></a>\n<h2 id=\"mvc:\">MVC:<a title=\"#mvc:\" href=\"#mvc:\"></a></h2>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/FE9E41C63FFD4132AD3F33E52F0F5524?method=download&amp;shareKey=d29d5e04fb2cb3f4891323728708d49f\" alt=\"\"><br>\n<strong>M</strong>：所有和数据获取相关的，例如网络请求、实体类等。<br>\n<strong>V</strong>：XML相关的Layout布局。<br>\n<strong>C</strong>：Activity和Fragment这里作为控制层。</p>\n<p>过程：控制层（Controller）根据Id拿到View中的相关布局，然后与Model沟通获取相关数据，最后将数据关联到View中。控制层（Controller）同样也可以根据View的相关指令，然后去改变Model中数据，供其他地方所使用。<br>\n亲近关系：Controller和Model、Controller和View。<br>\n弊端：Controller最为控制层耦合Model和View很严重，大型项目团队处理问题费时费力。</p>\n<h2 id=\"mvp:\">MVP:<a title=\"#mvp:\" href=\"#mvp:\"></a></h2>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/52A4DBE3C775462685FD4BFDCB276706?method=download&amp;shareKey=43a438aef6ff05adca1132beb500e4ca\" alt=\"\"><br>\n<strong>M</strong>：所有和数据获取相关的，例如网络请求、实体类等。<br>\n<strong>V</strong>：Activity、Fragment以及XML相关的Layout布局。<br>\n<strong>P</strong>：实现数据获取或改变并通过接口以及回调给View显示这样的中间层。</p>\n<p>过程：View拿到Presenter并实现Presenter中的相关接口，Presenter触发Model进行数据的获取或处理并通过接口回调给View进行界面显示。<br>\n亲近关系：Presenter和Model。</p>\n<h2 id=\"mvvm:\">MVVM:<a title=\"#mvvm:\" href=\"#mvvm:\"></a></h2>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/780EFA12731344DBA8BB24837B0FCB64?method=download&amp;shareKey=95a99d0d08ccba0917ce5a8f21fb89de\" alt=\"\"><br>\n<strong>M</strong>：所有和数据获取和传递相关的，例如网络请求等。<br>\n<strong>V</strong>：Activity、Fragment以及XML相关的Layout布局。<br>\n<strong>VM</strong>：就是实体类Bean。</p>\n<p>过程：V和VM进行数据绑定，Model进行数据获取改变VM数据从而影响View的显示，View的主动触发也能够改变VM数据从而也能让Model进行处理。<br>\n亲近关系：View和ViewModel。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"http://blog.csdn.net/jdsjlzx/article/details/51174396\">http://blog.csdn.net/jdsjlzx/article/details/51174396</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html\">http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html</a></li>\n</ul>\n","prev":{"title":"Fragment实现懒加载之setUserVisibleHint探究","link":"post/1501243141"},"next":{"title":"Java注解小记","link":"post/1481852082"},"plink":"https://blog.ixin.run/post/1488281963/","toc":[{"id":"mvc:","title":"MVC:","index":"1"},{"id":"mvp:","title":"MVP:","index":"2"},{"id":"mvvm:","title":"MVVM:","index":"3"},{"id":"参考","title":"参考","index":"4"}],"reward":true,"copyright":{"custom":"转载请注明出处，谢谢支持。"}}