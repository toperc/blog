{"title":"LRU算法基本思路","date":"2019-10-21T12:54:17.000Z","date_formatted":{"ll":"2019年10月21日","L":"2019/10/21","MM-DD":"10-21"},"link":"post/1571663304","comments":true,"tags":["算法"],"categories":["数据结构和算法"],"updated":"2021-01-14T08:08:54.917Z","content":"<p>LRU（Least Recently Used），即最近最少使用淘汰法，它是按照一个非常注明的计算机操作系统基础理论得来的：<strong>最近使用的页面数据会在未来一段时期内仍然被使用,已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用</strong>。</p>\n<p>本文就带着大家徒手撸一个最基本的LRU算法。</p>\n<a id=\"more\"></a>\n<h2 id=\"实现过程\">实现过程<a title=\"#实现过程\" href=\"#实现过程\"></a></h2>\n<p>网上大部分对LRU算法的两个指标认为是时间和次数，最朴素的思想就是用数组+时间戳的方式来进行实现，不过这样做效率较低。其实在开发过程中普遍的做法是按照<strong>双向链表</strong>来实现的，其重要的两个指标是容量大小和位置，进而来决定淘汰规则。</p>\n<p>平时使用LRU算法常见的几个操作有：定义容量大小、添加操作、获取操作、删除操作。其中的添加、获取、删除这三个操作都涉及到链表节点的上下关系重新定向。</p>\n<p>下边我们就根据这个思想来进行实现。</p>\n<h3 id=\"节点定义\">节点定义<a title=\"#节点定义\" href=\"#节点定义\"></a></h3>\n<p>LRU采用的是双链表形式，针对每一个节点都要有前一个结点和后一个节点的引用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//键</span></span><br><span class=\"line\">    Object key;</span><br><span class=\"line\">    <span class=\"comment\">//值</span></span><br><span class=\"line\">    Object value;</span><br><span class=\"line\">    <span class=\"comment\">//上一个节点</span></span><br><span class=\"line\">    Node pre;</span><br><span class=\"line\">    <span class=\"comment\">//下一个节点</span></span><br><span class=\"line\">    Node next;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Object key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"链表定义\">链表定义<a title=\"#链表定义\" href=\"#链表定义\"></a></h3>\n<p>前面也说了通常LRU的两个指标是容量和位置，因此LRU定义中还要定义最大容量、当前容量、和当前存放node节点的数据池。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRU</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> currentSize;<span class=\"comment\">//当前的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capcity;<span class=\"comment\">//总容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;K, Node&gt; caches;<span class=\"comment\">//所有的node节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node first;<span class=\"comment\">//头节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node last;<span class=\"comment\">//尾节点</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LRU</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        currentSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capcity = size;</span><br><span class=\"line\">        caches = <span class=\"keyword\">new</span> HashMap&lt;K, Node&gt;(size);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加操作\">添加操作<a title=\"#添加操作\" href=\"#添加操作\"></a></h3>\n<p>添加元素的时候首先判断是不是新的元素，如果是新元素，判断当前的大小是不是大于总容量了，防止超过总链表大小，如果大于的话直接抛弃最后一个节点，然后再以传入的key\\value值创建新的节点。对于已经存在的元素，直接覆盖旧值，再将该元素移动到头部，然后保存在map中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">      Node node = caches.get(key);</span><br><span class=\"line\">      <span class=\"comment\">//如果新元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//如果超过元素容纳量</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (caches.size() &gt;= capcity) &#123;</span><br><span class=\"line\">              <span class=\"comment\">//移除最后一个节点</span></span><br><span class=\"line\">              caches.remove(last.key);</span><br><span class=\"line\">              removeLast();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//创建新节点</span></span><br><span class=\"line\">          node = <span class=\"keyword\">new</span> Node(key,value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//已经存在的元素覆盖旧值</span></span><br><span class=\"line\">      node.value = value;</span><br><span class=\"line\">      <span class=\"comment\">//把元素移动到首部</span></span><br><span class=\"line\">      moveToHead(node);</span><br><span class=\"line\">      caches.put(key, node);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取操作\">获取操作<a title=\"#获取操作\" href=\"#获取操作\"></a></h3>\n<p>通过key值来访问元素，主要的做法就是先判断是否存在，如果是不存在的，直接返回null。如果存在，把数据移动到首部头节点，然后再返回旧值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过key获取元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">    Node node = caches.get(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//把访问的节点移动到首部</span></span><br><span class=\"line\">    moveToHead(node);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除操作\">删除操作<a title=\"#删除操作\" href=\"#删除操作\"></a></h3>\n<p>一个关键点是把删除的节点的前后节点关系相互绑定。额外要考虑到如果删除的是头部，关系怎么处理，如果删除的尾部关系又要怎么处理。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/F9FB2D304E8E49A0862D71C87D4C7CE0?method=download&amp;shareKey=05979f17d1a9ba75a5dbb956b6b97da4\" alt=\"删除节点\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据key移除节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">remove</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">    Node node = caches.get(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.pre != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            node.pre.next = node.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            node.next.pre = node.pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == first) &#123;</span><br><span class=\"line\">            first = node.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == last) &#123;</span><br><span class=\"line\">            last = node.pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> caches.remove(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"移动到头节点\">移动到头节点<a title=\"#移动到头节点\" href=\"#移动到头节点\"></a></h3>\n<p>上边的“添加”、“获取”、“删除”三种操作是最基本的，其中一旦拿到可用节点都要移动到头节点，这是一个重要环节，此时也是要处理这种前后节点的关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把当前节点移动到首部</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> node</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToHead</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first == node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        node.next.pre = node.pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.pre != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        node.pre.next = node.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == last) &#123;</span><br><span class=\"line\">        last = last.pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span> || last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        first = last = node;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.next = first;</span><br><span class=\"line\">    first.pre = node;</span><br><span class=\"line\">    first = node;</span><br><span class=\"line\">    first.pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除尾节点\">删除尾节点<a title=\"#删除尾节点\" href=\"#删除尾节点\"></a></h3>\n<p>添加过程中遇到队满的情况，就要有移除尾节点了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 移除最后一个节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        last = last.pre;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            first = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            last.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\">完整代码<a title=\"#完整代码\" href=\"#完整代码\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRU</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> currentSize;<span class=\"comment\">//当前的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capcity;<span class=\"comment\">//总容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;K, Node&gt; caches;<span class=\"comment\">//所有的node节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node first;<span class=\"comment\">//头节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node last;<span class=\"comment\">//尾节点</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LRU</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        currentSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capcity = size;</span><br><span class=\"line\">        caches = <span class=\"keyword\">new</span> HashMap&lt;K, Node&gt;(size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 放入元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">        Node node = caches.get(key);</span><br><span class=\"line\">        <span class=\"comment\">//如果新元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果超过元素容纳量</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (caches.size() &gt;= capcity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//移除最后一个节点</span></span><br><span class=\"line\">                caches.remove(last.key);</span><br><span class=\"line\">                removeLast();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//创建新节点</span></span><br><span class=\"line\">            node = <span class=\"keyword\">new</span> Node(key,value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//已经存在的元素覆盖旧值</span></span><br><span class=\"line\">        node.value = value;</span><br><span class=\"line\">        <span class=\"comment\">//把元素移动到首部</span></span><br><span class=\"line\">        moveToHead(node);</span><br><span class=\"line\">        caches.put(key, node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过key获取元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">        Node node = caches.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//把访问的节点移动到首部</span></span><br><span class=\"line\">        moveToHead(node);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据key移除节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">remove</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">        Node node = caches.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.pre != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                node.pre.next = node.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                node.next.pre = node.pre;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node == first) &#123;</span><br><span class=\"line\">                first = node.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node == last) &#123;</span><br><span class=\"line\">                last = node.pre;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> caches.remove(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 清除所有节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        first = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        caches.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 把当前节点移动到首部</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToHead</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            node.next.pre = node.pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.pre != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            node.pre.next = node.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == last) &#123;</span><br><span class=\"line\">            last = last.pre;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span> || last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            first = last = node;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.next = first;</span><br><span class=\"line\">        first.pre = node;</span><br><span class=\"line\">        first = node;</span><br><span class=\"line\">        first.pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除最后一个节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            last = last.pre;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                first = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                last.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Node node = first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            sb.append(String.format(<span class=\"string\">&quot;%s:%s &quot;</span>, node.key, node.value));</span><br><span class=\"line\">            node = node.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LRU&lt;Integer, String&gt; lru = <span class=\"keyword\">new</span> LRU&lt;Integer, String&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">        lru.put(<span class=\"number\">1</span>, <span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        lru.put(<span class=\"number\">2</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        lru.put(<span class=\"number\">3</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        lru.put(<span class=\"number\">4</span>,<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">        lru.put(<span class=\"number\">5</span>,<span class=\"string\">&quot;e&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;原始链表为:&quot;</span>+lru.toString());</span><br><span class=\"line\"> </span><br><span class=\"line\">        lru.get(<span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;获取key为4的元素之后的链表:&quot;</span>+lru.toString());</span><br><span class=\"line\"> </span><br><span class=\"line\">        lru.put(<span class=\"number\">6</span>,<span class=\"string\">&quot;f&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;新添加一个key为6之后的链表:&quot;</span>+lru.toString());</span><br><span class=\"line\"> </span><br><span class=\"line\">        lru.remove(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;移除key=3的之后的链表:&quot;</span>+lru.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>LRU算法，最近最少使用末位淘汰法，也是通用做法采用双向链表的形式来进行实现这一算法，链表内每个节点保留有该节点的前后关系，关键点就是获取后的节点重新置为首位，末尾节点有可能被“挤”掉，置换过程中处理好该节点与前后节点的关系即可。</p>\n<h2 id=\"彩蛋\">彩蛋<a title=\"#彩蛋\" href=\"#彩蛋\"></a></h2>\n<p>上边我们是徒手实现了一个双向链表，那么在Java中有没有一个现成的api来实现类似这种访问顺序的链表呢，其实Java中有一个LinkedHashMap，他有两种排序规则：普通插入排序和访问顺序排序。平时用的最多的是普通插入排序，如果LRU采用LinkedHashMap的访问顺序排序，那么实现起来就非常简单了，Android SDK中默认有LruCache的API，其内部思想就是采用这种方式。</p>\n","prev":{"title":"Git分支管理最佳实践","link":"post/1574177460"},"next":{"title":"Android媒体库你了解多少","link":"post/1571496871"},"plink":"https://blog.ixin.run/post/1571663304/","toc":[{"id":"实现过程","title":"实现过程","index":"1","children":[{"id":"节点定义","title":"节点定义","index":"1.1"},{"id":"链表定义","title":"链表定义","index":"1.2"},{"id":"添加操作","title":"添加操作","index":"1.3"},{"id":"获取操作","title":"获取操作","index":"1.4"},{"id":"删除操作","title":"删除操作","index":"1.5"},{"id":"移动到头节点","title":"移动到头节点","index":"1.6"},{"id":"删除尾节点","title":"删除尾节点","index":"1.7"},{"id":"完整代码","title":"完整代码","index":"1.8"}]},{"id":"总结","title":"总结","index":"2"},{"id":"彩蛋","title":"彩蛋","index":"3"}],"reward":true,"copyright":{"custom":"转载请注明出处，谢谢支持。"}}