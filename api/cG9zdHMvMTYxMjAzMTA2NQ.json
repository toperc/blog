{"title":"Android组件化全面掌握【转载】","date":"2021-01-30T18:23:07.000Z","date_formatted":{"ll":"2021年1月31日","L":"2021/01/31","MM-DD":"01-31"},"link":"posts/1612031065","comments":true,"tags":["Android","组件化"],"categories":["Android"],"updated":"2021-02-01T11:34:21.321Z","content":"<p>门店项目从我来公司的MVC都不是的模式到如今的组件化实现，服务着全国4千多家门店使用，中间开发过程也是摸索着不断学习不断调优，一直想写一篇项目重构到组件化的过程，前天偶然看到<code>鸿洋</code>大佬公众号转载的由<code>胡飞洋</code>写的一篇《“终于懂了” 系列：Android组件化，全面掌握！》这篇文章，与门店重构过程不谋而合，这里我就做一个拿来主义转载一下，记录一下相关的知识点。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>本文转载自<code>胡飞洋</code>同学的《“终于懂了” 系列：Android组件化，全面掌握！》，文章原文地址：<a href=\"https://juejin.cn/post/6881116198889586701\">https://juejin.cn/post/6881116198889586701</a></p>\n</blockquote>\n<h2 id=\"1-背景\">1 背景<a title=\"#1-背景\" href=\"#1-背景\"></a></h2>\n<p>随着项目逐渐扩展，业务功能越来越多，代码量越来越多，开发人员数量也越来越多。此过程中，你是否有过以下烦恼？</p>\n<ol>\n<li>项目模块多且复杂，编译一次要5分钟甚至10分钟？太慢不能忍？</li>\n<li>改了一行代码 或只调了一点UI，就要run整个项目，再忍受一次10分钟？</li>\n<li>合代码经常发生冲突？很烦？</li>\n<li>被人偷偷改了自己模块的代码？很不爽？</li>\n<li>做一个需求，发现还要去改动很多别人模块的代码？</li>\n<li>别的模块已实现的类似功能，自己要用只能去复制一份代码再改改？</li>\n<li>“这个不是我负责的，我不管”，代码责任范围不明确？</li>\n<li>只做了一个模块的功能，但改动点很多，所以要完整回归测试？</li>\n<li>做了个需求，但不知不觉导致其他模块出现bug？</li>\n</ol>\n<p>如果有这些烦恼，说明你的项目需要进行 组件化 了。</p>\n<blockquote>\n<p>上半年，我所在项目进行了大重构，也完成了组件化改造。所以终于学习实践了这样一个“高端知识”，也看了一些文章，于是就有了这篇文章来作为总结和分享~</p>\n</blockquote>\n<h2 id=\"2-组件化的理解\">2 组件化的理解<a title=\"#2-组件化的理解\" href=\"#2-组件化的理解\"></a></h2>\n<h3 id=\"2.1-模块化\">2.1 模块化<a title=\"#2.1-模块化\" href=\"#2.1-模块化\"></a></h3>\n<p>在介绍组件化之前，先说说模块化。我们知道在<code>Android Studio</code>中，新建工程默认有一个<code>App module</code>，然后还可以通过<code>File-&gt;New-&gt;New Module</code>新建module。那么这里的“module” 实际和我们说的“模块”基本是一个概念了。</p>\n<p>也就是说，原本一个App模块承载了所有的功能，而模块化就是拆分成多个模块放在不同的Module里面，每个功能的代码都在自己所属的 module 中添加。</p>\n<p>已京东为例，大致可以分为“首页”、“分类”、“发现”、“购物车”、“我的”、“商品详情” 六个模块。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/A46C3E7FCAB241588375066FDE042553?method=download&amp;shareKey=ec8ca014c16afc3746cc43cd295b0b71\" alt=\"模块化京东图示\" class=\"φcx\"></p>\n<p>项目结构如下：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/74E129FF776647828D57B127D7E80B29?method=download&amp;shareKey=77e2ceea5f7970adb94c0f6529740ec6\" alt=\"模块化京东项目结构\" class=\"φcx\"></p>\n<p>这是一般项目都会采用的结构。另外通常还会有一个通用基础模块<code>module_common</code>，提供<code>BaseActivity/BaseFragment</code>、图片加载、网络请求等基础能力，然后每个业务模块都会依赖这个基础模块。</p>\n<p>那么业务模块之间有没有依赖呢？很显然是有的。例如“首页”、“分类”、“发现”、“购物车”、“我的”，都是需要跳转到“商品详情”的，必然是依赖“商品详情”；而“商品详情”是需要能添加到“购物车”能力的；而“首页”点击搜索显然是“分类”中的搜索功能。所以这些模块之间存在复杂的依赖关系。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/0D889BE4B97D4206A9BB69A46062D94C?method=download&amp;shareKey=f9043bdb9fab22bde13c133ca9fcd8d9\" alt=\"模块间存在依赖\" class=\"φcx\"></p>\n<p>模块化 在各个业务功能比较独立的情况下是比较合理的，但多个模块中肯定会有页面跳转、数据传递、方法调用等情况，所以必然存在以上这种依赖关系，即模块间有着高耦合度。</p>\n<p>高耦合度加上代码量大，就极易出现上面提到的那些问题了，严重影响了团队的开发效率及质量。</p>\n<p>为了解决模块间的高耦合度问题，就要进行组件化了。</p>\n<h3 id=\"2.2-组件化介绍-—-优势及架构\">2.2 组件化介绍 — 优势及架构<a title=\"#2.2-组件化介绍-—-优势及架构\" href=\"#2.2-组件化介绍-—-优势及架构\"></a></h3>\n<p>组件化，去除模块间的耦合，使得每个业务模块可以独立当做App存在，对于其他模块没有直接的依赖关系。 此时业务模块就成为了业务组件。</p>\n<p>而除了业务组件，还有抽离出来的业务基础组件，是提供给业务组件使用，但不是独立的业务，例如分享组件、广告组件；还有基础组件，即单独的基础功能，与业务无关，例如 图片加载、网络请求等。这些后面会详细说明。</p>\n<p>组件化带来的好处 就显而易见了：</p>\n<ol>\n<li>加快编译速度：每个业务功能都是一个单独的工程，可独立编译运行，拆分后代码量较少，编译自然变快。</li>\n<li>提高协作效率：解耦使得组件之间彼此互不打扰，组件内部代码相关性极高。团队中每个人有自己的责任组件，不会影响其他组件；降低团队成员熟悉项目的成本，只需熟悉责任组件即可；对测试来说，只需重点测试改动的组件，而不是全盘回归测试。</li>\n<li>功能重用：组件 类似我们引用的第三方库，只需维护好每个组件，一建引用集成即可。业务组件可上可下，灵活多变；而基础组件，为新业务随时集成提供了基础，减少重复开发和维护工作量。</li>\n</ol>\n<p>下图是我们期望的组件化架构：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/B77DC253A41F47879691BBDE206D86FC?method=download&amp;shareKey=b7bf31b1e5653c4c41eb6a1cb368c375\" alt=\"组件化架构图示\" class=\"φcx\"></p>\n<ol>\n<li>组件依赖关系是上层依赖下层，修改频率是上层高于下层。</li>\n<li>基础组件是通用基础能力，修改频率极低，作为SDK可共公司所有项目集成使用。</li>\n<li>common组件，作为支撑业务组件、业务基础组件的基础（BaseActivity/BaseFragment等基础能力），同时依赖所有的基础组件，提供多数业务组件需要的基本功能，并且统一了基础组件的版本号。所以 业务组件、业务基础组件 所需的基础能力只需要依赖common组件即可获得。</li>\n<li>业务组件、业务基础组件，都依赖common组件。但业务组件之间不存在依赖关系，业务基础组件之间不存在依赖关系。而 业务组件 是依赖所需的业务基础组件的，例如几乎所有业务组件都会依赖广告组件 来展示Banner广告、弹窗广告等。</li>\n<li>最上层则是主工程，即所谓的“壳工程”，主要是集成所有的业务组件、提供Application唯一实现、gradle、manifest配置，整合成完备的App。</li>\n</ol>\n<h3 id=\"2.3-组件化开发的问题点\">2.3 组件化开发的问题点<a title=\"#2.3-组件化开发的问题点\" href=\"#2.3-组件化开发的问题点\"></a></h3>\n<p>我们了解了组件化的概念、优点及架构特点，那么要想实施组件化，首先要搞清楚 要解决问题点有哪些？</p>\n<p>核心问题是 业务组件去耦合。那么存在哪些耦合的情况呢？前面有提到过，页面跳转、方法调用、事件通知。而基础组件、业务基础组件，不存在耦合的问题，所以只需要抽离封装成库即可。所以针对业务组件有以下问题：</p>\n<ol>\n<li>业务组件，如何实现单独运行调试？</li>\n<li>业务组件间 没有依赖，如何实现页面的跳转？</li>\n<li>业务组件间 没有依赖，如何实现组件间通信/方法调用？</li>\n<li>业务组件间 没有依赖，如何获取fragment实例？</li>\n<li>业务组件不能反向依赖壳工程，如何获取Application实例、如何获取Application onCreate()回调（用于任务初始化）？</li>\n</ol>\n<p>下面就来看看如何解决这些问题。</p>\n<h2 id=\"3-组件独立调试\">3 组件独立调试<a title=\"#3-组件独立调试\" href=\"#3-组件独立调试\"></a></h2>\n<p>每个<code>业务组件</code>都是一个完整的整体，可以当做独立的App，需要满足单独运行及调试的要求，这样可以提升编译速度提高效率。</p>\n<p>如何做到组件独立调试呢？有两种方案：</p>\n<ol>\n<li>\n<p>单工程方案，组件以<code>module</code>形式存在，动态配置组件的工程类型；</p>\n</li>\n<li>\n<p>多工程方案，业务组件以<code>library module</code>形式存在于独立的工程，且只有这一个<code>library module</code>。</p>\n</li>\n</ol>\n<h3 id=\"3.1-单工程方案\">3.1 单工程方案<a title=\"#3.1-单工程方案\" href=\"#3.1-单工程方案\"></a></h3>\n<h4 id=\"3.1.1-动态配置组件工程类型\">3.1.1 动态配置组件工程类型<a title=\"#3.1.1-动态配置组件工程类型\" href=\"#3.1.1-动态配置组件工程类型\"></a></h4>\n<p>单工程模式，整个项目只有一个工程，它包含：<code>App module</code> 加上各个业务组件<code>module</code>，就是所有的代码，这就是单工程模式。如何做到组件单独调试呢？</p>\n<p>我们知道，在AndroidStudio开发Android项目时，使用的是Gradle 来构建，Android Gradle中提供了两种插件，在开发中可以通过配置不同的插件来配置不同的module类型。</p>\n<ul>\n<li>Application插件，id: <code>com.android.application</code></li>\n<li>Library插件，id: <code>com.android.library</code></li>\n</ul>\n<p>区别比较简单，Application插件来配置一个<code>Android App</code>工程，项目构建后输出一个APK安装包，Library插件来配置一个<code>Android Library</code>工程，构建后输出AAR包。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/F6D471E8E499432EAFFB2DFCF75B4F8B?method=download&amp;shareKey=bf6c95ef61568c5f89680eb11b59ee66\" alt=\"Application插件\" class=\"φcx\"></p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/E15356465FEC42B390FCB6CD04B5EA42?method=download&amp;shareKey=9663c63973beaedf7add18af8e4f3b59\" alt=\"Library插件\" class=\"φcx\"></p>\n<p>显然我们的 <code>App module</code>配置的就是Application插件，业务组件<code>module</code> 配置的是Library插件。想要实现业务组件的独立调试，这就需要把配置改为 Application插件；而独立开发调试完成后，又需要变回Library 插件进行集成调试。</p>\n<p>我们知道用AndroidStudio创建一个Android项目后，会在根目录中生成一个<code>gradle.properties</code>文件。在这个文件定义的常量，可以被任何一个build.gradle读取。</p>\n<p>所以我们可以在<code>gradle.properties</code>中定义一个常量值 <code>isModule</code>，true为即独立调试；false为集成调试。然后在业务组件的build.gradle中读取isModule，设置成对应的插件即可。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//gradle.properties</span></span><br><span class=\"line\">#组件独立调试开关, 每次更改值后要同步工程</span><br><span class=\"line\">isModule = <span class=\"keyword\">false</span></span><br><span class=\"line\">复制代码</span><br><span class=\"line\"><span class=\"comment\">//build.gradle</span></span><br><span class=\"line\"><span class=\"comment\">//注意gradle.properties中的数据类型都是String类型，使用其他数据类型需要自行转换</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isModule.toBoolean())&#123;</span><br><span class=\"line\">    apply plugin: <span class=\"string\">&#x27;com.android.application&#x27;</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    apply plugin: <span class=\"string\">&#x27;com.android.library&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3.1.2-动态配置applicationid-和-androidmanifest\">3.1.2 动态配置ApplicationId 和 AndroidManifest<a title=\"#3.1.2-动态配置applicationid-和-androidmanifest\" href=\"#3.1.2-动态配置applicationid-和-androidmanifest\"></a></h4>\n<p>我们知道一个App是需要一个ApplicationId的 ，而组件在独立调试时也是一个App，所以也需要一个ApplicationId，集成调试时组件是不需要ApplicationId的；另外一个APP也只有一个启动页， 而组件在独立调试时也需要一个启动页，在集成调试时就不需要了。</p>\n<p>所以<code>ApplicationId</code>、<code>AndroidManifest</code>也是需要<code>isModule</code>来进行配置的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//build.gradle (module_cart)</span></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isModule.toBoolean()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 独立调试时添加 applicationId ，集成调试时移除</span></span><br><span class=\"line\">            applicationId <span class=\"string\">&quot;com.hfy.componentlearning.cart&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceSets &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 独立调试与集成调试时使用不同的 AndroidManifest.xml 文件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isModule.toBoolean()) &#123;</span><br><span class=\"line\">                manifest.srcFile <span class=\"string\">&#x27;src/main/moduleManifest/AndroidManifest.xml&#x27;</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                manifest.srcFile <span class=\"string\">&#x27;src/main/AndroidManifest.xml&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见也是使用isModule分别设置applicationId、AndroidManifest。其中独立调试的AndroidManifest是新建于目录moduleManifest，使用 manifest.srcFile 即可指定两种调试模式的AndroidManifest文件路径。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/5A37EF2E256D4C97B8BC25EC380C29F8?method=download&amp;shareKey=c46a159329db8254f2bfc16b60b710d8\" alt=\"动态配置ApplicationId和AndroidManifest项目结构\" class=\"φcx\"></p>\n<p>moduleManifest中新建的manifest文件 指定了Application、启动activity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//moduleManifest/AndroidManifest.xml</span></span><br><span class=\"line\">&lt;manifest xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">package</span>=<span class=\"string\">&quot;com.hfy.module_cart&quot;</span> &gt;</span><br><span class=\"line\">    &lt;application android:name=<span class=\"string\">&quot;.CartApplication&quot;</span></span><br><span class=\"line\">        android:allowBackup=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        android:label=<span class=\"string\">&quot;Cart&quot;</span></span><br><span class=\"line\">        android:theme=<span class=\"string\">&quot;@style/Theme.AppCompat&quot;</span>&gt;</span><br><span class=\"line\">        &lt;activity android:name=<span class=\"string\">&quot;.CartActivity&quot;</span>&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class=\"line\">                &lt;category android:name=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class=\"line\">            &lt;/intent-filter&gt;</span><br><span class=\"line\">        &lt;/activity&gt;</span><br><span class=\"line\">    &lt;/application&gt;</span><br><span class=\"line\">&lt;/manifest&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原本自动生成的manifest，未指定Application、启动activity：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;manifest xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">package</span>=<span class=\"string\">&quot;com.hfy.module_cart&quot;</span>&gt;</span><br><span class=\"line\">    &lt;application&gt;</span><br><span class=\"line\">        &lt;activity android:name=&quot;.CartActivity&quot;&gt;&lt;/activity&gt;</span><br><span class=\"line\">    &lt;/application&gt;</span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>\n<p>独立调试、集成调试 ，分别使用“assembleDebug”构建结果如下：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/FD54ED291D8B4ABBB55DC6B00A4B35AB?method=download&amp;shareKey=2f1891eb58a9ddd7d2e741d4acb768a7\" alt=\"module生产图示\" class=\"φcx\"></p>\n<h3 id=\"3.2-多工程方案\">3.2 多工程方案<a title=\"#3.2-多工程方案\" href=\"#3.2-多工程方案\"></a></h3>\n<h4 id=\"3.2.1-方案概述\">3.2.1 方案概述<a title=\"#3.2.1-方案概述\" href=\"#3.2.1-方案概述\"></a></h4>\n<p>多工程方案，业务组件以<code>library module</code>形式存在于独立的工程。独立工程 自然就可以独立调试了，不再需要进行上面那些配置了。</p>\n<p>例如，购物车组件就是新建的工程Cart的<code>module_cart</code>模块，业务代码就写在<code>module_cart</code>中即可。app模块是依赖<code>module_cart</code>。app模块只是一个组件的入口，或者是一些demo测试代码。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/911A89D3650947ACA6D9A15DF183953B?method=download&amp;shareKey=f336f3de70a94ce621a3e8a7b158feb2\" alt=\"多工程方案概述图示\" class=\"φcx\"></p>\n<p>那么当所有业务组件都拆分成独立组件时，原本的工程就变成一个只有app模块的壳工程了，壳工程就是用来集成所有业务组件的。</p>\n<h4 id=\"3.2.1-maven引用组件\">3.2.1 maven引用组件<a title=\"#3.2.1-maven引用组件\" href=\"#3.2.1-maven引用组件\"></a></h4>\n<p>那么如何进行集成调试呢？使用maven引用组件：</p>\n<ol>\n<li>发布组件的aar包 到公司的maven仓库。</li>\n<li>然后在壳工程中就使用implemention依赖就可以了，和使用第三方库一毛一样。</li>\n</ol>\n<p>另外aar包 分为 快照版本（SNAPSHOT）和正式版本（Realease），快照版本是开发阶段调试使用，正式版本是正式发版使用。具体如下：</p>\n<p>首先，在<code>module_cart</code>模块中新建<code>maven_push.gradle</code>文件，和<code>build.gradle</code>同级目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">&#x27;maven&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">configurations &#123;</span><br><span class=\"line\">    deployerJars</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上传到Maven仓库的task</span></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            pom.version = <span class=\"string\">&#x27;1.0.0&#x27;</span> <span class=\"comment\">// 版本号</span></span><br><span class=\"line\">            pom.artifactId = <span class=\"string\">&#x27;cart&#x27;</span> <span class=\"comment\">// 项目名称（通常为类库模块名称，也可以任意）</span></span><br><span class=\"line\">            pom.groupId = <span class=\"string\">&#x27;com.hfy.cart&#x27;</span> <span class=\"comment\">// 唯一标识（通常为模块包名，也可以任意）</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//指定快照版本 maven仓库url， todo 请改为自己的maven服务器地址、账号密码</span></span><br><span class=\"line\">            snapshotRepository(url: <span class=\"string\">&#x27;http://xxx/maven-snapshots/&#x27;</span>) &#123;</span><br><span class=\"line\">                authentication(userName: <span class=\"string\">&#x27;***&#x27;</span>, password: <span class=\"string\">&#x27;***&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//指定正式版本 maven仓库url， todo 请改为自己的maven服务器地址、账号密码</span></span><br><span class=\"line\">            repository(url: <span class=\"string\">&#x27;http://xxx/maven-releases/&#x27;</span>) &#123;</span><br><span class=\"line\">                authentication(userName: <span class=\"string\">&#x27;***&#x27;</span>, password: <span class=\"string\">&#x27;***&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">androidJavadocs</span><span class=\"params\">(type: Javadoc)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置源码所在的位置</span></span><br><span class=\"line\">    source = android.sourceSets.main.java.sourceFiles</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成javadoc.jar</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">androidJavadocsJar</span><span class=\"params\">(type: Jar)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指定文档名称</span></span><br><span class=\"line\">    classifier = <span class=\"string\">&#x27;javadoc&#x27;</span></span><br><span class=\"line\">    from androidJavadocs.destinationDir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包main目录下代码和资源的task，生成sources.jar</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">androidSourcesJar</span><span class=\"params\">(type: Jar)</span> </span>&#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">&#x27;sources&#x27;</span></span><br><span class=\"line\">    from android.sourceSets.main.java.sourceFiles</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置需要上传到maven仓库的文件</span></span><br><span class=\"line\">artifacts &#123;</span><br><span class=\"line\">    archives androidSourcesJar</span><br><span class=\"line\">    archives androidJavadocsJar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>maven_push.gradle</code>主要就是发布组件AAR的配置：AAR的版本号、名称、maven仓地址账号等。</p>\n<p>然后，再<code>build.gradle</code>中引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;build.gradle</span><br><span class=\"line\">apply from: &#39;maven_push.gradle&#39;</span><br></pre></td></tr></table></figure>\n<p>接着，点击Sync后，点击Gradle任务uploadArchives，即可打包并发布aar到maven仓。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/0A730E4C805E467D9E011C8F6B0839BC?method=download&amp;shareKey=c366e1add853d4d5af1613e60dc12c16\" alt=\"uploadArchives上传aar到maven仓库\" class=\"φcx\"></p>\n<p>最后，壳工程要引用组件AAR，需要先在壳工程的根目录下build.gradle中添加maven仓库地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        <span class=\"comment\">//私有服务器仓库地址</span></span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url <span class=\"string\">&#x27;http://xxx&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着在app的build.gradle中添加依赖即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.hfy.cart:cart:1.0.0&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//以及其他业务组件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见，多工程方案 和我们平时使用第三方库是一样的，只是我们把组件AAR发布到公司的私有maven仓而已。</p>\n<p>实际上，我个人比较建议 使用多工程方案的:</p>\n<ul>\n<li>单工程方案没法做到代码权限管控，也不能做到开发人员职责划分明确，每个开发人员都可以对任意的组件进行修改，显然还是会造成混乱。</li>\n<li>多工程把每个组件都分割成单独的工程，代码权限可以明确管控。集成测试时，通过maven引用来集成即可。并且业务组件和业务基础组件也可以 和 基础组件一样，可以给公司其他项目复用。</li>\n</ul>\n<h2 id=\"4-页面跳转\">4 页面跳转<a title=\"#4-页面跳转\" href=\"#4-页面跳转\"></a></h2>\n<h3 id=\"4.1-方案—arouter\">4.1 方案—ARouter<a title=\"#4.1-方案—arouter\" href=\"#4.1-方案—arouter\"></a></h3>\n<p>前面说到，组件化的核心就是解耦，所以组件间是不能有依赖的，那么如何实现组件间的页面跳转呢？</p>\n<p>例如在首页模块点击购物车按钮需要跳转到购物车模块的购物车页面，两个模块之间没有依赖，也就说不能直接使用显示启动来打开购物车Activity，那么隐式启动呢？</p>\n<p>隐式启动是可以实现跳转的，但是隐式 Intent 需要通过 AndroidManifest 配置和管理，协作开发显得比较麻烦。这里我们采用业界通用的方式—路由。</p>\n<p>比较著名的路由框架 有阿里的<code>ARouter</code>、美团的<code>WMRouter</code>，它们原理基本是一致的。</p>\n<ul>\n<li><a href=\"https://github.com/alibaba/ARouter\">https://github.com/alibaba/ARouter</a></li>\n<li><a href=\"https://github.com/meituan/WMRouter\">https://github.com/meituan/WMRouter</a></li>\n</ul>\n<p>这里我们采用使用更广泛的<code>ARouter</code>：“一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦”。</p>\n<h3 id=\"4.2-arouter实现路由跳转\">4.2 ARouter实现路由跳转<a title=\"#4.2-arouter实现路由跳转\" href=\"#4.2-arouter实现路由跳转\"></a></h3>\n<p>前面提到，所有的业务组件都依赖了 Common 组件，所以我们在 Common 组件中使用关键字“api”添加的依赖，业务组件都能访问。我们要使用 ARouter 进行界面跳转，需要<strong>Common组件添加Arouter</strong>的依赖（另外，其它组件共同依赖的库也要都放到 Common 中统一依赖）。</p>\n<h4 id=\"4.2.1-引入依赖\">4.2.1 引入依赖<a title=\"#4.2.1-引入依赖\" href=\"#4.2.1-引入依赖\"></a></h4>\n<p>因为ARouter比较特殊，“arouter-compiler ” 的annotationProcessor依赖 需要所有使用到 ARouter 的组件中都单独添加，不然无法在 apt 中生成索引文件，就无法跳转成功。</p>\n<p>并且在每个使用到 ARouter 的组件的 build.gradle 文件中，其 android{} 中的 javaCompileOptions 中也需要添加特定配置。然后壳工程需要依赖业务组件。如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//common组件的build.gradle</span></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    api <span class=\"string\">&#x27;com.alibaba:arouter-api:1.4.0&#x27;</span></span><br><span class=\"line\">    annotationProcessor <span class=\"string\">&#x27;com.alibaba:arouter-compiler:1.2.1&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//业务组件、业务基础组件 共同依赖的库（网络库、图片库等）都写在这里~</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//业务组件的build.gradle</span></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        javaCompileOptions &#123;</span><br><span class=\"line\">            annotationProcessorOptions &#123;</span><br><span class=\"line\">                arguments = [AROUTER_MODULE_NAME: project.getName()]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    annotationProcessor <span class=\"string\">&#x27;com.alibaba:arouter-compiler:1.2.1&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span><span class=\"comment\">//业务组件依赖common组件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//壳工程app module的build.gradle</span></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//这里没有使用私有maven仓，而是发到JitPack仓，一样的意思~</span></span><br><span class=\"line\"><span class=\"comment\">//    implementation &#x27;com.hfy.cart:cart:1.0.0&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:Cart:1.0.1&#x27;</span> <span class=\"comment\">//依赖购物车组件</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:HomePage:1.0.2&#x27;</span> <span class=\"comment\">//依赖首页组件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//壳工程内 也需要依赖Common组件，因为需要初始化ARouter</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4.2.2-初始化\">4.2.2 初始化<a title=\"#4.2.2-初始化\" href=\"#4.2.2-初始化\"></a></h4>\n<p>依赖完了，先要对ARouter初始化，需要在Application内完成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这两行必须写在init之前，否则这些配置在init过程中将无效</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打印日志</span></span><br><span class=\"line\">            ARouter.openLog();</span><br><span class=\"line\">            <span class=\"comment\">// 开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险)</span></span><br><span class=\"line\">            ARouter.openDebug();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 尽可能早，推荐在Application中初始化</span></span><br><span class=\"line\">        ARouter.init(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4.2.3-路由跳转\">4.2.3 路由跳转<a title=\"#4.2.3-路由跳转\" href=\"#4.2.3-路由跳转\"></a></h4>\n<p>好了，准备工作都完成了。并且知道首页组件是没有依赖购物车组件的，下面就来实现前面提到的 首页组件 无依赖 跳转到 购物车组件页面。</p>\n<p>而使用ARouter进行简单路由跳转，只有两步：添加注解路径、通过路径路由跳转。</p>\n<p>1、在支持路由的页面上添加注解<code>@Route(path=&quot;/xx/xx&quot;)</code>，路径需要注意的是至少需要有两级——<code>/xx/xx</code>。这里就是购物车组件的CartActivity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Route(path = &quot;/cart/cartActivity&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_cart);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、然后在首页组件的HomeActivity 发起路由操作—点击按钮跳转到购物车，调用<code>ARouter.getInstance().build(&quot;/xx/xx&quot;).navigation()</code>即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Route(path = &quot;/homepage/homeActivity&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_home);</span><br><span class=\"line\"></span><br><span class=\"line\">        findViewById(R.id.btn_go_cart).setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//通过路由跳转到 购物车组件的购物车页面（但没有依赖购物车组件）</span></span><br><span class=\"line\">                ARouter.getInstance()</span><br><span class=\"line\">                        .build(<span class=\"string\">&quot;/cart/cartActivity&quot;</span>)</span><br><span class=\"line\">                        .withString(<span class=\"string\">&quot;key1&quot;</span>,<span class=\"string\">&quot;value1&quot;</span>)<span class=\"comment\">//携带参数1</span></span><br><span class=\"line\">                        .withString(<span class=\"string\">&quot;key2&quot;</span>,<span class=\"string\">&quot;value2&quot;</span>)<span class=\"comment\">//携带参数2</span></span><br><span class=\"line\">                        .navigation();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外，注意在HomeActivity上添加了注解和路径，这是为了壳工程的启动页中直接打开首页。还看到路由跳转可以像startActivity一样待参数。</p>\n<p>最后，壳工程的启动页中通过路由打开首页（当然这里也可以用startActivity()，毕竟壳工程依赖了首页组件）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动页</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SplashActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过路由直接打开home组件的HomeActivity，</span></span><br><span class=\"line\">        ARouter.getInstance().build(<span class=\"string\">&quot;/homepage/homeActivity&quot;</span>).navigation();</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们run壳工程 最后看下效果：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/947C338826F94B208B748F02E813E84B?method=download&amp;shareKey=92953f3bb1be59bbc2c0fd875b774d80\" alt=\"组件间页面跳转图示\" class=\"φcx\"></p>\n<p>到这里，组件间页面跳转的问题也解决了。</p>\n<h2 id=\"5-组件间通信\">5 组件间通信<a title=\"#5-组件间通信\" href=\"#5-组件间通信\"></a></h2>\n<p>组件间没有依赖，又如何进行通信呢？</p>\n<p>例如，首页需要展示购物车中商品的数量，而查询购物车中商品数量 这个能力是购物车组件内部的，这咋办呢？</p>\n<h3 id=\"5.1-服务暴露组件\">5.1 服务暴露组件<a title=\"#5.1-服务暴露组件\" href=\"#5.1-服务暴露组件\"></a></h3>\n<p>平时开发中 我们常用 接口 进行解耦，对接口的实现不用关心，避免接口调用与业务逻辑实现紧密关联。这里组件间的解耦也是相同的思路，仅依赖和调用服务接口，不会依赖接口的实现。</p>\n<p>可能你会有疑问了：既然首页组件可以访问购物车组件接口了，那就需要依赖购物车组件啊，这俩组件还是耦合了啊，那咋办啊？答案是组件拆分出可暴露服务。见下图：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/D04CFE96A596493FB302CA25EB7523E2?method=download&amp;shareKey=1f6f1e12bf711e346aa07c484ad5950c\" alt=\"组件拆分出可暴露服务\" class=\"φcx\"></p>\n<p>左侧是组件间可以调用对方服务但是有依赖耦合。右侧，发现多了<code>export_home</code>、<code>export_cart</code>，这是对应拆分出来的专门用于提供服务的暴露组件。操作说明如下：</p>\n<ul>\n<li>暴露组件只存放服务接口、服务接口相关的实体类、路由信息、便于服务调用的util等。</li>\n<li>服务调用方只依赖服务提供方的露组件，如<code>module_home</code>依赖<code>export_cart</code>，而不依赖<code>module_cart</code>。</li>\n<li>组件 需要依赖 自己的暴露组件，并实现服务接口，如<code>module_cart</code>依赖<code>export_cart</code>并实现其中的服务接口。</li>\n<li>接口的实现注入依然是由ARouter完成，和页面跳转一样使用路由信息。</li>\n</ul>\n<p>下面按照此方案来实施首页调用购物车服务来获取商品数量，更好地说明和理解。</p>\n<h3 id=\"5.2-实施\">5.2 实施<a title=\"#5.2-实施\" href=\"#5.2-实施\"></a></h3>\n<h4 id=\"5.2.1-新建export_cart\">5.2.1 新建export_cart<a title=\"#5.2.1-新建export_cart\" href=\"#5.2.1-新建export_cart\"></a></h4>\n<p>首先，在购物车工程中新建module即<code>export_cart</code>，在其中新建接口类<code>ICartService</code>并定义获取购物车商品数量方法，注意接口必须继承<code>IProvider</code>，是为了使用ARouter的实现注入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 购物车组件对外暴露的服务</span></span><br><span class=\"line\"><span class=\"comment\"> * 必须继承IProvider</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hufeiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICartService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IProvider</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取购物车中商品数量</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">CartInfo <span class=\"title\">getProductCountInCart</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CartInfo是购物车信息，包含商品数量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 购物车信息</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hufeiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartInfo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 商品数量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> productCount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着，创建路由表信息，存放购物车组件对外提供跳转的页面、服务的路由地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 购物车组件路由表</span></span><br><span class=\"line\"><span class=\"comment\"> * 即 购物车组件中 所有可以从外部跳转的页面 的路由信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hufeiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CartRouterTable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 购物车页面</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String PATH_PAGE_CART = <span class=\"string\">&quot;/cart/cartActivity&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 购物车服务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String PATH_SERVICE_CART = <span class=\"string\">&quot;/cart/service&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面说页面跳转时是直接使用路径字符串进行路由跳转，这里是和服务路由都放在这里统一管理。</p>\n<p>然后，为了外部组件使用方便新建CartServiceUtil：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 购物车组件服务工具类</span></span><br><span class=\"line\"><span class=\"comment\"> * 其他组件直接使用此类即可：页面跳转、获取服务。</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hufeiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartServiceUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 跳转到购物车页面</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param2</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">navigateCartPage</span><span class=\"params\">(String param1, String param2)</span></span>&#123;</span><br><span class=\"line\">        ARouter.getInstance()</span><br><span class=\"line\">                .build(CartRouterTable.PATH_PAGE_CART)</span><br><span class=\"line\">                .withString(<span class=\"string\">&quot;key1&quot;</span>,param1)</span><br><span class=\"line\">                .withString(<span class=\"string\">&quot;key2&quot;</span>,param2)</span><br><span class=\"line\">                .navigation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取服务</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ICartService <span class=\"title\">getService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//return ARouter.getInstance().navigation(ICartService.class);//如果只有一个实现，这种方式也可以</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (ICartService) ARouter.getInstance().build(CartRouterTable.PATH_SERVICE_CART).navigation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取购物车中商品数量</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CartInfo <span class=\"title\">getCartProductCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getService().getProductCountInCart();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到，这里使用静态方法分别提供了页面跳转、服务获取、服务具体方法获取。其中服务获取 和页面跳转同样是使用路由，并且服务接口实现类也是需要添加<code>@Route</code>注解指定路径的。</p>\n<p>到这里，<code>export_cart</code>就已经准备完毕，我们同样发布一个<code>export_cart</code>的AAR（“com.github.hufeiyang.Cart:export_cart:xxx”）。</p>\n<p>再来看看<code>module_cart</code>对服务接口的实现。</p>\n<h4 id=\"5.2.2-module_cart的实现\">5.2.2 module_cart的实现<a title=\"#5.2.2-module_cart的实现\" href=\"#5.2.2-module_cart的实现\"></a></h4>\n<p>首先，<code>module_cart</code>需要依赖<code>export_cart</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//module_cart的Build.gradle</span></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    annotationProcessor <span class=\"string\">&#x27;com.alibaba:arouter-compiler:1.2.1&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//依赖export_cart</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang.Cart:export_cart:1.0.5&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>点击sync后，接着CartActivity的path改为路由表提供：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Route(path = CartRouterTable.PATH_PAGE_CART)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_cart);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，新建服务接口的实现类来实现<code>ICartService</code>，添加<code>@Route</code>注解指定<code>CartRouterTable</code>中定义的服务路由：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 购物车组件服务的实现</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要<span class=\"doctag\">@Route</span>注解、指定CartRouterTable中定义的服务路由</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hufeiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Route(path = CartRouterTable.PATH_SERVICE_CART)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICartService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CartInfo <span class=\"title\">getProductCountInCart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里实际项目中 应该是 请求接口 或查询数据库</span></span><br><span class=\"line\">        CartInfo cartInfo = <span class=\"keyword\">new</span> CartInfo();</span><br><span class=\"line\">        cartInfo.productCount = <span class=\"number\">666</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cartInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化工作，服务注入时会调用，可忽略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的实现是直接实例化了CartInfo，数量赋值666。然后发布一个AAR（“com.github.hufeiyang.Cart:module_cart:xxx”）。</p>\n<h4 id=\"5.2.3-module_home中的使用和调试\">5.2.3 module_home中的使用和调试<a title=\"#5.2.3-module_home中的使用和调试\" href=\"#5.2.3-module_home中的使用和调试\"></a></h4>\n<p><code>module_home</code>需要依赖<code>export_cart</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//module_home的Build.gradle</span></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    annotationProcessor <span class=\"string\">&#x27;com.alibaba:arouter-compiler:1.2.1&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注意这里只依赖export_cart（module_cart由壳工程引入）</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang.Cart:export_cart:1.0.5&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在HomeActivity中新增TextView，调用CartServiceUtil获取并展示购物车商品数量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Route(path = &quot;/homepage/homeActivity&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_home);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//跳转到购物车页面</span></span><br><span class=\"line\">        findViewById(R.id.btn_go_cart).setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//通过路由跳转到 购物车组件的购物车页面（但没有依赖购物车组件）</span></span><br><span class=\"line\"><span class=\"comment\">//                ARouter.getInstance()</span></span><br><span class=\"line\"><span class=\"comment\">//                        .build(&quot;/cart/cartActivity&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//                        .withString(&quot;key1&quot;,&quot;param1&quot;)//携带参数1</span></span><br><span class=\"line\"><span class=\"comment\">//                        .withString(&quot;key2&quot;,&quot;param2&quot;)//携带参数2</span></span><br><span class=\"line\"><span class=\"comment\">//                        .navigation();</span></span><br><span class=\"line\"></span><br><span class=\"line\">                CartServiceUtil.navigateCartPage(<span class=\"string\">&quot;param1&quot;</span>, <span class=\"string\">&quot;param1&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用购物车组件服务：获取购物车商品数量</span></span><br><span class=\"line\">        TextView tvCartProductCount = findViewById(R.id.tv_cart_product_count);</span><br><span class=\"line\">        tvCartProductCount.setText(<span class=\"string\">&quot;购物车商品数量:&quot;</span>+ CartServiceUtil.getCartProductCount().productCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看到 使用<code>CartServiceUtil.getCartProductCount()</code>获取购物车信息并展示，跳转页面也改为了<code>CartServiceUtil.navigateCartPage()</code>方法。</p>\n<p>到这里home组件的就可以独立调试了：页面跳转和服务调用，独立调试ok后 再集成到壳工程。先让HomePage工程的app模块依赖Common组件、<code>module_cart</code> 以及本地的module_home:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//HomePage工程,app模块的Build.gradle</span></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//引入本地Common组件、module_cart、module_home，在app module中独立调试使用</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang.Cart:module_cart:1.0.6&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">implementation <span class=\"title\">project</span><span class=\"params\">(path: <span class=\"string\">&#x27;:module_home&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>然后新建MyApplication初始化ARouter、在app的MainActivity中使用<code>ARouter.getInstance().build(&quot;/homepage/homeActivity&quot;).navigation()</code>打开首页，这样就可以调试了。</p>\n<p>调试ok后接着就是集成到壳工程。</p>\n<h4 id=\"5.2.4-集成到壳工程\">5.2.4 集成到壳工程<a title=\"#5.2.4-集成到壳工程\" href=\"#5.2.4-集成到壳工程\"></a></h4>\n<p>壳工程中的操作和独立调试类似，区别是对首页组件引入的是AAR：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//这里没有使用私有maven仓，而是发到JitPack仓，一样的意思~</span></span><br><span class=\"line\"><span class=\"comment\">//    implementation &#x27;com.hfy.cart:cart:1.0.0&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang.Cart:module_cart:1.0.6&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:HomePage:1.0.4&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//壳工程内 也需要依赖Common组件，因为需要初始化ARouter</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后run壳工程来看下效果：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/38610B1A53A14DDF929D236ECFF35D88?method=download&amp;shareKey=e3ed0b021d1f94e76dd942a6687cfd53\" alt=\"组件间通信最终效果\" class=\"φcx\"></p>\n<p>获取数量是666、跳转页面成功。</p>\n<blockquote>\n<p>另外，除了export_xxx这种方式，还可以添加一个 ComponentBase 组件，这个组件被所有的Common组件依赖，在这个组件中分别添加定义了业务组件可以对外提供访问自身数据的抽象方法的 Service。相当于把各业务组件的export整合到ComponentBase中，这样就只添加了一个组件而已。但是这样就不好管理了，每个组件对外能力的变更都要改ComponentBase。</p>\n</blockquote>\n<p>另外，除了组件间方法调用，使用EventBus在组件间传递信息也是ok的（注意Event实体类要定义在export_xxx中）。</p>\n<p>好了，到这里组件间通信问题也解决了。</p>\n<h2 id=\"6-fragment实例获取\">6 fragment实例获取<a title=\"#6-fragment实例获取\" href=\"#6-fragment实例获取\"></a></h2>\n<p>上面介绍了Activity 的跳转，我们也会经常使用Fragment。例如常见的应用主页HomeActivity 中包含了多个属于不同组件的Fragment、或者有一个Fragment多个组件都需要用到。通常我们直接访问具体Fragment类来new一个Fragment实例，但这里组件间没有直接依赖，那咋办呢？答案依然是ARouter。</p>\n<p>先在<code>module_cart</code>中创建CartFragment：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加注解@Route，指定路径</span></span><br><span class=\"line\"><span class=\"meta\">@Route(path = CartRouterTable.PATH_FRAGMENT_CART)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CartFragment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//显示“cart_fragment&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_cart, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时是fragment添加注解@Route，指定路由路径，路由还是定义在<code>export_cart</code>的CartRouterTable中，所以<code>export_cart</code>需要先发一个AAR，<code>module_cart</code>来依赖，然后<code>module_cart</code>发布AAR。</p>\n<p>然后再<code>module_home</code>中依赖<code>export_cart</code>，使用ARouter获取Fragment实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Route(path = &quot;/homepage/homeActivity&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_home);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        FragmentManager manager = getSupportFragmentManager();</span><br><span class=\"line\">        FragmentTransaction transaction= manager.beginTransaction();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用ARouter获取Fragment实例 并添加</span></span><br><span class=\"line\">        Fragment userFragment = (Fragment) ARouter.getInstance().build(CartRouterTable.PATH_FRAGMENT_CART).navigation();</span><br><span class=\"line\">        transaction.add(R.id.fl_test_fragment, userFragment, <span class=\"string\">&quot;tag&quot;</span>);</span><br><span class=\"line\">        transaction.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以先独立调试，然后集成到壳工程——依赖最新的<code>module_cart</code> 、<code>HomePage</code>，结果如下：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/76918CB7168D44718D32386ECD6D9E2E?method=download&amp;shareKey=6789dedfb9dabcf1b3021c8897b494bb\" alt=\"fragment实例获取最终效果\" class=\"φcx\"></p>\n<p>绿色部分就是引用自cart组件的fragment。</p>\n<h2 id=\"7-application生命周期分发\">7 Application生命周期分发<a title=\"#7-application生命周期分发\" href=\"#7-application生命周期分发\"></a></h2>\n<p>我们通常会在Application的onCreate中做一些初始化任务，例如前面提到的ARouter初始化。而业务组件有时也需要获取应用的Application，也要在应用启动时进行一些初始化任务。</p>\n<p>你可能会说，直接在壳工程Application的onCreate操作就可以啊。但是这样做会带来问题：因为我们希望壳工程和业务组件 代码隔离（虽然有依赖），并且 我们希望组件内部的任务要在业务组件内部完成。</p>\n<p>那么如何做到 各业务组件 无侵入地获取 Application生命周期 呢？——答案是 使用AppLifeCycle插件，它专门用于在Android组件化开发中，Application生命周期主动分发到组件。具体使用如下：</p>\n<p><strong>1.common组件依赖<code>applifecycle-api</code></strong></p>\n<p>首先，common组件通过 api 添加 applifecycle-api 依赖 并发布AAR：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//common组件 build.gradle</span></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//AppLifecycle</span></span><br><span class=\"line\">    api <span class=\"string\">&#x27;com.github.hufeiyang.Android-AppLifecycleMgr:applifecycle-api:1.0.4&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.业务组件依赖applifecycle-compiler、实现接口+注解</strong></p>\n<p>各业务组件都要依赖最新common组件，并添加<code>applifecycle-compiler</code>的依赖：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//业务组件 build.gradle</span></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"comment\">//这里Common:1.0.2内依赖了applifecycle-api</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:Common:1.0.2&#x27;</span></span><br><span class=\"line\">    annotationProcessor <span class=\"string\">&#x27;com.github.hufeiyang.Android-AppLifecycleMgr:applifecycle-compiler:1.0.4&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>sync后，新建类来实现接口<code>IApplicationLifecycleCallbacks</code>用于接收Application生命周期，且添加<code>@AppLifecycle</code>注解。</p>\n<p>例如<code>Cart</code>组件的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组件的AppLifecycle</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、<span class=\"doctag\">@AppLifecycle</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 2、实现IApplicationLifecycleCallbacks</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hufeiyang</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@AppLifecycle</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartApplication</span> <span class=\"keyword\">implements</span> <span class=\"title\">IApplicationLifecycleCallbacks</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  Context context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 用于设置优先级，即多个组件onCreate方法调用的优先顺序</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPriority</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NORM_PRIORITY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//可在此处做初始化任务，相当于Application的onCreate方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.i(<span class=\"string\">&quot;CartApplication&quot;</span>, <span class=\"string\">&quot;onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTerminate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLowMemory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTrimMemory</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现的方法 有onCreate、onTerminate、onLowMemory、onTrimMemory。最重要的就是onCreate方法了，相当于Application的onCreate方法，可在此处做初始化任务。并且还可以通过<code>getPriority()</code>方法设置回调多个组件onCreate方法调用的优先顺序，无特殊要求设置<code>NORM_PRIORITY</code>即可。</p>\n<p><strong>3.壳工程引入AppLifecycle插件、触发回调</strong></p>\n<p>壳工程引入新的common组件、业务组件，以及 引入AppLifecycle插件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//壳工程根目录的 build.gradle</span></span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//applifecycle插件仓也是jitpack</span></span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&#x27;https://jitpack.io&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">&#x27;com.android.tools.build:gradle:3.6.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加载插件applifecycle</span></span><br><span class=\"line\">        classpath <span class=\"string\">&#x27;com.github.hufeiyang.Android-AppLifecycleMgr:applifecycle-plugin:1.0.3&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app module 的build.gradle</span></span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.android.application&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//使用插件applifecycle</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.hm.plugin.lifecycle&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">//这里没有使用私有maven仓，而是发到JitPack仓，一样的意思~</span></span><br><span class=\"line\"><span class=\"comment\">//    implementation &#x27;com.hfy.cart:cart:1.0.0&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang.Cart:module_cart:1.0.11&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:HomePage:1.0.5&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//壳工程内 也需要依赖Common组件，因为要 触发生命周期分发</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.github.hufeiyang:Common:1.0.2&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后需要在Application中触发生命周期的分发：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//壳工程 MyApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        ApplicationLifecycleManager.init();</span><br><span class=\"line\">        ApplicationLifecycleManager.onCreate(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTerminate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onTerminate();</span><br><span class=\"line\"></span><br><span class=\"line\">        ApplicationLifecycleManager.onTerminate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLowMemory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onLowMemory();</span><br><span class=\"line\"></span><br><span class=\"line\">        ApplicationLifecycleManager.onLowMemory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTrimMemory</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onTrimMemory(level);</span><br><span class=\"line\"></span><br><span class=\"line\">        ApplicationLifecycleManager.onTrimMemory(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>首先在inCreate方法中调用<code>ApplicationLifecycleManager</code>的init()方法，用于收集组件内实现了<code>IApplicationLifecycleCallbacks</code>且添加了<code>@AppLifecycle</code>注解的类。然后在各生命周期方法内调用对应的<code>ApplicationLifecycleManager</code>的方法，来分发到所有组件。</p>\n<p>这样 组件 就能接收到Application的生命周期了。 新增组件的话，只需要 实现<code>IApplicationLifecycleCallbacks</code>并添加了<code>@AppLifecycle</code>注解 即可，无需修改壳工程，也不用关心。</p>\n<blockquote>\n<p>AppLifecycle插件是使用了APT技术、gradle插件技术+ASM动态生成字节码，在编译阶段就已经完成了大部分工作，无性能问题、且使用方便。</p>\n</blockquote>\n<p>到这里，组件化开发的5个问题点都已经解决了。下面来看看针对老项目如何实现组件化改造。</p>\n<h2 id=\"8-老项目组件化\">8 老项目组件化<a title=\"#8-老项目组件化\" href=\"#8-老项目组件化\"></a></h2>\n<p>通常情况 我们去做组件化，都是为了改造已有老项目。可能老项目内部的模块之间耦合严重，没有严格的业务模块划分，并且组件化改造是大工作量的事情，且要全量回归测试，总体来说，是需要全员参与、有较大难度的事情。</p>\n<h3 id=\"8.1-方案\">8.1 方案<a title=\"#8.1-方案\" href=\"#8.1-方案\"></a></h3>\n<h4 id=\"8.1.1-组件划分\">8.1.1 组件划分<a title=\"#8.1.1-组件划分\" href=\"#8.1.1-组件划分\"></a></h4>\n<p>根据前面介绍的组件化架构图，组件分为 基础组件、业务基础组件、业务组件。</p>\n<ul>\n<li>基础组件，不用多说，就是基础功能，例如网络请求、日志框架、图片加载，这些与业务毫无关联，可用于公司所有项目，是底层最稳定的组件。这里就比较容易识别和拆分。</li>\n<li>业务基础组件，主要是供业务组件依赖使用，例如 分享、支付组件，通常是一个完整的功能，是较为最稳定的组件。这部分通常也是比较容易识别的。</li>\n<li>业务组件，完整的业务块，例如前面提到京东的“首页”、“分类”、“发现”、“购物车”、“我的”。业务组件是日常需求开发的主战场。</li>\n</ul>\n<h4 id=\"8.1.2-组件拆分：基础组件、common组件\">8.1.2 组件拆分：基础组件、Common组件<a title=\"#8.1.2-组件拆分：基础组件、common组件\" href=\"#8.1.2-组件拆分：基础组件、common组件\"></a></h4>\n<p>基础组件最容易拆分，它依赖最少，功能单一纯粹。把基础组件依赖的东西，从老工程中抽取出来，放在单独的工程，做成单独的组件，发布AAR到公司maven仓。注意不能存在任何业务相关代码。</p>\n<p>新建Common组件，使用 “api” 依赖 所有基础组件，这样依赖 Common组件的组件 就能使用所有基础组件的功能了。接着，就是前面提到的 ARouter、AppLifeCycle、以及其他第三方库的依赖。</p>\n<p>另外，Common组件，还有一个重要部分：提供BaseActivity、BaseFragment，这里Base需要完成基础能力的添加，例如页面进入、退出的埋点上报、统一页面标题样式、打开关闭EventBus等等。</p>\n<h4 id=\"8.1.3-组件拆分：业务基础组件、业务组件\">8.1.3 组件拆分：业务基础组件、业务组件<a title=\"#8.1.3-组件拆分：业务基础组件、业务组件\" href=\"#8.1.3-组件拆分：业务基础组件、业务组件\"></a></h4>\n<p>业务基础组件 基本上只依赖common，功能也是单一纯粹。同样是把依赖的东西抽取出来，放在单独的工程，做成单独的组件，发布AAR到公司maven仓。</p>\n<p>业务组件，首先要识别组件的边界，可以按照页面入口和出口作为判断。然后，需要识别对 业务基础组件的依赖；以及 最重要的，对其他 业务组件的依赖。</p>\n<p>可以先把代码抽离到单独的工程，然后依赖common组件、需要的业务基础组件，此时依然报错的地方就是对其他业务组件的依赖了。这时就可以给对应组件负责人提需求，在<code>export_xxx</code>中提供跳转和服务。然后你只需要依赖<code>export_xxx</code>使用即可。</p>\n<blockquote>\n<p>老项目组件化改造需要循序渐进，除非有专门的时间。一般是需求开发和改造并行。要先完成一个组件，之后有了经验，后面其他业务组件陆续实施，这样就会比较简单。</p>\n</blockquote>\n<h3 id=\"8.2-常见问题\">8.2 常见问题<a title=\"#8.2-常见问题\" href=\"#8.2-常见问题\"></a></h3>\n<h4 id=\"8.2.1-组件中butterknife报错—r2\">8.2.1 组件中butterknife报错—R2<a title=\"#8.2.1-组件中butterknife报错—r2\" href=\"#8.2.1-组件中butterknife报错—r2\"></a></h4>\n<p>在Library中，ButterKnife注解中使用R.id会报错，例如common组件 <code>module_common</code>中新建Activity，并依赖butterknife：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">// Butterknife requires Java 8.</span></span><br><span class=\"line\">  compileOptions &#123;</span><br><span class=\"line\">    sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">    targetCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation <span class=\"string\">&#x27;com.jakewharton:butterknife:10.2.3&#x27;</span></span><br><span class=\"line\">  annotationProcessor <span class=\"string\">&#x27;com.jakewharton:butterknife-compiler:10.2.3&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报错如下：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/3434CECC669D4C39BC99BA8DFBA9C27B?method=download&amp;shareKey=15a26da3be8b160d1a8ad46ccd4c31e4\" alt=\"组件中butterknife报错\" class=\"φcx\"></p>\n<p>解决方法：需要添加ButterKnife插件，然后使用R2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">    google()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dependencies &#123;</span><br><span class=\"line\">    classpath <span class=\"string\">&#x27;com.jakewharton:butterknife-gradle-plugin:10.2.3&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.android.library&#x27;</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.jakewharton.butterknife&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>然后ButterKnife注解中使用 R2 就ok了:</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/C2A3CF18640A4BB7B408CEBAE6AA4545?method=download&amp;shareKey=987ade90be0fcb71094c5b264b5d78ea\" alt=\"组件中butterknife报错解决\" class=\"φcx\"></p>\n<p>到这里，Android组件化的知识全部讲完。</p>\n<h2 id=\"9-总结\">9 总结<a title=\"#9-总结\" href=\"#9-总结\"></a></h2>\n<p>本文介绍了 组件化开发的背景、架构、优势、要解决的问题 以及详细解决方案，独立调试、页面跳转、组件通信等，最后介绍的老项目组件化方案。</p>\n<p>其中涉及的最重要的工具是ARouter，专门用于Android组件化解耦。ARouter还有很多进阶用法，有机会我也针对ARouter写一篇全面分析。还有一个重要知识点AppLifecycle插件，它的原理涉及APT、ASM插入字节码、gradle插件等技术，后续也会专门去分析这块知识。</p>\n<p>Android开发组件化，是在项目发展到一定规模后必定要使用的技术，学习至完全掌握非常必要。</p>\n<p>Demo的GitHub地址：</p>\n<p>壳工程ComponentLearning<br>\n<a href=\"https://github.com/hufeiyang/ComponentLearning\">https://github.com/hufeiyang/ComponentLearning</a></p>\n<p>Common组件<br>\n<a href=\"https://github.com/hufeiyang/Common\">https://github.com/hufeiyang/Common</a></p>\n<p>HomePage组件<br>\n<a href=\"https://github.com/hufeiyang/HomePage\">https://github.com/hufeiyang/HomePage</a></p>\n<p>Cart组件<br>\n<a href=\"https://github.com/hufeiyang/Cart\">https://github.com/hufeiyang/Cart</a></p>\n<p>AppLifecycle插件<br>\n<a href=\"https://github.com/hufeiyang/Android-AppLifecycleMgr\">https://github.com/hufeiyang/Android-AppLifecycleMgr</a></p>\n<p>参考与感谢:</p>\n<p>《Android 组件化最佳实践》<br>\n<a href=\"https://juejin.cn/post/6844903649102004231\">https://juejin.cn/post/6844903649102004231</a></p>\n<p>《Android组件化开发实践系列》<br>\n<a href=\"https://www.jianshu.com/p/d0f5cf304fa4\">https://www.jianshu.com/p/d0f5cf304fa4</a></p>\n","prev":{"title":"GitHub Pages你了解多少","link":"posts/1612084454"},"next":{"title":"Android开发弹性布局FlexboxLayout知识总结","link":"posts/1611751645"},"plink":"https://blog.ixin.run/posts/1612031065/","toc":[{"id":"1-背景","title":"1 背景","index":"1"},{"id":"2-组件化的理解","title":"2 组件化的理解","index":"2","children":[{"id":"2.1-模块化","title":"2.1 模块化","index":"2.1"},{"id":"2.2-组件化介绍-—-优势及架构","title":"2.2 组件化介绍 — 优势及架构","index":"2.2"},{"id":"2.3-组件化开发的问题点","title":"2.3 组件化开发的问题点","index":"2.3"}]},{"id":"3-组件独立调试","title":"3 组件独立调试","index":"3","children":[{"id":"3.1-单工程方案","title":"3.1 单工程方案","index":"3.1"},{"id":"3.2-多工程方案","title":"3.2 多工程方案","index":"3.2"}]},{"id":"4-页面跳转","title":"4 页面跳转","index":"4","children":[{"id":"4.1-方案—arouter","title":"4.1 方案—ARouter","index":"4.1"},{"id":"4.2-arouter实现路由跳转","title":"4.2 ARouter实现路由跳转","index":"4.2"}]},{"id":"5-组件间通信","title":"5 组件间通信","index":"5","children":[{"id":"5.1-服务暴露组件","title":"5.1 服务暴露组件","index":"5.1"},{"id":"5.2-实施","title":"5.2 实施","index":"5.2"}]},{"id":"6-fragment实例获取","title":"6 fragment实例获取","index":"6"},{"id":"7-application生命周期分发","title":"7 Application生命周期分发","index":"7"},{"id":"8-老项目组件化","title":"8 老项目组件化","index":"8","children":[{"id":"8.1-方案","title":"8.1 方案","index":"8.1"},{"id":"8.2-常见问题","title":"8.2 常见问题","index":"8.2"}]},{"id":"9-总结","title":"9 总结","index":"9"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1612031065/\" title=\"Android组件化全面掌握【转载】\">https://blog.ixin.run/posts/1612031065/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}