{"title":"Alibaba插件代码质量检测问题归总","date":"2020-05-15T05:50:57.000Z","date_formatted":{"ll":"2020年5月15日","L":"2020/05/15","MM-DD":"05-15"},"link":"posts/1589521857","comments":true,"tags":["CodeReview","Java","代码检测"],"categories":["Java"],"updated":"2021-01-29T12:51:44.656Z","content":"<p>前段时间针对公司老项目做了一次代码规范质量检查，采用的是阿里巴巴代码检测插件进行检测，检查结果并不理想，老项目比较重，开发迭代人员比较多，本文就是对这些检查点做一个记录，方便之后回顾。</p>\n<a id=\"more\"></a>\n<p>Alibaba代码检测插件是2017年开发的，无论是IDEA还是Android Studio都可以安装使用，深受开发者好评。androidstudio可以直接搜索插件<code>Alibaba Java Coding Guidelines</code>进行安装使用。</p>\n<h2 id=\"blocker\">Blocker<a title=\"#blocker\" href=\"#blocker\"></a></h2>\n<ol>\n<li>\n<p>if、for语句必须采用闭包形式，不允许采用无括号形势编写。</p>\n</li>\n<li>\n<p>在使用正则表达式时，利用好其预编译功能，可以有效加快编译速度。</p>\n<p>说明：不要在方法体内定义：Pattern pattern = Pattern.compile(规则);</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XxxClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Use precompile</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Pattern NUMBER_PATTERN = Pattern.compile(<span class=\"string\">&quot;[0-9]+&quot;</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Pattern <span class=\"title\">getNumberPattern</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Avoid use Pattern.compile in method body.</span></span><br><span class=\"line\">            Pattern localPattern = Pattern.compile(<span class=\"string\">&quot;[0-9]+&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> localPattern;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>\n<p>说明：Executors返回的线程池对象的弊端如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a. FixedThreadPool和SingleThreadPool:</span><br><span class=\"line\">允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</span><br><span class=\"line\">b. CachedThreadPool:</span><br><span class=\"line\">允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</span><br></pre></td></tr></table></figure>\n<p>个人开发建议，全局封装一个ThreadPoolExecutor线程池工具类，统一管理线程池申请。</p>\n</li>\n</ol>\n<h2 id=\"critical\">Critical<a title=\"#critical\" href=\"#critical\"></a></h2>\n<ol>\n<li>\n<p>Map/Set的key为自定义对象时，必须重写hashCode和equals。</p>\n<p>关于hashCode和equals的处理，遵循如下规则：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a. 只要重写equals，就必须重写hashCode。</span><br><span class=\"line\">b. 因为Set存储的是不重复的对象，依据hashCode和equals进行判断，所以Set存储的对象必须重写这两个方法。 </span><br><span class=\"line\">c. 如果自定义对象做为Map的键，那么必须重写hashCode和equals。</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。</p>\n</li>\n<li>\n<p>不能使用过时的类或方法。</p>\n</li>\n<li>\n<p>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。创建线程池的时候请使用带ThreadFactory的构造函数，并且提供自定义ThreadFactory实现或者使用第三方实现。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ThreadFactory namedThreadFactory = <span class=\"keyword\">new</span> ThreadFactoryBuilder()</span><br><span class=\"line\">    .setNameFormat(<span class=\"string\">&quot;demo-pool-%d&quot;</span>).build();</span><br><span class=\"line\">ExecutorService singleThreadPool = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">1024</span>), namedThreadFactory, <span class=\"keyword\">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">singleThreadPool.execute(()-&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class=\"line\">singleThreadPool.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerTaskThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TimerTaskThread</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.setName(<span class=\"string\">&quot;TimerTaskThread&quot;</span>); …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>个人开发建议，全局封装一个ThreadPoolExecutor线程池工具类，暴露初始化线程名称定义。</p>\n</li>\n<li>\n<p>在一个switch块内，每个case要么通过break/return等来终止，要么注释说明程序将继续执行到哪一个case为止；在一个switch块内，都必须包含一个default语句并且放在最后，即使它什么代码也没有。</p>\n</li>\n<li>\n<p>常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</p>\n</li>\n<li>\n<p>异常类命名使用Exception结尾。</p>\n</li>\n<li>\n<p>所有枚举类型字段必须要有注释，说明每个数据项的用途。</p>\n</li>\n<li>\n<p>所有编程相关的命名均不能以下划线或者美元符号命名。</p>\n</li>\n<li>\n<p>抽象类命名使用Abstract或Base开头，抽象类一般需要被继承使用的。</p>\n</li>\n<li>\n<p>方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase，必须遵从小驼峰形式</p>\n</li>\n<li>\n<p>浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals来判断。 浮点数采用“尾数+阶码”的编码方式，类似于科学计数法的“有效数字+指数”的表示方式。二进制无法精确表示大部分的十进制小数，具体原理参考《码出高效》。<br>\n改进方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>）指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的</span><br><span class=\"line\">    <span class=\"keyword\">float</span> a = <span class=\"number\">1.0f</span> - <span class=\"number\">0.9f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> b = <span class=\"number\">0.9f</span> - <span class=\"number\">0.8f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> diff = <span class=\"number\">1e-6f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Math.abs(a - b) &lt; diff) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">2</span>) 使用BigDecimal来定义值，再进行浮点数的运算操作</span><br><span class=\"line\">    BigDecimal a = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">&quot;1.0&quot;</span>);</span><br><span class=\"line\">    BigDecimal b = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">&quot;0.9&quot;</span>);</span><br><span class=\"line\">    BigDecimal c = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">&quot;0.8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    BigDecimal x = a.subtract(b);</span><br><span class=\"line\">    BigDecimal y = b.subtract(c);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x.equals(y)) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">Negative example:</span><br><span class=\"line\">        <span class=\"keyword\">float</span> g = <span class=\"number\">0.7f</span>-<span class=\"number\">0.6f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> h = <span class=\"number\">0.8f</span>-<span class=\"number\">0.7f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g == h) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">Positive example:</span><br><span class=\"line\">        <span class=\"keyword\">double</span> dis = <span class=\"number\">1e-6</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> d1 = <span class=\"number\">0.0000001d</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> d2 = <span class=\"number\">0d</span>;</span><br><span class=\"line\">        System.out.println(Math.abs(d1 - d2) &lt; dis);</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>\n<p>说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>\n</li>\n</ol>\n<h2 id=\"major\">Major<a title=\"#major\" href=\"#major\"></a></h2>\n<ol>\n<li>不允许任何魔法值（即未经定义的常量）直接出现在代码中。 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Negative example:</span><br><span class=\"line\">    <span class=\"comment\">//Magic values, except for predefined, are forbidden in coding.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key.equals(<span class=\"string\">&quot;Id#taobao_1&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">Positive example:</span><br><span class=\"line\">    String KEY_PRE = <span class=\"string\">&quot;Id#taobao_1&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (KEY_PRE.equals(key)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>中括号是数组类型的一部分，数组定义如下：String[] args</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Negative example:</span><br><span class=\"line\">        String extArrayString[] = &#123; <span class=\"string\">&quot;.amr&quot;</span>, <span class=\"string\">&quot;.ogg&quot;</span>, <span class=\"string\">&quot;.mp3&quot;</span>, <span class=\"string\">&quot;.aac&quot;</span>, <span class=\"string\">&quot;.ape&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;.flac&quot;</span>, <span class=\"string\">&quot;.wma&quot;</span>, <span class=\"string\">&quot;.wav&quot;</span>, <span class=\"string\">&quot;.mp2&quot;</span>, <span class=\"string\">&quot;.mid&quot;</span>, <span class=\"string\">&quot;.3gpp&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>\n<p>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</p>\n<p>个人建议，如果遇到包名必须用两个或以上的单词才能表达，可以采用Spring的命名方式，两个单词用点分割；开发过程中我们尽量采用一个单词进行表达。</p>\n</li>\n<li>\n<p>单个方法的总行数不超过80行。</p>\n<p>说明：除注释之外的方法签名、结束右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过80行。</p>\n</li>\n<li>\n<p>及时清理不再使用的代码段或配置信息。</p>\n<p>说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</p>\n</li>\n<li>\n<p>循环体内，字符串的联接方式，使用StringBuilder的append方法进行扩展。</p>\n<p>说明：反编译出的字节码文件显示每次循环都会new出一个StringBuilder对象，然后进行append操作，最后通过toString方法返回String对象，造成内存资源浪费。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Negative example:</span><br><span class=\"line\">        String result;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String string : tagNameList) &#123;</span><br><span class=\"line\">            result = result + string;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">        </span><br><span class=\"line\">Positive example:</span><br><span class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String string : tagNameList) &#123;</span><br><span class=\"line\">            stringBuilder.append(string);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String result = stringBuilder.toString();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</p>\n<p>说明：如有实现和调用注意事项，请一并说明。</p>\n</li>\n<li>\n<p>方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释。注意与代码对齐。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Put single line comment above code. (Note: align &#x27;//&#x27; comment with code)</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Some description about follow code. (Note: align &#x27;/**&#x27; comment with code)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>类、类属性、类方法的注释必须使用javadoc规范，使用/*<em>内容</em>/格式，不得使用//xxx方式和/<em>xxx</em>/方式。 说明：在IDE编辑窗口中，javadoc方式会提示相关注释，生成javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * XXX class function description.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XxClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">113323427779853001L</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * title</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * find by id</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ruleId rule id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> page start from 1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Result&lt;Xxxx&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result&lt;Xxxx&gt; <span class=\"title\">funcA</span><span class=\"params\">(Long ruleId, Integer page)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>类名使用UpperCamelCase风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO / DAO</p>\n</li>\n<li>\n<p>除常用方法（如getXxx/isXxx）等外，不要在条件判断中执行复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量，以提高可读性。</p>\n<p>说明：很多if语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Negative example:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((file.open(fileName, <span class=\"string\">&quot;w&quot;</span>) != <span class=\"keyword\">null</span>) &amp;&amp; (...) || (...)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">Positive example:</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> existed = (file.open(fileName, <span class=\"string\">&quot;w&quot;</span>) != <span class=\"keyword\">null</span>) &amp;&amp; (...) || (...);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existed) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>集合初始化时，指定集合初始值大小。</p>\n<p>说明：HashMap使用如下构造方法进行初始化，如果暂时无法确定集合大小，那么指定默认值（16）即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Negative example:   </span><br><span class=\"line\">  Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">Positive example: </span><br><span class=\"line\">  Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;(<span class=\"number\">16</span>);</span><br></pre></td></tr></table></figure></li>\n</ol>\n","prev":{"title":"各地隔离政策查询","link":"posts/1"},"next":{"title":"针对极光推送送达率的探究","link":"posts/1587547661"},"plink":"https://blog.ixin.run/posts/1589521857/","toc":[{"id":"blocker","title":"Blocker","index":"1"},{"id":"critical","title":"Critical","index":"2"},{"id":"major","title":"Major","index":"3"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1589521857/\" title=\"Alibaba插件代码质量检测问题归总\">https://blog.ixin.run/posts/1589521857/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}