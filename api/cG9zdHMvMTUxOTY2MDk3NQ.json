{"title":"Service的生命周期和启动方式等相关总结","date":"2018-02-26T16:02:55.000Z","date_formatted":{"ll":"2018年2月27日","L":"2018/02/27","MM-DD":"02-27"},"link":"posts/1519660975","comments":true,"tags":["基础组件"],"categories":["Android"],"updated":"2021-01-29T12:51:44.647Z","content":"<p>Service是安卓开发四大组件中和Activity最相似的组件，与Activity不同的是，Service是没有界面的,一直在后台运行。四大组件都有自己的生命周期，service也不例外，并且service的生命周期最长。</p>\n<a id=\"more\"></a>\n<h2 id=\"生命周期\">生命周期<a title=\"#生命周期\" href=\"#生命周期\"></a></h2>\n<p>Service生命周期中主要包含以下几个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法是Service子类必须实现的方法，该方法可返回一个IBinder对象，可用于其他组件与service组件相互通信</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> intent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * service重新绑定时并且在onUnbind方法返回true的情况下能够执行回调此方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> intent</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRebind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onRebind(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * service第一次创建后立即创建回调的方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 其他组件每次调用startService(intent),此方法便会执行一次，用于其他组件向service传值，返回值的设置又能控制自身的重启情况。早期版本是onStart(),现已经过时</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> intent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> flags</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> startId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Service关闭之前将会调用该方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * service解除绑定断开连接时调用该方法。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> intent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onUnbind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onUnbind(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动方式\">启动方式<a title=\"#启动方式\" href=\"#启动方式\"></a></h2>\n<p>在Android系统中针对service操作有两种方式：</p>\n<ol>\n<li>通过Context的startService()和stopService()，这种方式访问者与service之间没有关联，因此Service和访问者之间无法进行通讯和访问数据，另外即使访问者退出了，service也仍然运行。</li>\n<li>通过Context的bindService()和unbindService(),这种方式访问者与service绑定在一起，能够进行之间的通讯和数据访问，访问者一旦退出，service也终止了。</li>\n</ol>\n<p>service的两种启动方式图：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/2F01598595FB4AF3BBC50D3A71FF4B87?method=download&amp;shareKey=19512392f7e093ba64749862d17cbd31\" alt=\"service的两种启动方式图\"></p>\n<h3 id=\"通过context的startservice()和stopservice()\">通过Context的startService()和stopService()<a title=\"#通过context的startservice()和stopservice()\" href=\"#通过context的startservice()和stopservice()\"></a></h3>\n<p>首先在AndroidManifast注册此服务，这里和Activity注册很相似，也可以设置过滤器，其中android:priority=&quot;1000&quot;表示该服务的优先级设成最大。因为service没有界面所以我们就没必要设置lable,icon等标签了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;service android:name=<span class=\"string\">&quot;.MyService&quot;</span>&gt;</span><br><span class=\"line\">    &lt;intent-filter android:priority=<span class=\"string\">&quot;1000&quot;</span>&gt;</span><br><span class=\"line\">        &lt;category android:name=<span class=\"string\">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/service&gt;</span><br></pre></td></tr></table></figure>\n<p>开启服务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>,MyService.class);</span><br><span class=\"line\">startService(intent);</span><br></pre></td></tr></table></figure>\n<p>生命周期走向：onCreat --&gt; onStartCommand<br>\n再次点击开启按钮生命周期走向：onStartCommand</p>\n<p>停止服务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>,MyService.class);</span><br><span class=\"line\">stopService(intent);</span><br></pre></td></tr></table></figure>\n<p>生命周期走向：onDestroy<br>\n再次点击停止按钮生命周期走向：无</p>\n<h3 id=\"通过context的bindservice()和unbindservice()\">通过Context的bindService()和unbindService()<a title=\"#通过context的bindservice()和unbindservice()\" href=\"#通过context的bindservice()和unbindservice()\"></a></h3>\n<p>绑定服务调用bindService(Intent intent,ServiceConnection conn,int flags)。第一个参数：要启动的service。第二个参数：该参数是一个ServiceConnection对象，用于监听访问者和service的链接情况。第三个参数：指定绑定时是否自动创建service,一般指定Service.BIND_AUTO_CREATE(service自动创建启动)，不想自动创建可设为0(service此时并没有启动，但是当service启动时也同时绑定了)。</p>\n<p>既然访问者要与service进行通信，总要有一个中间桥梁来来沟通访问者和service。这个中间桥梁就是service中onBind()方法返回的IBinder对象（默认是返回null）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isBind; <span class=\"comment\">//判断是否绑定</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> MyBinder myBinder = <span class=\"keyword\">new</span> MyBinder();</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBinder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBind</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isBind;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    Log.e(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;+++++++++++++++++++++++++++++onBind&quot;</span>);</span><br><span class=\"line\">    isBind = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> myBinder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问者类中建立ServiceConnection对象，内部有两个方法：onServiceConnected()回调表示成功绑定，此时我们可以拿到service中的IBinder对象，进而也就能取到service中我们想要的数据。onServiceDisconnected回调表示断开绑定，注意这里的断开是由于异常终止或其他原因终止，也就是说访问者主动断开是不会回调的（一般情况下都不会回调此方法）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> MyService.MyBinder iBinder;</span><br><span class=\"line\"><span class=\"comment\">//建立访问者与service的连接</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ServiceConnection conn = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>, <span class=\"string\">&quot;+++++++++++++++++++++++++onServiceConnected&quot;</span>);</span><br><span class=\"line\">        iBinder = (MyService.MyBinder) service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>, <span class=\"string\">&quot;+++++++++++++++++++++++++onServiceDisconnected&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以下两个生命周期指示仅仅是绑定和取消绑定并且绑定时自动创建服务的情况。</p>\n<p>绑定服务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, MyService.class);</span><br><span class=\"line\">bindService(intent, conn, Service.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>\n<p>生命周期走向：onCreat --&gt; onBind --&gt;&gt;onServiceConnected<br>\n多次绑定无效只能绑定一次。</p>\n<p>取消绑定：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (iBinder!=<span class=\"keyword\">null</span> &amp;&amp; iBinder.isBind())&#123;</span><br><span class=\"line\">    unbindService(conn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生命周期走向：onUnbind --&gt; onDestroy<br>\n多次取消一定要注意取消过绑定了就不能再次取消绑定了，否则报异常错误。另外需注意如果访问者退出了也一定要取消绑定，例如在Activity中的onDestroy中取消绑定，否则会出现内存泄漏。</p>\n<h3 id=\"组合操作\">组合操作<a title=\"#组合操作\" href=\"#组合操作\"></a></h3>\n<p>a.绑定服务时自动创建启动服务（即第三个参数设置成Service.BIND_AUTO_CREATE）</p>\n<p>1.操作：启动服务–&gt;绑定服务–&gt;解除绑定–&gt;停止服务<br>\n生命周期走向：onCreat–&gt;onStartCommand–&gt;onBind–&gt;&gt;onServiceConnected–&gt;onUnbind–&gt;onDestroy</p>\n<p>2.操作：绑定服务–&gt;停止服务<br>\n生命周期走向：onCreat–&gt;onBind–&gt;&gt;onServiceConnected</p>\n<p>3.操作：启动服务–&gt;绑定服务–&gt;停止服务<br>\n生命周期走向：onCreat–&gt;onStartCommand–&gt;onBind–&gt;&gt;onServiceConnected</p>\n<p>4.操作：绑定服务–&gt;启动服务–&gt;解除绑定<br>\n生命周期走向：onCreat–&gt;onBind–&gt;&gt;onServiceConnected–&gt;onStartCommand–&gt;onUnbind</p>\n<p>综上四种操作得出一个结论：无论是启动（停止）服务还是绑定（取消绑定）都要成双成对才能形成一个完善的生命周期。</p>\n<p>b.绑定服务时 不自动创建启动服务（即第三个参数设置成0）</p>\n<p>5.操作：绑定服务<br>\n生命周期走向：无</p>\n<p>6.操作：绑定服务–&gt;启动服务<br>\n生命周期走向：onCreate–&gt;onBind–&gt;onStartCommand–&gt;&gt;onServiceConnected</p>\n<p>综上两种操作得出一个结论：如果绑定服务时不自动创建启动服务而随后再启动服务，此时再启动的同时也绑定了服务。</p>\n<p>c.生命周期中的onUnbind方法返回值的设置。</p>\n<p>7.操作：启动服务–&gt;绑定服务–&gt;解除绑定–&gt;绑定服务–&gt;解除绑定–&gt;停止服务</p>\n<p>返回值默认时，生命周期走向：onCreate–&gt;onStartCommand–&gt;onBind–&gt;&gt;onServiceConnected–&gt;onUnbind–&gt;&gt;onServiceConnected–&gt;onDestroy<br>\n第二次绑定服务时没有调用onBind方法，仅仅调用onServiceConnected,说明也绑定成功了，只是看着有点模糊。第二次解除绑定的时候没有调用onUnbind，当时停止服务时调用onDestroy，说明也取消绑定成功了，不过看着更加模糊。</p>\n<p>返回值为true时，生命周期走向：onCreate–&gt;onStartCommand–&gt;onBind–&gt;&gt;onServiceConnected–&gt;onRebind–&gt;onUnbind–&gt;&gt;onServiceConnected–&gt;onUnbind–&gt;onDestroy<br>\n第二次绑定服务时还是没有调用onBind方法，当时调用onRebind方法，并且取消绑定的时候也调用了onUnbind方法。</p>\n<p>综上对于多次绑定、取消绑定操作。只有在第一次绑定的时候才会调用onBind方法，但是每次都会在访问者连接回调onServiceConnected方法。绑定时生命周期中的onUnbind返回默认，在多次绑定、取消绑定操作的取消绑定的时候是不会调用onUnbind方法的，只有绑定时生命周期中的onUnbind返回true才会调用onUnbind方法，同时绑定过程也会调用onRebind方法。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/30F4EEE9D61F4FDAB9342392461D5572?method=download&amp;shareKey=124c946dd8d82838bafe70755d591b2d\" alt=\"service生命周期走向图\"></p>\n<h2 id=\"生命周期中的onstartcomand返回值设置\">生命周期中的onStartComand返回值设置<a title=\"#生命周期中的onstartcomand返回值设置\" href=\"#生命周期中的onstartcomand返回值设置\"></a></h2>\n<p>onStartComand使用时，返回的是一个(int)整形。这个整形可以有四个返回值：start_sticky、start_no_sticky、START_REDELIVER_INTENT、START_STICKY_COMPATIBILITY。<br>\n它们的含义分别是：</p>\n<ul>\n<li><strong>START_STICKY</strong><br>\n如果service进程被kill掉，保留service的状态为开始状态，但不保留递送的intent对象。随后系统会尝试重新创建service，由于服务状态为开始状态，所以创建服务后一定会调用onStartCommand(Intent,int,int)方法。如果在此期间没有任何启动命令被传递到service，那么参数Intent将为null。</li>\n<li><strong>START_NOT_STICKY</strong><br>\n“非粘性的”。使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统不会自动重启该服务。</li>\n<li><strong>START_REDELIVER_INTENT</strong><br>\n重传Intent。使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统会自动重启该服务，并将Intent的值传入。</li>\n<li><strong>START_STICKY_COMPATIBILITY</strong><br>\nSTART_STICKY的兼容版本，但不保证服务被kill后一定能重启。</li>\n</ul>\n<p>通常情况我们会选择返回一个START_REDELIVER_INTENT，保证service的稳定和数据的完整。</p>\n<p>onStartComand参数flags含义 ：flags表示启动服务的方式。<br>\n<code>Additional data about this start request. Currently either 0, START_FLAG_REDELIVERY, or START_FLAG_RETRY.</code></p>\n<ul>\n<li><strong>START_FLAG_REDELIVERY</strong><br>\n如果你实现onStartCommand()来安排异步工作或者在另一个线程中工作, 那么你可能需要使用START_FLAG_REDELIVERY来让系统重新发送一个intent。这样如果你的服务在处理它的时候被Kill掉, Intent不会丢失.</li>\n<li><strong>START_FLAG_RETRY</strong><br>\n表示服务之前被设为START_STICKY，则会被传入这个标记。</li>\n</ul>\n<h2 id=\"intentservice的使用\">IntentService的使用<a title=\"#intentservice的使用\" href=\"#intentservice的使用\"></a></h2>\n<p>IntentService作为service的子类，继承IntentService，却不是一个普通service，它也有service的生命周期，却比一般的service多了一些特殊的功能。我们知道service和Activity很类似，它也有一个主线程，它的主线程同样也不能进行耗时操作，否则会报ANR错误。平时我们用service下载东西或者超时操作都是新建一个子线程。IntentService解决了这个不足，新建IntentService必须要有一个无参的构造方法和onHandleIntent()方法。无参的构造方法要传入一个字符串来命名工作线程（官方指出为了调试用），onHandleIntent()就是来处理耗时操作的。IntentService具有如下特征：</p>\n<ol>\n<li>IntentService会创建单独的worker线程来处理Intent请求。IntentService会使用队列来管理所有请求的Intent,每当访问者通过Intent请求启动IntentService，Intentservice会将该Intent加入队列中。然后开启一条新的work线程来处理该Intent。保证同一时刻只处理一个intent请求。</li>\n<li>IntentService会创建单独的worker线程来处理onHandlerIntent()方法实现的代码，开发者无需处理多线程问题。</li>\n<li>当所有请求处理完成后。IntentService就会停止，开发者无需调用stopService()或者stopSelf()来停止IntentService。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIntentService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IntentService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;++++++++++++++IntentService+++++++++++++++onCreate&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;++++++++++++++IntentService+++++++++++++++onStartCommand&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *至少要有一个无参构造器，里面的字符串随便命名，只是为了命名工作线程，并且也只是为了调试。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyIntentService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">&quot;MyIntentService&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;++++++++++++++IntentService+++++++++++++++onHandleIntent&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;++++++++++++++IntentService+++++++++++++++onDestroy&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动IntentService和启动一般的service一样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, MyIntentService.class);</span><br><span class=\"line\">startService(intent);</span><br></pre></td></tr></table></figure>\n<p>启动一次生命周期走向：onCreat–&gt;onStartCommand–&gt;onHandleIntent–&gt;onDestroy<br>\n如果耗时操作还未完成（此时IntentService还未关闭），多次启动IntentService生命周期走向：onCreat–&gt;onStartCommand–&gt;onHandleIntent–&gt;onStartCommand–&gt;onDestroy</p>\n<p>综上多次启动IntentService每次都调用onStartCommand,但是onHandleIntent只调用一次。通常我们用IntentService做一些耗时的操作，比如下载，可以用Messenger来进行访问者和IntentService之间的通信。</p>\n<p>访问者创建一个Handler来获取IntentService中动作信息:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接收IntentService中传来的消息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler = <span class=\"keyword\">new</span> Handler() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (msg.what)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MyIntentService.HANDLERINTENT_START:</span><br><span class=\"line\">                    Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">&quot;IntentService调用onHandleIntent()方法开始进行计算&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MyIntentService.HANDLERINTENT_OPERA:</span><br><span class=\"line\">                    intentservice_result_tv.setText(msg.arg1+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MyIntentService.HANDLERINTENT_FINISH:</span><br><span class=\"line\">                    Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">&quot;IntentService调用onHandleIntent()方法计算过程结束&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>访问者向IntentService传递Messenger对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, MyIntentService.class);</span><br><span class=\"line\">intent.putExtra(MyIntentService.EXTRA_MESSAGER, <span class=\"keyword\">new</span> Messenger(handler));</span><br><span class=\"line\">startService(intent);</span><br></pre></td></tr></table></figure>\n<p>IntentService中接受到访问者的Messenger对象并进行通信：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">&quot;TAG&quot;</span>,<span class=\"string\">&quot;++++++++++++++IntentService+++++++++++++++onHandleIntent&quot;</span>);</span><br><span class=\"line\">        Bundle extras = intent.getExtras();</span><br><span class=\"line\">        Messenger messenger = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(extras != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            messenger = (Messenger)extras.get(EXTRA_MESSAGER);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//通知计算开始</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (messenger!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            sendMessage(messenger,HANDLERINTENT_START,-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//通知计算进行中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=Integer.MIN_VALUE;i&lt;Integer.MAX_VALUE;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i%<span class=\"number\">100000000</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (messenger!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    sendMessage(messenger,HANDLERINTENT_OPERA,i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//通知计算结束</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (messenger!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            sendMessage(messenger,HANDLERINTENT_FINISH,-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Messenger mesenger,<span class=\"keyword\">int</span> what,<span class=\"keyword\">int</span> result)</span></span>&#123;</span><br><span class=\"line\">        Message msg = Message.obtain( );</span><br><span class=\"line\">        msg.what = what;</span><br><span class=\"line\">        msg.arg1 = result;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mesenger.send(msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是我对Android四大组件之一Service进行了一个完整总结，这些都是基础部分，基础把握好是一个关键。</p>\n","prev":{"title":"Java泛型的认识和理解","link":"posts/1521043691"},"next":{"title":"Activity的生命周期和启动模式","link":"posts/1519655269"},"plink":"https://blog.ixin.run/posts/1519660975/","toc":[{"id":"生命周期","title":"生命周期","index":"1"},{"id":"启动方式","title":"启动方式","index":"2","children":[{"id":"通过context的startservice()和stopservice()","title":"通过Context的startService()和stopService()","index":"2.1"},{"id":"通过context的bindservice()和unbindservice()","title":"通过Context的bindService()和unbindService()","index":"2.2"},{"id":"组合操作","title":"组合操作","index":"2.3"}]},{"id":"生命周期中的onstartcomand返回值设置","title":"生命周期中的onStartComand返回值设置","index":"3"},{"id":"intentservice的使用","title":"IntentService的使用","index":"4"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1519660975/\" title=\"Service的生命周期和启动方式等相关总结\">https://blog.ixin.run/posts/1519660975/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}