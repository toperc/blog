{"title":"Jvm、Dalvik和Art的区别你知道吗","date":"2021-03-15T04:45:15.000Z","date_formatted":{"ll":"2021年3月15日","L":"2021/03/15","MM-DD":"03-15"},"link":"posts/1615783515","comments":true,"tags":["系统"],"categories":["Android"],"updated":"2021-03-15T06:17:43.293Z","content":"<p>早前android给人的印象是卡，慢，无；但是从6.0依赖的手机似乎人们不再提android的这些诟病了，无非来一句“不高端”。知道什么原因吗？有同学说，android一个劲的提升内存，和CPU的升级，但这只是其中的表象，为什么会提升内存呢？认识一下Jvm、Dalvik和Art，你将一切都明白了。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是jvm\">什么是JVM<a title=\"#什么是jvm\" href=\"#什么是jvm\"></a></h2>\n<p>JVM本质上就是一个软件，是计算机硬件的一层软件抽象，在这之上才能够运行Java程序，JAVA在编译后会生成类似于汇编语言的.class字节码文件，与C语言编译后产生的汇编语言不同的是，C编译成的汇编语言会直接在硬件上跑，但JAVA编译后生成的.class字节码是在JVM上跑，需要由JVM把字节码翻译成机器指令，才能使JAVA程序跑起来，更确切的说是能够与底层沟通。</p>\n<p>JVM运行在操作系统上，屏蔽了底层实现的差异，从而有了JAVA平台独立性和Write Once Run Anywhere。</p>\n<p>根据JVM规范实现的具体虚拟机有几十种，主流的JVM包括Hotspot、Jikes RVM等，都是用C/C++和汇编编写的，<strong>每个JRE编译的时候针对每个平台编译，因此下载JRE（JVM、Java核心类库和支持文件）的时候是分平台的</strong>，JVM的作用是把平台无关的.class里面的字节码翻译成平台相关的机器码，来实现跨平台。</p>\n<h2 id=\"什么是dalvik\">什么是Dalvik<a title=\"#什么是dalvik\" href=\"#什么是dalvik\"></a></h2>\n<p>Android 运行环境主要指的Dalvik虚拟机技术，也就是安卓虚拟机DVM。每个Android应用进程对应着一个独立的Dalvik虚拟机实例并在其解释下执行。<strong>Dalvik虚拟机使用的是寄存器架构而不是JVM中常见的栈架构</strong>。Dalvik没有遵循Java虚拟机规范，<strong>不能直接执行Java的.class文件，而是执行.dex文件</strong>。其中.dex（Dalvik Executable）文件是通过.class文件转化而来，安卓使用Java语法编写应用程序，可以直接使用大部分的Java API等。</p>\n<h2 id=\"jvm和dalvik的区别\">JVM和Dalvik的区别<a title=\"#jvm和dalvik的区别\" href=\"#jvm和dalvik的区别\"></a></h2>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/1385DEFA3803431E96AD9924BCF1DDD6?method=download&amp;shareKey=a7a3b0adbae850f5a7d21912f4f5c21f\" alt=\"JVM和Dalvik工作流程\" class=\"φbs\"></p>\n<ol>\n<li>而 JVM 基于栈，Dalvik 基于寄存器。</li>\n<li>Java虚拟机运行java字节码，Dalvik虚拟机运行的是其专有的文件格式Dex。</li>\n</ol>\n<p>JVM与DVM 二者最大的区别在于JVM是以基于栈的虚拟机(Stack-based)，而DVM是基于寄存器的虚拟机(Register-based)。基于寄存器的虚拟机虽然比基于堆栈的虚拟机在硬件通用性上要差一些，但是它的代码执行效率却更好。 显然，后者最大的好处在于可以根据硬件实现更大的优化，这更适合移动设备的特点。</p>\n<p>Java类文件在编译过后，会产生至少一个.class文件包含大量冗余信息，dex文件格式会把所有 的.class文件内容整合到一个.dex文件中。通常一个应用apk只有一个classes.dex，但是开启了multiDexEnabled true分包可以生成多个.dex文件。即减少了整体文件的尺寸和IO操作，也提高了类的查找速度。增加了对新的操作码的支持，使文件结构尽量简洁，使用等长的指令，借以提高解析速度。</p>\n<h2 id=\"什么是art\">什么是Art<a title=\"#什么是art\" href=\"#什么是art\"></a></h2>\n<p>ART(Android Runtime)是Android 4.4发布的，用来替换Dalvik虚拟，Android 4.4之前默认采用的还是DVM，系统会提供一个选项来开启ART模式。在Android 5.0时，默认采用ART，DVM从此退出历史舞台。</p>\n<p>在Dalvik下，应用每次运行都需要通过即时编译器（JIT，Just In Time）将字节码转换为机器码，即每次都要编译加运行，这一机制并不高效，但让应用安装比较快，而且更容易在不同硬件和架构上运行。</p>\n<p>ART完全改变了这种做法，在应用安装时就预编译字节码到机器码，这个过程叫做预编译（AOT,Ahead-Of-Time），使其成为真正的本地应用，应用程序执行将更有效率，启动更快。</p>\n<h2 id=\"dalvik与art的区别\">Dalvik与Art的区别<a title=\"#dalvik与art的区别\" href=\"#dalvik与art的区别\"></a></h2>\n<p>Dalvik每次都要编译再运行，这就导致需要不断的CPU计算，卡，慢，续航差。</p>\n<p>ART优点：</p>\n<p>① 系统性能显著提升</p>\n<p>② 应用启动更快、运行更快、体验更流畅、触感反馈更及时</p>\n<p>③ 续航能力提升</p>\n<p>④ 支持更低的硬件</p>\n<p>ART缺点</p>\n<p>① 更大的存储空间占用，可能增加10%-20%（空间换时间大法）</p>\n<p>② 更长的应用安装时间</p>\n","prev":{"title":"DO AS ONE WISHES","link":"posts/0"},"next":{"title":"HttpURLConnection使用细节总结","link":"posts/1615708883"},"plink":"https://blog.ixin.run/posts/1615783515/","toc":[{"id":"什么是jvm","title":"什么是JVM","index":"1"},{"id":"什么是dalvik","title":"什么是Dalvik","index":"2"},{"id":"jvm和dalvik的区别","title":"JVM和Dalvik的区别","index":"3"},{"id":"什么是art","title":"什么是Art","index":"4"},{"id":"dalvik与art的区别","title":"Dalvik与Art的区别","index":"5"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1615783515/\" title=\"Jvm、Dalvik和Art的区别你知道吗\">https://blog.ixin.run/posts/1615783515/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}