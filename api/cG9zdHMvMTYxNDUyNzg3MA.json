{"title":"Android开发之玩转Android属性动画","date":"2021-02-28T15:57:29.000Z","date_formatted":{"ll":"2021年2月28日","L":"2021/02/28","MM-DD":"02-28"},"link":"posts/1614527870","comments":true,"tags":["Android","动画"],"categories":["Android"],"updated":"2021-03-10T01:15:14.486Z","content":"<p>前两篇重点讲述了Android开发过程中补间动画和帧动画知识点，本篇文章我们重点总结一下属性动画的使用和原理。</p>\n<a id=\"more\"></a>\n<p>Android动画系列：</p>\n<ul>\n<li><a href=\"https://blog.ixin.run/posts/1614434754\" target=\"_blank\">《Android开发之玩转Android补间动画》</a></li>\n<li><a href=\"https://blog.ixin.run/posts/1614486338\" target=\"_blank\">《Android开发之玩转Android帧动画》</a></li>\n<li><a href=\"https://blog.ixin.run/posts/1614527870\" target=\"_blank\">《Android开发之玩转Android属性动画》</a></li>\n</ul>\n<h2 id=\"什么是属性动画\">什么是属性动画<a title=\"#什么是属性动画\" href=\"#什么是属性动画\"></a></h2>\n<p>在一段时间内通过修改对象的属性而形成的动画叫属性动画（Property Animation），Google官方在Android 3.0添加<code>Property Animation</code>。属性动画的主要是修改对象的属性，如 View 的背景颜色、透明值、位置等。</p>\n<h2 id=\"属性动画和补间动画的区别\">属性动画和补间动画的区别<a title=\"#属性动画和补间动画的区别\" href=\"#属性动画和补间动画的区别\"></a></h2>\n<p>有同学可能会问不是已经有补间动画吗，为什么要引入属性动画？换句话说，Property Animation 到底能干哪些 Tween Animation 不能干的活呢？</p>\n<p>Tween Animation 存在的问题：</p>\n<ol>\n<li>Tween Animation 只能作用于 View，不能作用于普通 Object 的属性。</li>\n<li>Tween Animation 只能改变 View 的一部分属性。Tween Animation 只支持修改 View 的这几个方面：Alpha、Scale、Translate、Rotate 和这些的组合，一旦想要改变的 View 的属性不在这个范围内，Tween Animation 就无能为力了，如 View 的 BackgroundColor。</li>\n<li>Tween Animation 只能改变 View 的“表面”位置，不能改变 View 的实际位置。</li>\n</ol>\n<h2 id=\"属性动画相关类\">属性动画相关类<a title=\"#属性动画相关类\" href=\"#属性动画相关类\"></a></h2>\n<p>属性动画涉及的类主要有：</p>\n<ol>\n<li>Animator，所有 Animator 的父类，主要用于定义通用的接口。</li>\n<li>AnimatorSet，主要用于组合多个属性动画。</li>\n<li>ValueAnimator，属性动画的一种，主要用于根据起始值和终止值产生动画，只负责产生在起始值和终止值之间的值，<br>\n不负责更新界面，需要用户自己实现更新界面的逻辑。</li>\n<li>ObjectAnimator，属性动画的一种，主要用于根据起始值和终止值产生动画，并将动画产生的值设置在目标对象上。</li>\n<li>TimeAnimator，提供了一个简单的回调机制，通过 TimeAnimator.TimeListener，在动画的每一帧处通知你。这个动画器没有时间，插值或是对象值设定。回调监听器为每一帧动画接受信息，包括总运行时间和从前一帧到现在的运行时间。</li>\n</ol>\n<p>继承结构如下：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/EDAC28F364874F24A189ED550153FB7A?method=download&amp;shareKey=df8e9218ec3b54ec51f3a3c5ca460318\" alt=\"属性动画继承结构图\" class=\"φbs\"></p>\n<h3 id=\"valueanimator和objectanimator主要区别\">ValueAnimator和ObjectAnimator主要区别<a title=\"#valueanimator和objectanimator主要区别\" href=\"#valueanimator和objectanimator主要区别\"></a></h3>\n<p>该类作为ValueAnimator的子类不仅继承了ValueAnimator的所有方法和特性，并且还封装很多实用的方法，方便开发人员快速实现动画。同时，由于属性值会自动更新，使用ObjectAnimator实现动画不需要像ValueAnimator那样必须实现 ValueAnimator.AnimatorUpdateListener ，因此实现任意对象的动画显示就更加容易了。我们在大部分的开发工作中，都会使用ObjectAnimator而非ValueAnimator实现我们所需的动画效果。</p>\n<h2 id=\"属性动画实现形式\">属性动画实现形式<a title=\"#属性动画实现形式\" href=\"#属性动画实现形式\"></a></h2>\n<p>属性动画的实现形式有两种：xml创建和code实现。其中xml创建的xml动画文件要放在<code>res/animator</code>目录下，注意此处和补间动画（Tween Animation）存放位置不同。</p>\n<p>通常情况下属性动画一般建议通过代码进行实现，因为他更灵活，尤其是在自定义View中常常有属性动画的身影。当然也需要根据实际场景自行选择，下边就通过这两种形式来总结一下属性动画几个类的使用。</p>\n<h3 id=\"valueanimator\">ValueAnimator<a title=\"#valueanimator\" href=\"#valueanimator\"></a></h3>\n<p>ValueAnimator是Property Animation系统的核心类，它包含了配置Property Animation属性的大部分方法，那要实现一个Property Animation,都需要直接或间接使用ValueAnimator类。</p>\n<p>一般使用ValueAnimator实现动画分为以下几个步骤：</p>\n<ol>\n<li>调用ValueAnimation类中的ofInt(int…values)、ofFloat(String propertyName,float…values)等静态方法实例化ValueAnimator对象;</li>\n<li>调用addUpdateListener(AnimatorUpdateListener mListener)方法为ValueAnimator对象设置属性变化的监听器，并在AnimatorUpdateListener 中的实现方法为目标对象的属性设置计算好的属性值。</li>\n<li>创建自定义的插值器（Interpolator），调用setInterpolator(TimeInterpolator value)为ValueAniamtor设置自定义的Interpolator;(可选，不设置默认为缺省值)</li>\n<li>创建自定义的估值器（TypeEvaluator）,调用setEvaluator(TypeEvaluator value)为ValueAnimator设置自定义的TypeEvaluator;(可选，不设置默认为缺省值)</li>\n<li>设置动画的持续时间、是否重复及重复次数等属性;</li>\n<li>为ValueAnimator设置目标对象并开始执行动画。</li>\n</ol>\n<p>需要注意目标对象的需要被设置的属性必须拥有<code>get\\set</code>方法，格式类似 set<propertyName>()。</p>\n<h4 id=\"通过xml创建\">通过XML创建<a title=\"#通过xml创建\" href=\"#通过xml创建\"></a></h4>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;animator</span><br><span class=\"line\">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:duration=&quot;int&quot;</span><br><span class=\"line\">    android:interpolator=&quot;@[package:]anim/interpolator_resource&quot;</span><br><span class=\"line\">    android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]</span><br><span class=\"line\">    android:valueFrom=&quot;float | int | color&quot;</span><br><span class=\"line\">    android:valueTo=&quot;float | int | color&quot;</span><br><span class=\"line\">    android:startOffset=&quot;int&quot;</span><br><span class=\"line\">    android:repeatCount=&quot;int&quot;</span><br><span class=\"line\">    android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/D7BC9B3222164F8DB357F17BD18DD4D3?method=download&amp;shareKey=0081a1c45dc3274244438f5976ea2e74\" alt=\"ValueAnimator属性详解\" class=\"φbs\"></p>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1. 创建 value_animator.xml</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">animator</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:duration</span>=<span class=\"string\">&quot;1800&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:interpolator</span>=<span class=\"string\">&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:valueType</span>=<span class=\"string\">&quot;floatType&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">&quot;-100&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:valueTo</span>=<span class=\"string\">&quot;800&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:startOffset</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:repeatCount</span>=<span class=\"string\">&quot;infinite&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:repeatMode</span>=<span class=\"string\">&quot;reverse&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">//2. 在代码中使用 value_animator</span><br><span class=\"line\">ValueAnimator mValueAnimator = (ValueAnimator) AnimatorInflater.loadAnimator(this, R.animator.value_animator);</span><br><span class=\"line\">mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onAnimationUpdate(ValueAnimator animation) &#123;</span><br><span class=\"line\">        mTarget.setY((Float) animation.getAnimatedValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">mValueAnimator.start();</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过代码实现\">通过代码实现<a title=\"#通过代码实现\" href=\"#通过代码实现\"></a></h4>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class=\"keyword\">float</span>... values);</span><br><span class=\"line\">valueAnimator.setDuration(<span class=\"keyword\">long</span> duration);</span><br><span class=\"line\">valueAnimator.setInterpolator(TimeInterpolator value);</span><br><span class=\"line\">valueAnimator.addUpdateListener(AnimatorUpdateListener listener);</span><br><span class=\"line\">…</span><br><span class=\"line\">valueAnimator.start();</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValueAnimator mValueAnimator = ValueAnimator.ofFloat(<span class=\"number\">0</span>, <span class=\"number\">800</span>);</span><br><span class=\"line\">mValueAnimator.setDuration(<span class=\"number\">1800</span>);</span><br><span class=\"line\">mValueAnimator.setInterpolator(<span class=\"keyword\">new</span> AccelerateDecelerateInterpolator());</span><br><span class=\"line\">mValueAnimator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class=\"line\">mValueAnimator.setRepeatMode(ValueAnimator.REVERSE);</span><br><span class=\"line\">mValueAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;</span><br><span class=\"line\">        mTarget.setY((Float) animation.getAnimatedValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">mValueAnimator.start();</span><br></pre></td></tr></table></figure>\n<h3 id=\"objectanimator\">ObjectAnimator<a title=\"#objectanimator\" href=\"#objectanimator\"></a></h3>\n<p>要动画显示 View 对象的某个属性，比如颜色或旋转值，我们所有要做的事情就是创建一个 Property animation，并设定对应的 View 属性。那接下来我们就用ObjectAnimator类来分别实现View的透明度渐变、收缩、移动和旋转等动画效果，那在此之前我们也来总结下使用ObjectAnimator实现动画的几个步骤，如下：</p>\n<ol>\n<li>通过调用ofFloat()、ofInt()等方法创建ObjectAnimator对象，并设置目标对象、需要改变的目标属性名、初始值和结束值；</li>\n<li>设置动画的持续时间、是否重复及重复次数等属性；</li>\n<li>启动动画。</li>\n</ol>\n<p>常用的几个属性值解释：</p>\n<ul>\n<li>translationX 和 translationY：这两个属性控制着 View 的屏幕位置坐标变化量，以 layout 容器的左上角为坐标原点;</li>\n<li>rotation、rotationX 和 rotationY：这三个属性控制着 2D 旋转角度（rotation属性）和围绕某枢轴点的 3D 旋转角度;</li>\n<li>scaleX、scaleY：这两个属性控制着 View 围绕某枢轴点的 2D 缩放比例;</li>\n<li>pivotX 和 pivotY: 这两个属性控制着枢轴点的位置，前述的旋转和缩放都是以此点为中心展开的,缺省的枢轴点是 View 对象的中心点;</li>\n<li>x 和 y：这是指 View 在容器内的最终位置，等于 View 左上角相对于容器的坐标加上 translationX 和 translationY 后的值;</li>\n<li>alpha：表示 View 的 alpha 透明度。缺省值为 1 （不透明），为 0 则表示完全透明（看不见）;</li>\n</ul>\n<h4 id=\"通过xml创建-1\">通过XML创建<a title=\"#通过xml创建-1\" href=\"#通过xml创建-1\"></a></h4>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;objectAnimator</span><br><span class=\"line\">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:duration=&quot;int&quot;</span><br><span class=\"line\">    android:interpolator=&quot;@[package:]anim/interpolator_resource&quot;</span><br><span class=\"line\">    android:propertyName=&quot;string&quot;</span><br><span class=\"line\">    android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]</span><br><span class=\"line\">    android:valueFrom=&quot;float | int | color&quot;</span><br><span class=\"line\">    android:valueTo=&quot;float | int | color&quot;</span><br><span class=\"line\">    android:startOffset=&quot;int&quot;</span><br><span class=\"line\">    android:repeatCount=&quot;int&quot;</span><br><span class=\"line\">    android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/F6785A8BD0E84CA6A024A9C6D44425FD?method=download&amp;shareKey=742f430c9d0e7f5e5ce5123f3613cc16\" alt=\"ObjectAnimator属性详解\" class=\"φbs\"></p>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1. 创建 object_animator.xml</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:duration</span>=<span class=\"string\">&quot;1800&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:interpolator</span>=<span class=\"string\">&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:propertyName</span>=<span class=\"string\">&quot;Y&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:valueType</span>=<span class=\"string\">&quot;floatType&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:valueTo</span>=<span class=\"string\">&quot;800&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:startOffset</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:repeatCount</span>=<span class=\"string\">&quot;infinite&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:repeatMode</span>=<span class=\"string\">&quot;reverse&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">//2. 在代码中使用 object_animator</span><br><span class=\"line\">ObjectAnimator mObjectAnimator = (ObjectAnimator) AnimatorInflater.loadAnimator(this, R.animator.object_animator);</span><br><span class=\"line\">mObjectAnimator.setTarget(mTarget);</span><br><span class=\"line\">mObjectAnimator.start();</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过代码实现-1\">通过代码实现<a title=\"#通过代码实现-1\" href=\"#通过代码实现-1\"></a></h4>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectAnimator objectAnimator = ObjectAnimator.ofObject(Object target, String propertyName, TypeEvaluator evaluator, Object... values);</span><br><span class=\"line\">objectAnimator.setDuration(<span class=\"keyword\">long</span> duration);</span><br><span class=\"line\">objectAnimator.setInterpolator(TimeInterpolator value);</span><br><span class=\"line\">…</span><br><span class=\"line\">objectAnimator.start();</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectAnimator mObjectAnimator = ObjectAnimator.ofFloat(mTarget, <span class=\"string\">&quot;y&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>);</span><br><span class=\"line\">mObjectAnimator.setDuration(<span class=\"number\">1800</span>);</span><br><span class=\"line\">mObjectAnimator.setInterpolator(<span class=\"keyword\">new</span> AccelerateDecelerateInterpolator());</span><br><span class=\"line\">mObjectAnimator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class=\"line\">mObjectAnimator.setRepeatMode(ValueAnimator.REVERSE);</span><br><span class=\"line\">mObjectAnimator.start();</span><br></pre></td></tr></table></figure>\n<h3 id=\"animatorset\">AnimatorSet<a title=\"#animatorset\" href=\"#animatorset\"></a></h3>\n<h4 id=\"通过xml创建-2\">通过XML创建<a title=\"#通过xml创建-2\" href=\"#通过xml创建-2\"></a></h4>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;set</span><br><span class=\"line\">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:ordering=[&quot;together&quot; | &quot;sequentially&quot;]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;objectAnimator</span><br><span class=\"line\">        android:propertyName=&quot;string&quot;</span><br><span class=\"line\">        android:duration=&quot;int&quot;</span><br><span class=\"line\">        android:valueFrom=&quot;float | int | color&quot;</span><br><span class=\"line\">        android:valueTo=&quot;float | int | color&quot;</span><br><span class=\"line\">        android:startOffset=&quot;int&quot;</span><br><span class=\"line\">        android:repeatCount=&quot;int&quot;</span><br><span class=\"line\">        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]</span><br><span class=\"line\">        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;animator</span><br><span class=\"line\">        android:duration=&quot;int&quot;</span><br><span class=\"line\">        android:valueFrom=&quot;float | int | color&quot;</span><br><span class=\"line\">        android:valueTo=&quot;float | int | color&quot;</span><br><span class=\"line\">        android:startOffset=&quot;int&quot;</span><br><span class=\"line\">        android:repeatCount=&quot;int&quot;</span><br><span class=\"line\">        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]</span><br><span class=\"line\">        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/70BD016F165A4104934A033EE7431068?method=download&amp;shareKey=24d62f9bd4944a3196fb7183ef55f12a\" alt=\"AnimatorSet属性详解\" class=\"φbs\"></p>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1. 创建 animator_set.xml</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:ordering</span>=<span class=\"string\">&quot;together&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    &lt;objectAnimator</span><br><span class=\"line\">        android:duration=&quot;@integer/integer_one_thousand_and_eight_hundred&quot;</span><br><span class=\"line\">        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span><br><span class=\"line\">        android:propertyName=&quot;Y&quot;</span><br><span class=\"line\">        android:valueType=&quot;floatType&quot;</span><br><span class=\"line\">        android:valueFrom=&quot;0&quot;</span><br><span class=\"line\">        android:valueTo=&quot;800&quot;</span><br><span class=\"line\">        android:startOffset=&quot;0&quot;</span><br><span class=\"line\">        android:repeatCount=&quot;infinite&quot;</span><br><span class=\"line\">        android:repeatMode=&quot;reverse&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;objectAnimator</span><br><span class=\"line\">        android:duration=&quot;@integer/integer_one_thousand_and_eight_hundred&quot;</span><br><span class=\"line\">        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span><br><span class=\"line\">        android:propertyName=&quot;ScaleX&quot;</span><br><span class=\"line\">        android:valueType=&quot;floatType&quot;</span><br><span class=\"line\">        android:valueFrom=&quot;1&quot;</span><br><span class=\"line\">        android:valueTo=&quot;2&quot;</span><br><span class=\"line\">        android:startOffset=&quot;0&quot;</span><br><span class=\"line\">        android:repeatCount=&quot;infinite&quot;</span><br><span class=\"line\">        android:repeatMode=&quot;reverse&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">    &lt;objectAnimator</span><br><span class=\"line\">        android:duration=&quot;@integer/integer_one_thousand_and_eight_hundred&quot;</span><br><span class=\"line\">        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span><br><span class=\"line\">        android:propertyName=&quot;ScaleY&quot;</span><br><span class=\"line\">        android:valueType=&quot;floatType&quot;</span><br><span class=\"line\">        android:valueFrom=&quot;1&quot;</span><br><span class=\"line\">        android:valueTo=&quot;2&quot;</span><br><span class=\"line\">        android:startOffset=&quot;0&quot;</span><br><span class=\"line\">        android:repeatCount=&quot;infinite&quot;</span><br><span class=\"line\">        android:repeatMode=&quot;reverse&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//2. 在代码中使用 animator_set</span><br><span class=\"line\">AnimatorSet mAnimatorSet = (AnimatorSet)AnimatorInflater.loadAnimator(this, R.animator.animator_set);</span><br><span class=\"line\">mAnimatorSet.setTarget(mTarget);</span><br><span class=\"line\">mAnimatorSet.start();</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过代码实现-2\">通过代码实现<a title=\"#通过代码实现-2\" href=\"#通过代码实现-2\"></a></h4>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnimatorSet animatorSet = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">animatorSet.playTogether(Animator... items);</span><br><span class=\"line\">animatorSet.playSequentially(Animator... items);</span><br><span class=\"line\"><span class=\"comment\">//非必须</span></span><br><span class=\"line\">animatorSet.setTarget(mTarget);</span><br><span class=\"line\">…</span><br><span class=\"line\">animatorSet.start();</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectAnimator translateYObjectAnimator = ObjectAnimator.ofFloat(mTarget, <span class=\"string\">&quot;y&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>);</span><br><span class=\"line\">translateYObjectAnimator.setDuration(<span class=\"number\">1800</span>);</span><br><span class=\"line\">translateYObjectAnimator.setInterpolator(<span class=\"keyword\">new</span> AccelerateDecelerateInterpolator());</span><br><span class=\"line\">translateYObjectAnimator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class=\"line\">translateYObjectAnimator.setRepeatMode(ValueAnimator.REVERSE);</span><br><span class=\"line\">ObjectAnimator scaleXObjectAnimator = ObjectAnimator.ofFloat(mTarget, <span class=\"string\">&quot;scaleX&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">scaleXObjectAnimator.setDuration(<span class=\"number\">1800</span>);</span><br><span class=\"line\">scaleXObjectAnimator.setInterpolator(<span class=\"keyword\">new</span> AccelerateDecelerateInterpolator());</span><br><span class=\"line\">scaleXObjectAnimator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class=\"line\">scaleXObjectAnimator.setRepeatMode(ValueAnimator.REVERSE);</span><br><span class=\"line\">ObjectAnimator scaleYObjectAnimator = ObjectAnimator.ofFloat(mTarget, <span class=\"string\">&quot;scaleY&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">scaleYObjectAnimator.setDuration(<span class=\"number\">1800</span>);</span><br><span class=\"line\">scaleYObjectAnimator.setInterpolator(<span class=\"keyword\">new</span> AccelerateDecelerateInterpolator());</span><br><span class=\"line\">scaleYObjectAnimator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class=\"line\">scaleYObjectAnimator.setRepeatMode(ValueAnimator.REVERSE);</span><br><span class=\"line\">mAnimatorSet = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">mAnimatorSet.playTogether(translateYObjectAnimator, scaleXObjectAnimator, scaleYObjectAnimator);</span><br><span class=\"line\">mAnimatorSet.playSequentially();</span><br><span class=\"line\"><span class=\"comment\">//非必须</span></span><br><span class=\"line\"><span class=\"comment\">//        mAnimatorSet.setTarget(mTarget);</span></span><br><span class=\"line\">mAnimatorSet.start();</span><br></pre></td></tr></table></figure>\n<h2 id=\"动画监听\">动画监听<a title=\"#动画监听\" href=\"#动画监听\"></a></h2>\n<p>Property Animation 中一共有三种监听事件：</p>\n<ul>\n<li>AnimatorListener；</li>\n<li>AnimatorPauseListener；</li>\n<li>AnimatorUpdateListener；</li>\n</ul>\n<h3 id=\"animatorlistener\">AnimatorListener<a title=\"#animatorlistener\" href=\"#animatorlistener\"></a></h3>\n<p>AnimatorListener 接口主要用于监听 Property Animation 的开始、结束、取消、重复状态，需要实现的方法分别是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animation)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animation)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"animatorpauselistener\">AnimatorPauseListener<a title=\"#animatorpauselistener\" href=\"#animatorpauselistener\"></a></h3>\n<p>AnimatorPauseListener 主要用于监听 Property Animation 的暂停、恢复状态，需要实现的方法分别是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationPause</span><span class=\"params\">(Animator animation)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationResume</span><span class=\"params\">(Animator animation)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"animatorupdatelistener\">AnimatorUpdateListener<a title=\"#animatorupdatelistener\" href=\"#animatorupdatelistener\"></a></h3>\n<p>AnimatorUpdateListener 是 ValueAnimator 及其子类特有的接口，主要用于监听动画中值的变化，用于手动更新界面，需要实现的方法是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animation)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"属性动画工作原理\">属性动画工作原理<a title=\"#属性动画工作原理\" href=\"#属性动画工作原理\"></a></h2>\n<p>当 ValueAnimator 调用 start 方法之后，ValueAnimator 会根据 Property Animation 当前运行时间与总的动画持续时间计算出一个时间消耗百分数（The elapsed fraction）。紧接着，ValueAnimator 将这个时间消耗百分数交给当前 ValueAnimator 的插值器（Interpolator），不同的 Interpolator 会根据不同的算法将这个时间消耗百分数转换成插值百分数（The interpolated fraction）。紧接着，ValueAnimator 会将这个插值百分数交给当前 ValueAnimator 的估值器（TypeEvaluator），不同的 TypeEvaluator 会根据不同的算法将这个插值百分数转换最终的动画值（The final value）。</p>\n<p>拿AccelerateDecelerateInterpolator插值器举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccelerateDecelerateInterpolator</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseInterpolator</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">NativeInterpolatorFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AccelerateDecelerateInterpolator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&#123;&quot;UnusedDeclaration&quot;&#125;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AccelerateDecelerateInterpolator</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * param input (The elapsed fraction)</span></span><br><span class=\"line\"><span class=\"comment\">     * return (The interpolated fraction)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getInterpolation</span><span class=\"params\">(<span class=\"keyword\">float</span> input)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">float</span>)(Math.cos((input + <span class=\"number\">1</span>) * Math.PI) / <span class=\"number\">2.0f</span>) + <span class=\"number\">0.5f</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@hide</span> */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">createNativeInterpolator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NativeInterpolatorFactoryHelper.createAccelerateDecelerateInterpolator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/3849CD8505684EF393E958D9AA6684EE?method=download&amp;shareKey=de12a5bdf349ded0f795881a35c18239\" alt=\"AccelerateDecelerateInterpolator属性动画工作原理\" class=\"φbs\"></p>\n<p>上面这个属性动画的 Duration 为 40ms，Intepolator 为 AccelerateDecelerateInterpolator，Distance 为 40。</p>\n<p>在 t = 10ms 时，The elapsed fraction 为 0.25 = 10/40，The interpolated fraction = (float)(Math.cos((0.25 + 1) * Math.PI) / 2.0f) + 0.5f = 0.14644662，The final value 为 5.8578648 = (40 - 0) * 0.14644662。</p>\n<h2 id=\"自定义插值器\">自定义插值器<a title=\"#自定义插值器\" href=\"#自定义插值器\"></a></h2>\n<p>自定义插值器要实现 Interpolator 接口，上篇文章已经有所说明，不做过多阐述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecelerateAccelerateInterpolator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interpolator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getInterpolation</span><span class=\"params\">(<span class=\"keyword\">float</span> input)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">float</span>) ((Math.tan(Math.PI/<span class=\"number\">2</span> * input - Math.PI/<span class=\"number\">4</span>) + <span class=\"number\">1</span>)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义估值器\">自定义估值器<a title=\"#自定义估值器\" href=\"#自定义估值器\"></a></h2>\n<p>自定义估值器，只要实现 TypeEvaluator 接口，并实现其中定义的 evaluate 方法即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomTypeEvaluator</span> <span class=\"keyword\">implements</span> <span class=\"title\">TypeEvaluator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * param fraction 插值器最终值</span></span><br><span class=\"line\"><span class=\"comment\">     * param startValue 属性开始值</span></span><br><span class=\"line\"><span class=\"comment\">     * param endValue 属性结束值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Object startValue, Object endValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> startFloat = ((Number) startValue).floatValue();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">200</span> + fraction * (((Number) endValue).floatValue() - startFloat);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"viewpropertyanimator-使用简介\">ViewPropertyAnimator 使用简介<a title=\"#viewpropertyanimator-使用简介\" href=\"#viewpropertyanimator-使用简介\"></a></h2>\n<p>ViewPropertyAnimator、ObjectAnimator、ValueAnimator 这三种 Animator，它们其实是一种递进的关系：从左到右依次变得更加难用，也更加灵活。</p>\n<p>它们的性能是一样的，因为 ViewPropertyAnimator 和 ObjectAnimator 的内部实现其实都是 ValueAnimator，ObjectAnimator 更是本来就是 ValueAnimator 的子类，它们三个的性能并没有差别。</p>\n<p>它们的差别只是使用的便捷性以及功能的灵活性。所以在实际使用时候的选择，只要遵循一个原则就行：尽量用简单的。<strong>能用 View.animate() 实现就不用 ObjectAnimator，能用 ObjectAnimator 就不用 ValueAnimator。</strong></p>\n<p>当需要同时更改 View 的多个属性的时候，一般有三种方法：</p>\n<ol>\n<li>ObjectAnimator + AnimatorSet；</li>\n<li>PropertyValuesHolder + ObjectAnimator；</li>\n<li>ViewPropertyAnimator；</li>\n</ol>\n<p>接下来，分别用三种方法分别实现同一种效果：View 的 Y 值从当前位置增到 400，Alpha 值 从 1.0f 变成 0.1f。</p>\n<p><strong>ObjectAnimator + AnimatorSet</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectAnimator alphaObjectAnimator = ObjectAnimator.ofFloat(mTarget, <span class=\"string\">&quot;alpha&quot;</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.1f</span>);</span><br><span class=\"line\">ObjectAnimator yObjectAnimator = ObjectAnimator.ofFloat(mTarget, <span class=\"string\">&quot;y&quot;</span>, <span class=\"number\">400f</span>);</span><br><span class=\"line\">AnimatorSet animatorSet = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">animatorSet.playTogether(alphaObjectAnimator, yObjectAnimator);</span><br><span class=\"line\">animatorSet.start();</span><br></pre></td></tr></table></figure>\n<p><strong>PropertyValuesHolder + ObjectAnimator</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PropertyValuesHolder alphaPropertyValuesHolder = PropertyValuesHolder.ofFloat(<span class=\"string\">&quot;alpha&quot;</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.1f</span>);</span><br><span class=\"line\">PropertyValuesHolder yPropertyValuesHolder = PropertyValuesHolder.ofFloat(<span class=\"string\">&quot;y&quot;</span>, <span class=\"number\">400f</span>);</span><br><span class=\"line\">ObjectAnimator.ofPropertyValuesHolder(mTarget, alphaPropertyValuesHolder, yPropertyValuesHolder).start();</span><br></pre></td></tr></table></figure>\n<p><strong>ViewPropertyAnimator</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewPropertyAnimator viewPropertyAnimator = mTarget.animate();</span><br><span class=\"line\">viewPropertyAnimator.alpha(<span class=\"number\">0.1f</span>);</span><br><span class=\"line\">viewPropertyAnimator.y(<span class=\"number\">400f</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//也可以写成一句：</span></span><br><span class=\"line\">mTarget.animate().alpha(<span class=\"number\">0.1f</span>).y(<span class=\"number\">400f</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"propertyvaluesholder\">PropertyValuesHolder<a title=\"#propertyvaluesholder\" href=\"#propertyvaluesholder\"></a></h2>\n<p>细心的同学可能会注意到，ValueAnimator、ObjectAnimator除了这些创建Animator实例的方法以外，都还有一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * valueAnimator的</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ValueAnimator <span class=\"title\">ofPropertyValuesHolder</span><span class=\"params\">(PropertyValuesHolder... values)</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\"> * ObjectAnimator的</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\"> */</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ObjectAnimator <span class=\"title\">ofPropertyValuesHolder</span><span class=\"params\">(Object target,PropertyValuesHolder... values)</span></span></span><br></pre></td></tr></table></figure>\n<p>PropertyValuesHolder这个类的意义就是，它其中保存了动画过程中所需要操作的属性和对应的值。我们通过ofFloat(Object target, String propertyName, float… values)构造的动画，ofFloat()的内部实现其实就是将传进来的参数封装成PropertyValuesHolder实例来保存动画状态。在封装成PropertyValuesHolder实例以后，后期的各种操作也是以PropertyValuesHolder为主的。</p>\n<p>使用举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PropertyValuesHolder rotationHolder = PropertyValuesHolder.ofFloat(<span class=\"string\">&quot;Rotation&quot;</span>, <span class=\"number\">60f</span>, -<span class=\"number\">60f</span>, <span class=\"number\">40f</span>, -<span class=\"number\">40f</span>, -<span class=\"number\">20f</span>, <span class=\"number\">20f</span>, <span class=\"number\">10f</span>, -<span class=\"number\">10f</span>, <span class=\"number\">0f</span>);</span><br><span class=\"line\">PropertyValuesHolder colorHolder = PropertyValuesHolder.ofInt(<span class=\"string\">&quot;BackgroundColor&quot;</span>, <span class=\"number\">0xffffffff</span>, <span class=\"number\">0xffff00ff</span>, <span class=\"number\">0xffffff00</span>, <span class=\"number\">0xffffffff</span>);</span><br><span class=\"line\">ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(mTextView, rotationHolder, colorHolder);</span><br><span class=\"line\">animator.setDuration(<span class=\"number\">3000</span>);</span><br><span class=\"line\">animator.setInterpolator(<span class=\"keyword\">new</span> AccelerateInterpolator());</span><br><span class=\"line\">animator.start();</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/animation/Animator\">https://developer.android.com/reference/android/animation/Animator</a></li>\n<li><a href=\"https://carsonho.blog.csdn.net/article/details/72909894\">https://carsonho.blog.csdn.net/article/details/72909894</a></li>\n<li><a href=\"https://blog.csdn.net/harvic880925/article/details/50752838\">https://blog.csdn.net/harvic880925/article/details/50752838</a></li>\n<li><a href=\"https://juejin.cn/post/6844903798687678478#heading-34\">https://juejin.cn/post/6844903798687678478#heading-34</a></li>\n</ul>\n","prev":{"title":"Android开发Style和Theme知识面总结","link":"posts/1614958762"},"next":{"title":"Android开发之玩转Android帧动画","link":"posts/1614486338"},"plink":"https://blog.ixin.run/posts/1614527870/","toc":[{"id":"什么是属性动画","title":"什么是属性动画","index":"1"},{"id":"属性动画和补间动画的区别","title":"属性动画和补间动画的区别","index":"2"},{"id":"属性动画相关类","title":"属性动画相关类","index":"3","children":[{"id":"valueanimator和objectanimator主要区别","title":"ValueAnimator和ObjectAnimator主要区别","index":"3.1"}]},{"id":"属性动画实现形式","title":"属性动画实现形式","index":"4","children":[{"id":"valueanimator","title":"ValueAnimator","index":"4.1"},{"id":"objectanimator","title":"ObjectAnimator","index":"4.2"},{"id":"animatorset","title":"AnimatorSet","index":"4.3"}]},{"id":"动画监听","title":"动画监听","index":"5","children":[{"id":"animatorlistener","title":"AnimatorListener","index":"5.1"},{"id":"animatorpauselistener","title":"AnimatorPauseListener","index":"5.2"},{"id":"animatorupdatelistener","title":"AnimatorUpdateListener","index":"5.3"}]},{"id":"属性动画工作原理","title":"属性动画工作原理","index":"6"},{"id":"自定义插值器","title":"自定义插值器","index":"7"},{"id":"自定义估值器","title":"自定义估值器","index":"8"},{"id":"viewpropertyanimator-使用简介","title":"ViewPropertyAnimator 使用简介","index":"9"},{"id":"propertyvaluesholder","title":"PropertyValuesHolder","index":"10"},{"id":"参考","title":"参考","index":"11"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1614527870/\" title=\"Android开发之玩转Android属性动画\">https://blog.ixin.run/posts/1614527870/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}