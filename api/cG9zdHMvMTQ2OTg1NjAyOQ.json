{"title":"Android开发之进程间通信AIDL的探究和学习","date":"2016-07-30T05:20:29.000Z","date_formatted":{"ll":"2016年7月30日","L":"2016/07/30","MM-DD":"07-30"},"link":"posts/1469856029","comments":true,"updated":"2021-01-29T12:51:44.636Z","content":"<p>AIDL（Android Interface Definition Language），顾名思义就是android接口定义语言，用于生成可以在Android设备上两个进程之间进行进程间通信（interprocess communication, IPC）的代码。</p>\n<h2 id=\"进程间通信场景\">进程间通信场景<a title=\"#进程间通信场景\" href=\"#进程间通信场景\"></a></h2>\n<p>我们知道android应用程序语言的许多思想来自java，而且又基于linux内核，android系统的中每一个应用程序都是一个虚拟机，android在定义之初便规定进程内的线程之间是可以通信的，而进程与进程之间是封闭的，这样做的目的是为了保证每个应用程序内部数据的稳定性和安全性，也不至于一个程序挂掉而另外一个程序也挂掉。但是非要程序与程序之间进行通信怎么办呢，这种需求又很常见，因此google便定义了AIDL这种语言规范，用来解决这个问题。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/0356F4F8C2F744DFAB98068B360A478C?method=download&amp;shareKey=0cf1028e91383fbb184eada547fd75df\" alt=\"进程间通信图示\"></p>\n<blockquote>\n<p>Note: Using AIDL is necessary only if you allow clients from different applications to access your service for IPC and want to handle multithreading in your service. If you do not need to perform concurrent IPC across different applications, you should create your interface by implementing a Binder or, if you want to perform IPC, but do not need to handle multithreading, implement your interface using a Messenger. Regardless, be sure that you understand Bound Services before implementing an AIDL.</p>\n</blockquote>\n<p>以上英文是官方文档，我们根据文档说明可以得到以下信息：</p>\n<ol>\n<li>条件：有IPC、有多线程、有多个应用程序。方式：AIDL。</li>\n<li>条件：没有IPC、没有多线程、有多个应用程序。方式：Binder。</li>\n<li>条件：有IPC、没有多线程。方式：Messenger。</li>\n</ol>\n<p>所以针对进程间通信，我们要视情况而取合适的方式去解决。这样才会不耽误功夫。如果使用AIDL,在此之前一定要理解服务，因为一般是在服务中实现aidl中的方法的。</p>\n<h2 id=\"aidl参数约束\">AIDL参数约束<a title=\"#aidl参数约束\" href=\"#aidl参数约束\"></a></h2>\n<p>AIDL其实和接口类似，区别就是前者可以进程间通信，另外AIDL对入参和方法也有一些限定，如下：</p>\n<ul>\n<li>aidl文件中只能定义方法，不能定义静态变量。</li>\n<li>aidl文件支持的数据类型：\n<ul>\n<li>基本数据类型(int, byte, char, float, boolean, …)</li>\n<li>String</li>\n<li>CharSequence</li>\n<li>Array</li>\n<li>List</li>\n<li>Map</li>\n<li>Parcelable</li>\n</ul>\n</li>\n</ul>\n<p>另外AIDL也支持入参类型为特殊关键字in, out, inout，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">copyArray</span><span class=\"params\">(in <span class=\"keyword\">byte</span>[] source, out <span class=\"keyword\">byte</span>[] dest)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(inout <span class=\"keyword\">int</span>[] source)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>in表示由客户端设置，修饰输入参数，非基本类型的输入参数必须使用in修饰。</li>\n<li>out表示由服务器端设置，修饰输出参数，非基本类型的输出参数必须使用out修饰。</li>\n<li>inout表示既是输入参数，也是输出参数。</li>\n</ul>\n<h2 id=\"aidl实现计算器\">AIDL实现计算器<a title=\"#aidl实现计算器\" href=\"#aidl实现计算器\"></a></h2>\n<p>下面我就以一个计算器的例子来看AIDL是如何使用的，在这里我要建两个应用程序。一个作为客户端，一个作为服务端。客户端用于显示输入的数据和结果，服务端用于数据的计算。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/A7FACEA50C7C46B6B0402E5F9CCCD699?method=download&amp;shareKey=03e5bc6a2e91f76521d89710e0d21226\" alt=\"AIDL进程间通信实例图示\"></p>\n<h3 id=\"创建服务端\">创建服务端<a title=\"#创建服务端\" href=\"#创建服务端\"></a></h3>\n<p>创建服务端，并建立添加aidl文件。AndroidStudio与Eclipse建立aidl稍有不同，eclipse中sdk中没有集成相关快速建立aidl文件的插件，需要我们手动新建aidl包，手动添加aidl文件，androidstudio中可直接在相应model右键菜单新建文件下寻找到创建aidl文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IMyAidlInterface.aidl</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.aidltest;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMyAidlInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Demonstrates some basic types that you can use as parameters</span></span><br><span class=\"line\"><span class=\"comment\">     * and return values in AIDL.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">double</span> aDouble, String aString)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认添加aidl格式中有一个basicTypes()方法，这个方法只是告诉你aidl支持哪些参数传入，除了支持这几种类型外，还支持序列化parcelable的传递。另外说明一下，我们知道aidl从表面上看是只是一个接口文件，后缀名是.aidl,这在编译的过程中adt是不认的，只有编译成.java的java文件才能使用。Eclipse中支持自动编译。但是AndroidStudio中是不支持自动编译的，所以我们要手动编译一下（Rebuild）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IMyAidlInterface.aidl</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.aidltest;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMyAidlInterface</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//计算两个int数值的和；</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译过后，我们就开一个service，在service中去实现aidl中的方法,别忘了配置文件中注册此服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IMyService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当客户端绑定到该服务的时候，执行此方法。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> intent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> IBinder iBinder = <span class=\"keyword\">new</span> IMyAidlInterface.Stub() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">            Log.e(<span class=\"string\">&quot;服务端&quot;</span>,<span class=\"string\">&quot;收到了客户端的请求，输入的参数是：&quot;</span>+num1+<span class=\"string\">&quot;和&quot;</span>+num2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1+num2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建客户端\">创建客户端<a title=\"#创建客户端\" href=\"#创建客户端\"></a></h3>\n<p>因为AIDL作为客户端和服务端通信的中间桥梁，所以我们必须保证客户端和服务端的AIDL一模一样，所以我在创建客户端后将服务端的AIDL所在的包和类全部拷贝到客户端来。</p>\n<p>界面这里就不提了，放张图：<br>\n<img alt=\"AIDL实现计算器客户端图示\" src=\"https://note.youdao.com/yws/api/personal/file/EA471AAEA95043B8B876D5752DE21056?method=download&shareKey=07c01e119de08e35c64a47393559b450\" width = 50% height = 50% /></p>\n<p>客户端的逻辑处理：</p>\n<ol>\n<li>先绑定服务端的service。</li>\n<li>拿到服务端的service。</li>\n<li>调用服务端的service，并获取结果，显示结果。</li>\n<li>客户端退出时结束服务端service的绑定。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EditText num1_et,num2_et;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button result_bt;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView result_tv;</span><br><span class=\"line\"> </span><br><span class=\"line\">    IMyAidlInterface iMyAidlInterface;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection conn = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//绑定远程服务的时候</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//拿到了远程的服务</span></span><br><span class=\"line\">            iMyAidlInterface = IMyAidlInterface.Stub.asInterface(service);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//断开远程服务的时候</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//回收资源</span></span><br><span class=\"line\">            iMyAidlInterface = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">        result_bt.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                String num1 = num1_et.getText().toString().trim();</span><br><span class=\"line\">                String num2 = num2_et.getText().toString().trim();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (TextUtils.isEmpty(num1)||TextUtils.isEmpty(num2))&#123;</span><br><span class=\"line\">                    Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">&quot;参数不能为空&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//调用远程服务获取结果</span></span><br><span class=\"line\">                        <span class=\"keyword\">int</span> res = iMyAidlInterface.add(Integer.valueOf(num1),Integer.valueOf(num2));</span><br><span class=\"line\">                        result_tv.setText(res+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">&quot;获取结果失败，检查参数格式是否正确。&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//绑定服务端的service</span></span><br><span class=\"line\">        bindService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        num1_et = (EditText) findViewById(R.id.num1_et);</span><br><span class=\"line\">        num2_et = (EditText) findViewById(R.id.num2_et);</span><br><span class=\"line\">        result_bt = (Button) findViewById(R.id.result_bt);</span><br><span class=\"line\">        result_tv = (TextView) findViewById(R.id.result_tv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bindService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//绑定服务端的服务,由于服务端和客户端不在一个进程，所以我们需要直接指定服务端的包名和类名，注意类名要写全。</span></span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">        intent.setComponent(<span class=\"keyword\">new</span> ComponentName(<span class=\"string\">&quot;com.example.aidltest&quot;</span>,<span class=\"string\">&quot;com.example.aidltest.IMyService&quot;</span>));</span><br><span class=\"line\">        bindService(intent,conn, Context.BIND_AUTO_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"comment\">//断开服务端的service</span></span><br><span class=\"line\">        unbindService(conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证结果\">验证结果<a title=\"#验证结果\" href=\"#验证结果\"></a></h3>\n<p>查看进程间通信是否成功。先后开启服务端和客户端，输入相关参数，然后在服务端控制台中看到服务端service接受到的两个参数：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/E1C1409049E049DCA45AA888BC2DCA9F?method=download&amp;shareKey=16d1bea4be89e322c11c6378b8790679\" alt=\"AIDL实现计算器服务端控制台展示图示\"></p>\n<p>客户端界面展示结果：<br>\n<img alt=\"AIDL实现计算器客户端界面结果展示\" src=\"https://note.youdao.com/yws/api/personal/file/6D6ACDD15363451A88994163BBB39442?method=download&shareKey=3af93f08c68b8f0dd18e4bc059548fbe\" width = 50% height = 50% /></p>\n<h3 id=\"aidl实现过程分析\">AIDL实现过程分析<a title=\"#aidl实现过程分析\" href=\"#aidl实现过程分析\"></a></h3>\n<p>我们来看一下AIDL文件编译后的java文件，分析一下其本质，代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.aidltest;</span><br><span class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IMyAidlInterface</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Local-side IPC implementation stub class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">example</span>.<span class=\"title\">aidltest</span>.<span class=\"title\">IMyAidlInterface</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">&quot;com.example.aidltest.IMyAidlInterface&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Construct the stub at attach it to the interface.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Cast an IBinder object into an com.example.aidltest.IMyAidlInterface interface,</span></span><br><span class=\"line\"><span class=\"comment\">         * generating a proxy if needed.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.example.aidltest.<span class=\"function\">IMyAidlInterface <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((obj == <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (((iin != <span class=\"keyword\">null</span>) &amp;&amp; (iin <span class=\"keyword\">instanceof</span> com.example.aidltest.IMyAidlInterface))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((com.example.aidltest.IMyAidlInterface) iin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.example.aidltest.IMyAidlInterface.Stub.Proxy(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class=\"line\">                    reply.writeString(DESCRIPTOR);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_add: &#123;</span><br><span class=\"line\">                    data.enforceInterface(DESCRIPTOR);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> _arg0;</span><br><span class=\"line\">                    _arg0 = data.readInt();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> _arg1;</span><br><span class=\"line\">                    _arg1 = data.readInt();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> _result = <span class=\"keyword\">this</span>.add(_arg0, _arg1);</span><br><span class=\"line\">                    reply.writeNoException();</span><br><span class=\"line\">                    reply.writeInt(_result);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">example</span>.<span class=\"title\">aidltest</span>.<span class=\"title\">IMyAidlInterface</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> android.os.IBinder mRemote;</span><br><span class=\"line\"></span><br><span class=\"line\">            Proxy(android.os.IBinder remote) &#123;</span><br><span class=\"line\">                mRemote = remote;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mRemote;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DESCRIPTOR;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 计算两个int数值的和；</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@param</span> num1</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@param</span> num2</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@throws</span> android.os.RemoteException</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</span><br><span class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> _result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class=\"line\">                    _data.writeInt(num1);</span><br><span class=\"line\">                    _data.writeInt(num2);</span><br><span class=\"line\">                    mRemote.transact(Stub.TRANSACTION_add, _data, _reply, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    _reply.readException();</span><br><span class=\"line\">                    _result = _reply.readInt();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    _reply.recycle();</span><br><span class=\"line\">                    _data.recycle();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_add = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算两个int数值的和；</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上边编译后的文件可以看出，AIDL文件从表面上看是一个接口，编译过后形成java文件还是一个接口。</p>\n<p>这个文件看起来很繁杂，我们将其相关代码合并一下，从整体来看就一个抽象类Stub和一个将要实现的方法add。add方法有两个作用：一个就是在服务端service里面进行实现，另一个就是客户端进行传值。抽象类Stub是继承于系统的Binder，又实现了aidl接口中方法，其构造方法就是客户端绑定服务端service时返回的Binder。</p>\n<p>接口类中asInterface()方法目的就是客户端根据上一步返回的Bandler从而拿到服务端的service(通过内部类Proxy获取)。接下来onTransact()方法目的是服务端service实现add()方法是对参数的限制和结果接收。</p>\n<p>看到这一切应该就豁然开朗了吧，其实AIDL使用起来很简单，关键是要理解其内部的一个过程，这也是理解进程间通信的必经之路。</p>\n","prev":{"title":"Android开发之Intent及IntentFilter的探究学习","link":"posts/1470031654"},"next":{"title":"什么是进程，什么是线程","link":"posts/1469682219"},"plink":"https://blog.ixin.run/posts/1469856029/","toc":[{"id":"进程间通信场景","title":"进程间通信场景","index":"1"},{"id":"aidl参数约束","title":"AIDL参数约束","index":"2"},{"id":"aidl实现计算器","title":"AIDL实现计算器","index":"3","children":[{"id":"创建服务端","title":"创建服务端","index":"3.1"},{"id":"创建客户端","title":"创建客户端","index":"3.2"},{"id":"验证结果","title":"验证结果","index":"3.3"},{"id":"aidl实现过程分析","title":"AIDL实现过程分析","index":"3.4"}]}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1469856029/\" title=\"Android开发之进程间通信AIDL的探究和学习\">https://blog.ixin.run/posts/1469856029/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}