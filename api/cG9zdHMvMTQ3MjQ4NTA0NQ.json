{"title":"Java开发揭开socket编程的面纱","date":"2016-08-29T15:37:25.000Z","date_formatted":{"ll":"2016年8月29日","L":"2016/08/29","MM-DD":"08-29"},"link":"posts/1472485045","comments":true,"categories":["Java"],"updated":"2021-01-29T12:51:44.661Z","content":"<p>socket编程大家应该听的很多了，socket又称为“套接字”，用于描述IP地址和端口，是一个通信链的句柄，最主要的特点便是设定IP和端口，保证了程序的双向互通性。应用程序通常通过&quot;套接字&quot;向网络发出请求或者应答网络请求。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是socket?\">什么是socket?<a title=\"#什么是socket?\" href=\"#什么是socket?\"></a></h2>\n<p>网络上的两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一端称为一个Socket。Socket通常用来实现客户方和服务方的连接。Socket是TCP/IP协议的一个十分流行的编程界面，一个Socket由一个IP地址和一个端口号唯一确定。socket另外也支持UDP报文协议的传输。java中最主要的形式是根据TCP/IP协议进行socket通信。</p>\n<h2 id=\"两个协议\">两个协议<a title=\"#两个协议\" href=\"#两个协议\"></a></h2>\n<p>在学习socket编程之前先弄明白两个协议：TCP/IP协议和UDP协议。<br>\n<strong>TCP</strong>：Transmission Control Protocol 传输控制协议，TCP是一种面向连接（连接导向）的、可靠的、基于字节流的运输层（Transport layer）通信协议。<br>\n<strong>UDP</strong>：User Datagram Protocol的简称，是一种无连接的协议，每个数据报都是一个独立的信息，包括完整的源地址或目的地址，它在网络上以任何可能的路径传往目的地，因此能否到达目的地，到达目的地的时间以及内容的正确性都是不能被保证的。另外UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内。</p>\n<p>说起TCP/IP我们不得已又要想到经典的三次握手：<br>\n第一次握手：客户端尝试连接服务器，向服务器发送syn包（同步序列编号Synchronize Sequence Numbers），syn=j，客户端进入SYN_SEND状态等待服务器确认。<br>\n第二次握手：服务器接收客户端syn包并确认（ack=j+1），同时向客户端发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态。<br>\n第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/E249DF236D6342BAB4679260B6FF2387?method=download&amp;shareKey=ffa1352ae087877b04dc1436725961ad\" alt=\"三次握手\"></p>\n<p>Socket在OSI网络七层协议上的位置：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/538B1030E3A841F68D79F5D129794664?method=download&amp;shareKey=6ae4ae901b9547ef8f7948f63fbacec7\" alt=\"Socket在OSI网络七层协议上的位置\"></p>\n<h2 id=\"什么是ip？什么是端口？\">什么是IP？什么是端口？<a title=\"#什么是ip？什么是端口？\" href=\"#什么是ip？什么是端口？\"></a></h2>\n<p>上边也指出了一个socket是有一个IP和一个端口号来确定的，那么什么是IP?什么是端口呢？</p>\n<h3 id=\"ip地址\">IP地址<a title=\"#ip地址\" href=\"#ip地址\"></a></h3>\n<p>每台联网的电脑都有一个唯一的IP地址，标着这台电脑在网络上的位置。<br>\nIP分为IPV4和IPV6。我们常用的IPV4长度是32位的，分为4段，每段8位，十进制数字表示，每段数字的范围是0~255。IPV6长度是128位，分为8段，每段16位。<br>\n特殊IP地址：<br>\n<code>127.0.0.1</code><br>\n指的是本机，主要作用是预留下作为测试使用，用于网络软件测试以及本地机进程间通信。在Windows系统下，该地址还有一个别名叫 “localhost”。<br>\n<code>10.*.*.*</code><br>\n<code>172.16.*.*――172.31.*.*</code><br>\n<code>192.168.*.*</code><br>\n上面三个网段是私有地址，可以用于自己组网使用，这些地址主要用于企业内部网络中，但不能够在Internet网上使用，Internet网没有这些地址的路由，而使用这三个网段的计算机要上网必须要通过地址翻译（NAT），将私有地址翻译成公用合法的IP地址。<br>\n<code>0.0.0.0</code><br>\n所有不清楚的主机和目的网络都用此来代替，代表这类情况的一个集合，严格意义上来说，0.0.0.0已经不是真正意义上的ip地址了。<br>\n<code>255.255.255.255</code><br>\n有限广播地址，在主机不知道本机所处的网络时（如主机的启动过程中），只能采用有限广播方式，通常由无盘工作站启动时使用，希望从网络IP地址服务器处获得一个IP地址。 当广播地址包含一个有效的网络号和主机号，技术上就称为直接广播地址。<br>\n<code>169.254.*.*</code><br>\n如果你的主机使用了DHCP功能自动获得一个ip地址，那么当你的DHCP服务器发生故障或响应时间太长而超出系统规定的一个时间，windows系统会为你分配这样一个地址。如果你发现你的主机ip地址是个诸如此类的地址，很不幸，十有八九是你的网络不能正常运行了。</p>\n<h3 id=\"端口\">端口<a title=\"#端口\" href=\"#端口\"></a></h3>\n<p>在网络上有很多电脑，这些电脑一般运行了多个网络程序。每种网络程序都打开一个Socket，并绑定到一个端口上，不同的端口对应于不同的网络程序。<br>\n端口常规分三种形式：<br>\n1.公认端口（WellKnownPorts）：从0到1023，它们紧密绑定（binding）于一些服务。通常这些端口的通讯明确表明了某种服务的协议。例如：80端口实际上总是HTTP通讯。<br>\n2.注册端口（RegisteredPorts）：从1024到49151。它们松散地绑定于一些服务。也就是说有许多服务绑定于这些端口，这些端口同样用于许多其它目的。例如：许多系统处理动态端口从1024左右开始。<br>\n3.动态和/或私有端口（Dynamicand/orPrivatePorts）：从49152到65535。理论上，不应为服务分配这些端口。实际上，机器通常从1024起分配动态端口。</p>\n<p>所以我们常常设置端口的时候最好设成1023之后的。</p>\n<p>常用端口：21( FTP) ,25 (SMTP) ,110 (POP3) ,80(HTTP), 443(HTTPS)</p>\n<h2 id=\"socket编程的具体流程\">socket编程的具体流程<a title=\"#socket编程的具体流程\" href=\"#socket编程的具体流程\"></a></h2>\n<p>有了以上的基础，对于socket编程的学习即可事半功倍了，socket编程的具体流程如下：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/C37EC3F469F646359A2D6AA8C6007516?method=download&amp;shareKey=343bcecc07e9eafab7ba5feed398c250\" alt=\"socket编程的具体流程\"></p>\n<p>下面我以用户登录案例来阐述socket通信的这一过程，上边也指出socket通信不仅仅根据TCP/IP协议来进行数据传输还可以根据UDP协议数据传输。根据上图我们知道服务器至少要有两个socket才能与客户端进行三次握手，第一个的socket叫ServerSocket，用来监听等待客户端的链接，第二个socket就是常规的socket,用于对客户端数据的接受和反馈。</p>\n<h3 id=\"根据tcp/ip协议进行socket通信模拟用户登录\">根据TCP/IP协议进行socket通信模拟用户登录<a title=\"#根据tcp/ip协议进行socket通信模拟用户登录\" href=\"#根据tcp/ip协议进行socket通信模拟用户登录\"></a></h3>\n<p>服务器端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务器端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//1.创建一个服务器端socket即ServerSocket,指定绑定的端口，并监听此端口</span></span><br><span class=\"line\">   ServerSocket  serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8888</span>);</span><br><span class=\"line\">   System.out.println(<span class=\"string\">&quot;+++++++++++++++++服务器即将启动，等待客户端的链接+++++++++++++&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">//2.调用accept()方法开始监听，等待客户端的连接。</span></span><br><span class=\"line\">   Socket socket = serverSocket.accept();</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//3.获取输入流，并读取客户端信息</span></span><br><span class=\"line\">   InputStream is = socket.getInputStream();   <span class=\"comment\">//获取字节输入流</span></span><br><span class=\"line\">   InputStreamReader isr = <span class=\"keyword\">new</span> InputStreamReader(is); <span class=\"comment\">//将字节输入流转换成字符流</span></span><br><span class=\"line\">   BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(isr); <span class=\"comment\">//为输入流添加缓冲</span></span><br><span class=\"line\">   String info = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>((info = br.readLine())!=<span class=\"keyword\">null</span>)&#123;   <span class=\"comment\">//循环读取客户端的信息</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;我是服务器，客户端说：&quot;</span>+info);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   socket.shutdownInput();  <span class=\"comment\">//关闭输入流</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//4.获取输出流，响应客户端的请求</span></span><br><span class=\"line\">   OutputStream os = socket.getOutputStream();</span><br><span class=\"line\">   PrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(os);</span><br><span class=\"line\">   pw.write(<span class=\"string\">&quot;谢谢你告诉我账户和密码。&quot;</span>);</span><br><span class=\"line\">   pw.flush();</span><br><span class=\"line\">   socket.shutdownOutput();</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//5.关闭资源</span></span><br><span class=\"line\">   pw.close();</span><br><span class=\"line\">   os.close();</span><br><span class=\"line\">   br.close();</span><br><span class=\"line\">   isr.close();</span><br><span class=\"line\">   is.close();</span><br><span class=\"line\">   socket.close();</span><br><span class=\"line\">   serverSocket.close();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 客户端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 1.创建客户端Socket,指定服务器端的IP地址和端口号。</span></span><br><span class=\"line\">   Socket socket = <span class=\"keyword\">new</span> Socket(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">8888</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 2.获取输出流，向服务器端发送信息。</span></span><br><span class=\"line\">   OutputStream os = socket.getOutputStream(); <span class=\"comment\">// 字节输出流</span></span><br><span class=\"line\">   PrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(os); <span class=\"comment\">// 将输出流包装成打印流</span></span><br><span class=\"line\">   pw.write(<span class=\"string\">&quot;账户是admin;密码是123。&quot;</span>);</span><br><span class=\"line\">   pw.flush();</span><br><span class=\"line\">   socket.shutdownOutput(); <span class=\"comment\">// 关闭输出流</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//3.获取输入流，读取服务器的响应信息。</span></span><br><span class=\"line\">   InputStream is = socket.getInputStream();</span><br><span class=\"line\">   InputStreamReader isr = <span class=\"keyword\">new</span> InputStreamReader(is);</span><br><span class=\"line\">   BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(isr);</span><br><span class=\"line\">   String info = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> ((info = br.readLine())!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;我是客户端，服务器说：&quot;</span>+info);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   socket.shutdownInput();</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 4.关闭资源</span></span><br><span class=\"line\">   br.close();</span><br><span class=\"line\">   isr.close();</span><br><span class=\"line\">   is.close();</span><br><span class=\"line\">   pw.close();</span><br><span class=\"line\">   os.close();</span><br><span class=\"line\">   socket.close();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行时先开启服务端在开启客户端，运行结果如下：<br>\n服务端显示：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/B4F187BC059D4AB8AC7F81B143DCE7B2?method=download&amp;shareKey=aca0b8aa19653c29ad972a06745058d0\" alt=\"根据TCPIP协议进行socket通信服务端结果\"><br>\n客户端显示：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/F2A8C396881D47C4A22A512BA861A623?method=download&amp;shareKey=44b407b6c482e18995f5c87382c3be79\" alt=\"根据TCPIP协议进行socket通信客户端结果\"></p>\n<h3 id=\"多线程多客户端模拟用户登陆\">多线程多客户端模拟用户登陆<a title=\"#多线程多客户端模拟用户登陆\" href=\"#多线程多客户端模拟用户登陆\"></a></h3>\n<p>实际应用中不会这么简单的一个服务器对应一个客户端，而最常见的是一个服务器形成一个服务中心多个客户端进行连接，这就要用到多线程机制了。也就是在服务器端开启多个线程，每个线程去去单独应对每一个连接的客户端。<br>\n很容易想到启动多少个客户端咱们就启动多少个线程，而ServerSocket一次只能监听一个客户端的连接，所以这里要创建一个死循环让其不间断的一个一个的去监听。又因为处于死循环状态，服务器一直处于工作状态不能自主关闭，所以也就不能调用serverScoket.close()了。</p>\n<p>服务器端子线程类：<br>\n用于对每个连接的客户端进行通信。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务器端子线程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> Socket socket = <span class=\"keyword\">null</span>;  <span class=\"comment\">//拿到连接客户端的socket</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServerThread</span><span class=\"params\">(Socket socket)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.socket = socket;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">  InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  InputStreamReader isr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  PrintWriter pw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//获取输入流，并读取客户端信息</span></span><br><span class=\"line\">   is = socket.getInputStream(); <span class=\"comment\">// 获取字节输入流</span></span><br><span class=\"line\">   isr = <span class=\"keyword\">new</span> InputStreamReader(is); <span class=\"comment\">// 将字节输入流转换成字符流</span></span><br><span class=\"line\">   br = <span class=\"keyword\">new</span> BufferedReader(isr); <span class=\"comment\">// 为输入流添加缓冲</span></span><br><span class=\"line\">   String info = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> ((info = br.readLine()) != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 循环读取客户端的信息</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;我是服务器，客户端说：&quot;</span> + info);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   socket.shutdownInput(); <span class=\"comment\">// 关闭输入流</span></span><br><span class=\"line\">   <span class=\"comment\">//获取输出流，响应客户端的请求</span></span><br><span class=\"line\">   os = socket.getOutputStream();</span><br><span class=\"line\">   pw = <span class=\"keyword\">new</span> PrintWriter(os);</span><br><span class=\"line\">   pw.write(<span class=\"string\">&quot;谢谢你告诉我账户和密码。&quot;</span>);</span><br><span class=\"line\">   pw.flush();</span><br><span class=\"line\">   socket.shutdownOutput();</span><br><span class=\"line\">   </span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pw != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     pw.close();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (os != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     os.close();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (br != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     br.close();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isr != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     isr.close();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     is.close();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">     socket.close();</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务器端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 服务器端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//创建一个服务器端socket即ServerSocket,指定绑定的端口，并监听此端口</span></span><br><span class=\"line\">   ServerSocket  serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8888</span>);</span><br><span class=\"line\">   Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"comment\">//记录客户端的数量</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">   System.out.println(<span class=\"string\">&quot;+++++++++++++++++服务器即将启动，等待客户端的链接+++++++++++++&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">//创建一个死循环，循环监听等待客户端的链接。</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接。</span></span><br><span class=\"line\">    socket = serverSocket.accept();</span><br><span class=\"line\">    <span class=\"comment\">//创建一个服务器线程</span></span><br><span class=\"line\">    ServerThread serverThread = <span class=\"keyword\">new</span> ServerThread(socket);</span><br><span class=\"line\">    serverThread.setPriority(<span class=\"number\">4</span>);  <span class=\"comment\">//设置线程优先级，范围是[1-10],默认是5。适当的降低线程优先级，有助于提高运行速度。</span></span><br><span class=\"line\">    <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">    serverThread.start();</span><br><span class=\"line\">   </span><br><span class=\"line\">    count++; <span class=\"comment\">//统计客户端的数量</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;当前客户端连接的数量：&quot;</span>+count);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//serverSocket.close(); //因为创建了死循环所以ServerSocket一直处于工作状态，所以ServerSocket也就无法关闭了。</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">   e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端：<br>\n和上边的客户端一样。</p>\n<p>运行时还是先开启服务器端在开启客户端，并开启多个客户端，控制台查看连接情况：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/EF715E3B0DFE449AAC3F96FF86D30AEC?method=download&amp;shareKey=ac457124ffd915af2830886a5d4166ad\" alt=\"多线程多客户端控制台连接情况\"></p>\n<h3 id=\"根据udp协议进行socket通信模拟用户登录\">根据UDP协议进行socket通信模拟用户登录<a title=\"#根据udp协议进行socket通信模拟用户登录\" href=\"#根据udp协议进行socket通信模拟用户登录\"></a></h3>\n<p>使用UDP协议进行数据传输时，首先需要将要传输的数据定义成数据报（Datagram），在数据报中指明数据所要达到的Socket(主机地址和端口号)，然后再将数据报发送出去。这里的端口连接和数据的接受发送不在是上边TCP形式的ServerSocket和Socket了,这里要使用到的有两个类：</p>\n<ul>\n<li>DatagramSocket:进行端到端通信的类，用于服务器端创建端口和接收数据包和客服端发送数据包。</li>\n<li>DatagramPacket:表示数据报包，是UDP通信的数据单元。</li>\n</ul>\n<p>下面看一下具体过程：<br>\n服务器端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * UDP形式的服务器端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UDPServer</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//创建服务器端DatagramSocket，指定端口</span></span><br><span class=\"line\">  DatagramSocket datagramSocket = <span class=\"keyword\">new</span> DatagramSocket(<span class=\"number\">8888</span>);</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;+++++++++UDP++++++++服务器即将启动，等待客户端的链接+++++++++++++&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * 服务器接收客户端的发送来的数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">//创建数据报，用于接受客户端发送来的数据。</span></span><br><span class=\"line\">  <span class=\"keyword\">byte</span>[] data = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">  DatagramPacket packet = <span class=\"keyword\">new</span> DatagramPacket(data, data.length);</span><br><span class=\"line\">  <span class=\"comment\">//接收客户端发送来的数据</span></span><br><span class=\"line\">  datagramSocket.receive(packet);<span class=\"comment\">//在接收数据前此方法一直处于阻塞状态。</span></span><br><span class=\"line\">  <span class=\"comment\">//读取客户端发送来的数据信息</span></span><br><span class=\"line\">  String info = <span class=\"keyword\">new</span> String(data, <span class=\"number\">0</span>, packet.getLength());</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;我是服务器，客户端说：&quot;</span> + info);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * 服务器响应客户端的请求</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">//定义客户端的地址，端口，发送的数据。</span></span><br><span class=\"line\">  InetAddress address = packet.getAddress();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> port = packet.getPort();</span><br><span class=\"line\">  <span class=\"keyword\">byte</span>[] data2 = <span class=\"string\">&quot;谢谢你告诉我账号和密码&quot;</span>.getBytes();</span><br><span class=\"line\">  <span class=\"comment\">//创建数据报，封装响应信息</span></span><br><span class=\"line\">  DatagramPacket packet2 = <span class=\"keyword\">new</span> DatagramPacket(data2, <span class=\"number\">0</span>, data2.length,address, port);</span><br><span class=\"line\">  <span class=\"comment\">//响应客户端</span></span><br><span class=\"line\">  datagramSocket.send(packet2);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//关闭socket</span></span><br><span class=\"line\">  datagramSocket.close();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * UDP形式的客户端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UDPClient</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//创建客户端DatagramSocket，用于将来向服务器端发送数据报和接收服务器端的响应数据报</span></span><br><span class=\"line\">  DatagramSocket datagramSocket = <span class=\"keyword\">new</span> DatagramSocket();</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * 向服务器端发送数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">//定义服务器的地址，端口号，数据。</span></span><br><span class=\"line\">  InetAddress address = InetAddress.getByName(<span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> port = <span class=\"number\">8888</span>;</span><br><span class=\"line\">  <span class=\"keyword\">byte</span>[] data = <span class=\"string\">&quot;账户是admin，密码是123&quot;</span>.getBytes();</span><br><span class=\"line\">  <span class=\"comment\">//创建数据报，封装发送的数据信息。</span></span><br><span class=\"line\">  DatagramPacket packet = <span class=\"keyword\">new</span> DatagramPacket(data, <span class=\"number\">0</span>, data.length,address, port);</span><br><span class=\"line\">  <span class=\"comment\">//发送数据</span></span><br><span class=\"line\">  datagramSocket.send(packet);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * 接收服务器端响应数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">//创建数据报，用于接收服务器端的响应数据。</span></span><br><span class=\"line\">  <span class=\"keyword\">byte</span>[] data2 = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">  DatagramPacket packet2 = <span class=\"keyword\">new</span> DatagramPacket(data2, data2.length);</span><br><span class=\"line\">  <span class=\"comment\">//接收服务器端响应的数据</span></span><br><span class=\"line\">  datagramSocket.receive(packet2);</span><br><span class=\"line\">  <span class=\"comment\">//读取服务器端响应的数据</span></span><br><span class=\"line\">  String info = <span class=\"keyword\">new</span> String(data2, <span class=\"number\">0</span>, packet2.getLength());</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;我是客户端，服务器说：&quot;</span> + info);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//关闭socket</span></span><br><span class=\"line\">  datagramSocket.close();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行时还是先开启服务端再开启客户端，运行结果如下：<br>\n服务端显示：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/D6D02A6C1F4344C98F15CCBAA477A514?method=download&amp;shareKey=676c8df2dfa60bbc11415436938b5b9b\" alt=\"UDP协议进行socket通信服务端显示\"><br>\n客户端显示：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/E5DE0C16C8FD4A4B8060018CA79BD5C9?method=download&amp;shareKey=ef76c4c77bbc70cd9421d48d5bc2b392\" alt=\"UDP协议进行socket通信客户端显示\"><br>\n到此为止相信对socket通信有一定了解了吧，这里仍然需要说明一下：<br>\n在多线程模拟用户登录时由于创建了一个死循环去不断的监听客户端的链接情况，这里建议创建子线程的时候设置一个合适的优先级，serverThread.setPriority(4)。适当的降低线程优先级有助于提升运行时速度。</p>\n<p><a href=\"https://note.youdao.com/yws/api/personal/file/F0A2BDB420854209B2702B71C7406896?method=download&amp;shareKey=2fbb750cf735248eb5afc0854aed280e\" target=\"_blank\">demo下载</a></p>\n","prev":{"title":"TCP/IP协议三次握手和四次挥手大白话解说","link":"posts/1474374781"},"next":{"title":"Android开发之Intent及IntentFilter的探究学习","link":"posts/1470031654"},"plink":"https://blog.ixin.run/posts/1472485045/","toc":[{"id":"什么是socket?","title":"什么是socket?","index":"1"},{"id":"两个协议","title":"两个协议","index":"2"},{"id":"什么是ip？什么是端口？","title":"什么是IP？什么是端口？","index":"3","children":[{"id":"ip地址","title":"IP地址","index":"3.1"},{"id":"端口","title":"端口","index":"3.2"}]},{"id":"socket编程的具体流程","title":"socket编程的具体流程","index":"4","children":[{"id":"根据tcp/ip协议进行socket通信模拟用户登录","title":"根据TCP&#x2F;IP协议进行socket通信模拟用户登录","index":"4.1"},{"id":"多线程多客户端模拟用户登陆","title":"多线程多客户端模拟用户登陆","index":"4.2"},{"id":"根据udp协议进行socket通信模拟用户登录","title":"根据UDP协议进行socket通信模拟用户登录","index":"4.3"}]}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1472485045/\" title=\"Java开发揭开socket编程的面纱\">https://blog.ixin.run/posts/1472485045/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}