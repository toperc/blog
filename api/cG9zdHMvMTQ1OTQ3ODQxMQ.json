{"title":"Android开发权限处理和自定义权限","date":"2016-04-01T02:40:11.000Z","date_formatted":{"ll":"2016年4月1日","L":"2016/04/01","MM-DD":"04-01"},"link":"posts/1459478411","comments":true,"tags":["运行时权限"],"categories":["Android"],"updated":"2021-01-29T12:51:44.638Z","content":"<p>早在Android6.0之前，权限这一块是不需要处理的，只需要用到哪些权限在Manifest里注册一下，然后在安装的时候简单声明一下。但是从6.0开始为了用户的隐私和安全，Google引入了动态权限申请机制，将所有权限分成了正常权限和危险权限，应用的相关功能每次在使用危险权限时需要动态的申请并得到用户的授权才能使用。</p>\n<a id=\"more\"></a>\n<h2 id=\"设计模式\">设计模式<a title=\"#设计模式\" href=\"#设计模式\"></a></h2>\n<p>Android 是一个权限分隔的操作系统，其中每个应用都有其独特的系统标识（Linux 用户 ID 和组 ID）。系统各部分也分隔为不同的标识。Linux 据此将不同的应用以及应用与系统分隔开来。</p>\n<p>其他更详细的安全功能通过“权限”机制提供，此机制会限制特定进程可以执行的具体操作，并且根据 URI 权限授权临时访问特定的数据段。</p>\n<h2 id=\"安全架构\">安全架构<a title=\"#安全架构\" href=\"#安全架构\"></a></h2>\n<p>Android 安全架构的中心设计点是：在默认情况下任何应用都没有权限执行对其他应用、操作系统或用户有不利影响的任何操作。这包括读取或写入用户的私有数据（例如联系人或电子邮件）、读取或写入其他应用程序的文件、执行网络访问、使设备保持唤醒状态等。</p>\n<p>由于每个 Android 应用都是在进程沙盒中运行，因此应用必须显式共享资源和数据。它们的方法是声明需要哪些权限来获取基本沙盒未提供的额外功能。应用以静态方式声明它们需要的权限，然后 Android 系统提示用户同意。</p>\n<h2 id=\"应用签署\">应用签署<a title=\"#应用签署\" href=\"#应用签署\"></a></h2>\n<p>所有 APK（.apk 文件）都必须使用证书签署，其私钥由开发者持有。此证书用于识别应用的作者。证书不需要由证书颁发机构签署；Android 应用在理想情况下可以而且通常也是使用自签名证书。证书在 Android 中的作用是识别应用的作者。</p>\n<p>众所周知，Android应用想要顺利安装在系统上需要两个条件：包名和签名。包名确定应用的唯一，而签名确定应用的可安装性。签名是必须的，即使开发者不手动设置签名（直接运行项目），系统也会自动生成一个临时签名。</p>\n<h2 id=\"用户-id-和文件访问\">用户 ID 和文件访问<a title=\"#用户-id-和文件访问\" href=\"#用户-id-和文件访问\"></a></h2>\n<p>在安装时，Android 为每个软件包提供唯一的 Linux 用户 ID。此 ID 在软件包在该设备上的使用寿命期间保持不变。在不同设备上，相同软件包可能有不同的 UID；重要的是每个软件包在指定设备上的 UID 是唯一的。</p>\n<p>由于在进程级实施安全性，因此任何两个软件包的代码通常都不能在同一进程中运行，因为它们需要作为不同的 Linux 用户运行。您可以在每个软件包的 <code>AndroidManifest.xml</code> 的 <code>manifest</code> 标记中使用 <code>sharedUserId</code> 属性，为它们分配相同的用户 ID。这样做以后，出于安全目的，两个软件包将被视为同一个应用，具有相同的用户 ID 和文件权限。请注意，为保持安全性，只有两个签署了相同签名（并且请求相同的 <code>sharedUserId</code>）的应用才被分配同一用户 ID。</p>\n<h2 id=\"使用权限\">使用权限<a title=\"#使用权限\" href=\"#使用权限\"></a></h2>\n<p>基本 Android 应用默认情况下未关联权限，这意味着它无法执行对用户体验或设备上任何数据产生不利影响的任何操作。要利用受保护的设备功能，必须在应用清单中包含一个或多个 <uses-permission> 标记。</p>\n<p>例如，需要监控传入的短信的应用要指定：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;manifest xmlns:android=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">package</span>=<span class=\"string\">&quot;com.android.app.myapp&quot;</span> &gt;</span><br><span class=\"line\">    &lt;uses-permission android:name=<span class=\"string\">&quot;android.permission.RECEIVE_SMS&quot;</span> /&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"权限分类\">权限分类<a title=\"#权限分类\" href=\"#权限分类\"></a></h2>\n<p>系统权限分为几个保护级别。需要了解的两个最重要保护级别是正常权限和危险权限：</p>\n<ul>\n<li><strong>正常权限</strong>涵盖应用需要访问其沙盒外部数据或资源，但对用户隐私或其他应用操作风险很小的区域。例如，设置时区的权限就是正常权限。如果应用声明其需要正常权限，系统会自动向应用授予该权限。</li>\n<li><strong>危险权限</strong>涵盖应用需要涉及用户隐私信息的数据或资源，或者可能对用户存储的数据或其他应用的操作产生影响的区域。例如，能够读取用户的联系人属于危险权限。如果应用声明其需要危险权限，则用户必须明确向应用授予该权限。</li>\n</ul>\n<p>另外，有许多权限其行为方式与正常权限及危险权限都不同，这类我把给他归属为<strong>特殊权限</strong>。例如， <code>SYSTEM_ALERT_WINDOW</code> 和 <code>WRITE_SETTINGS</code> 特别敏感，因此大多数应用不应该使用它们。如果某应用需要其中一种权限，必须在清单中声明该权限，并且发送请求用户授权的 intent。系统将向用户显示详细管理屏幕，以响应该 intent。</p>\n<h2 id=\"权限组\">权限组<a title=\"#权限组\" href=\"#权限组\"></a></h2>\n<p>所有危险的 Android 系统权限都属于权限组。如果设备运行的是 Android 6.0（API 级别 23），并且应用的 targetSdkVersion 是 23 或更高版本，则当用户请求危险权限时系统会发生以下行为：</p>\n<ul>\n<li>如果应用请求其清单中列出的危险权限，而应用目前在权限组中没有任何权限，则系统会向用户显示一个对话框，描述应用要访问的权限组。对话框不描述该组内的具体权限。例如，如果应用请求 <code>READ_CONTACTS</code> 权限，系统对话框只说明该应用需要访问设备的联系信息。如果用户批准，系统将向应用授予其请求的权限。</li>\n<li>如果应用请求其清单中列出的危险权限，而应用在同一权限组中已有另一项危险权限，则系统会立即授予该权限，而无需与用户进行任何交互。例如，如果某应用已经请求并且被授予了 <code>READ_CONTACTS</code> 权限，然后它又请求 <code>WRITE_CONTACTS</code>，系统将立即授予该权限。</li>\n</ul>\n<p>危险权限和权限组：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/7ACF46B1892F45E8944FD8329D271BD9?method=download&amp;shareKey=991fd7a7f335d3e083f84b4783843cdd\" alt=\"危险权限和权限组\"></p>\n<h2 id=\"相关方法\">相关方法<a title=\"#相关方法\" href=\"#相关方法\"></a></h2>\n<h3 id=\"contextcompat.checkselfpermission\">ContextCompat.checkSelfPermission<a title=\"#contextcompat.checkselfpermission\" href=\"#contextcompat.checkselfpermission\"></a></h3>\n<p>检查应用是否具有某个危险权限。如果应用具有此权限，方法将返回 <code>PackageManager.PERMISSION_GRANTED</code>，并且应用可以继续操作。如果应用不具有此权限，方法将返回 <code>PackageManager.PERMISSION_DENIED</code>，且应用必须明确向用户要求权限。</p>\n<h3 id=\"activitycompat.requestpermissions\">ActivityCompat.requestPermissions<a title=\"#activitycompat.requestpermissions\" href=\"#activitycompat.requestpermissions\"></a></h3>\n<p>应用可以通过这个方法动态申请权限，调用后会弹出一个对话框提示用户授权所申请的权限。</p>\n<h3 id=\"activitycompat.shouldshowrequestpermissionrationale\">ActivityCompat.shouldShowRequestPermissionRationale<a title=\"#activitycompat.shouldshowrequestpermissionrationale\" href=\"#activitycompat.shouldshowrequestpermissionrationale\"></a></h3>\n<p>如果应用之前请求过此权限但用户拒绝了请求，此方法将返回 true。如果用户在过去拒绝了权限请求，并在权限请求系统对话框中选择了 <code>Don't ask again</code> 选项，此方法将返回 false。如果设备规范禁止应用具有该权限，此方法也会返回 false。</p>\n<h3 id=\"onrequestpermissionsresult\">onRequestPermissionsResult<a title=\"#onrequestpermissionsresult\" href=\"#onrequestpermissionsresult\"></a></h3>\n<p>当应用请求权限时，系统将向用户显示一个对话框。当用户响应时，系统将调用应用的 <code>onRequestPermissionsResult()</code> 方法，向其传递用户响应，处理对应的场景。</p>\n<h2 id=\"具体示例\">具体示例<a title=\"#具体示例\" href=\"#具体示例\"></a></h2>\n<h3 id=\"activity中申请\">Activity中申请<a title=\"#activity中申请\" href=\"#activity中申请\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCameraClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//判断权限是否已经同意</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ActivityCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\"><span class=\"comment\">//1.还未同意</span></span><br><span class=\"line\">requestCameraPermission();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//2.已同意</span></span><br><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">requestCameraPermission</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//判断“不在提醒”复选框是否展示</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class=\"keyword\">this</span>, Manifest.permission.CAMERA)) &#123;</span><br><span class=\"line\"><span class=\"comment\">//3.复选框显示时的请求</span></span><br><span class=\"line\">ActivityCompat.requestPermissions(GooglePermissionActivity.<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, REQUEST_CAMERA);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//4.复选框不显示时的请求</span></span><br><span class=\"line\">ActivityCompat.requestPermissions(GooglePermissionActivity.<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, REQUEST_CAMERA);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果需要针对“不在提醒”复选框显示时做一些处理用上边的方式，否者干脆直接请求权限（个人推荐后者）</span></span><br><span class=\"line\"><span class=\"comment\">//        ActivityCompat.requestPermissions(GooglePermissionActivity.this, new String[]&#123;Manifest.permission.CAMERA&#125;, REQUEST_CAMERA);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, String[] permissions, <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (requestCode == REQUEST_CAMERA) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (grantResults.length &gt;<span class=\"number\">0</span>&amp;&amp; grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\"><span class=\"comment\">//5.回调权限申请成功</span></span><br><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//6.回调权限申请拒绝</span></span><br><span class=\"line\">Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;相机开启被拒绝，请到系统设置中开启相机权限。&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下边是图示（手绘的，请见谅）：<br>\n<img src=\"https://note.youdao.com/yws/api/personal/file/C3DFEBC356CF42749625C89EFB3E4C35?method=download&amp;shareKey=607ed09a504e69389d7bbb93ba5ce248\" alt=\"权限申请过程图示\"></p>\n<h3 id=\"fragment中申请\">Fragment中申请<a title=\"#fragment中申请\" href=\"#fragment中申请\"></a></h3>\n<p>在fragment中权限处理需要注意以下两点：</p>\n<ul>\n<li>在Fragment中申请权限，不要使用<code>ActivityCompat.requestPermissions</code>， 直接使用Fragment的<code>requestPermissions</code>方法，否则会回调到Activity的<code>onRequestPermissionsResult</code>方法中。</li>\n<li>如果在Fragment中嵌套Fragment，在子Fragment中使用<code>requestPermissions</code>方法，<code>onRequestPermissionsResult</code>不会回调回来，建议使用<code>getParentFragment().requestPermissions</code>方法，这个方法会回调到父Fragment中的<code>onRequestPermissionsResult</code>，加入以下代码可以把回调透传到子Fragment：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">publicvoidonRequestPermissionsResult(<span class=\"keyword\">int</span> requestCode, String[] permissions, <span class=\"keyword\">int</span>[] grantResults)&#123;</span><br><span class=\"line\"><span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">    List&lt;Fragment&gt; fragments = getChildFragmentManager().getFragments();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fragments != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Fragment fragment : fragments) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fragment != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                fragment.onRequestPermissionsResult(requestCode,permissions,grantResults);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"自定义权限\">自定义权限<a title=\"#自定义权限\" href=\"#自定义权限\"></a></h2>\n<p>在android系统的安全模型中，应用程序在默认的情况下不可以执行任何对其他应用程序，系统或者用户带来负面影响的操作。如果应用需要执行某些操作，就需要声明使用这个操作对应的权限。</p>\n<p>一般情况下我们都是注册系统权限来满足对系统相关组件的操作，我们还可以自定义属于我们自己app的权限来满足来自其他程序安全的交互通信。</p>\n<h2 id=\"自定权限实现过程\">自定权限实现过程<a title=\"#自定权限实现过程\" href=\"#自定权限实现过程\"></a></h2>\n<h3 id=\"权限声明\">权限声明<a title=\"#权限声明\" href=\"#权限声明\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;permission</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.bigrun.permissionforandroidm.customerpermission1&quot;</span></span><br><span class=\"line\">    android:description=<span class=\"string\">&quot;@string/hello_world&quot;</span></span><br><span class=\"line\">    android:label=<span class=\"string\">&quot;@string/app_name&quot;</span></span><br><span class=\"line\">    android:protectionLevel=<span class=\"string\">&quot;normal&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>自定义权限中标示说明：</p>\n<ul>\n<li>android:name：权限的唯一标识，一般都是使用 包名加权限名 。(必写)</li>\n<li>android:label：对权限的一个简短描述。</li>\n<li>android:description：对权限的描述，一般是两句话，第一句话描述这个权限所针对的操作，第二句话告诉用户授予app这个权限会带来的后果 。</li>\n<li>android:permissionGroup：权限所属权限组的名称 。</li>\n<li>android:protectionLevel：权限的等级。(必写)</li>\n</ul>\n<p>权限的等级分为如下四个：</p>\n<ul>\n<li>normal：是最低的等级，声明此权限的app，系统会默认授予次权限，不会提示用户 。</li>\n<li>dangerous：权限对应的操作有安全风险，系统在安装声明此类权限的app时会提示用户 ，在android6.0以上会出现运行时提示权限申请对话框。</li>\n<li>signature：此权限的申请若想正常使用必须保证两个应用的签名一致。</li>\n<li>signatureOrSystem：与signature类似，只是增加了rom中自带的app的声明 。</li>\n</ul>\n<h3 id=\"指定某个组件启动时使用此权限\">指定某个组件启动时使用此权限<a title=\"#指定某个组件启动时使用此权限\" href=\"#指定某个组件启动时使用此权限\"></a></h3>\n<p>这里我们指定程序的主程序拥有此权限：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=<span class=\"string\">&quot;.TestActivity&quot;</span> android:permission=<span class=\"string\">&quot;com.bigrun.permissionforandroidm.customerpermission1&quot;</span>&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;</span><br><span class=\"line\">        &lt;action android:name=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/activity&gt;</span><br></pre></td></tr></table></figure>\n<p>作为启动界面，一定要有一个过滤器设置其启动方式为主界面启动。</p>\n<h3 id=\"在另一个应用中去启动此界面\">在另一个应用中去启动此界面<a title=\"#在另一个应用中去启动此界面\" href=\"#在另一个应用中去启动此界面\"></a></h3>\n<p>注册上一个应用程序的自定义权限：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;com.example.customerpermission1&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>启动上一个应用程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">ComponentName componentName = <span class=\"keyword\">new</span> ComponentName(<span class=\"string\">&quot;com.bigrun.permissionforandroidm&quot;</span>,<span class=\"string\">&quot;com.bigrun.permissionforandroidm.TestActivity&quot;</span>);</span><br><span class=\"line\">intent.setComponent(componentName);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义权限组\">自定义权限组<a title=\"#自定义权限组\" href=\"#自定义权限组\"></a></h2>\n<p>自定义权限中，我们也可以设定一个权限组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;permission-group</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.bigrun.permissionforandroidm.customerpermissiongroup&quot;</span></span><br><span class=\"line\">    android:description=<span class=\"string\">&quot;@string/hello_world&quot;</span></span><br><span class=\"line\">    android:label=<span class=\"string\">&quot;@string/app_name&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;permission</span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.bigrun.permissionforandroidm.customerpermission1&quot;</span></span><br><span class=\"line\">    android:description=<span class=\"string\">&quot;@string/hello_world&quot;</span></span><br><span class=\"line\">    android:label=<span class=\"string\">&quot;@string/app_name&quot;</span></span><br><span class=\"line\">    android:permissionGroup=<span class=\"string\">&quot;com.bigrun.permissionforandroidm.customerpermissiongroup&quot;</span></span><br><span class=\"line\">    android:protectionLevel=<span class=\"string\">&quot;normal&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>在另外一个app中同样要注册这个权限组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">&quot;com.bigrun.permissionforandroidm.customerpermission1&quot;</span>/&gt;</span><br><span class=\"line\">&lt;permission-tree android:name=<span class=\"string\">&quot;com.kifile.test.permission&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>大家可以看到，其实在权限处理这块还是挺繁琐的，总不能为了一个相机的启动我们都要写这么大一堆代码，本篇主要目的讲的是运行时权限的一个申请过程，注意是过程，开发过程中注重敏捷开发，没必要关注内部细节，还是应了那句话——不会偷懒的程序员不是好程序员。其实google也知道很繁琐，不得已自己专门封装了一个库——<a href=\"https://github.com/googlesamples/easypermissions\" target=\"_blank\">Easypermissions</a>。当然我们也有更简单的方式，gayhub从来不缺人才——<a href=\"https://github.com/tbruyelle/RxPermissions\" target=\"_blank\">RxPermissions</a>。</p>\n<p>如果上边大佬们的库你不喜欢，也可以自己造一个，我这里给一个思路，就是把上边权限请求的过程封装到一个Fragment中，该Fragment是无界面的！无界面的！无界面的！（回声三连），然后自己定义的弹框什么的都可以在里面实现。</p>\n<h2 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h2>\n<ul>\n<li><a href=\"https://developer.android.com/guide/topics/security/permissions.html?hl=zh-cn\">https://developer.android.com/guide/topics/security/permissions.html?hl=zh-cn</a></li>\n<li><a href=\"https://github.com/googlesamples/easypermissions\">https://github.com/googlesamples/easypermissions</a></li>\n<li><a href=\"https://github.com/tbruyelle/RxPermissions\">https://github.com/tbruyelle/RxPermissions</a></li>\n</ul>\n","prev":{"title":"Android开发之单元测试初探","link":"posts/1465713367"},"next":{"title":"Android核心架构探究学习","link":"posts/1440754130"},"plink":"https://blog.ixin.run/posts/1459478411/","toc":[{"id":"设计模式","title":"设计模式","index":"1"},{"id":"安全架构","title":"安全架构","index":"2"},{"id":"应用签署","title":"应用签署","index":"3"},{"id":"用户-id-和文件访问","title":"用户 ID 和文件访问","index":"4"},{"id":"使用权限","title":"使用权限","index":"5"},{"id":"权限分类","title":"权限分类","index":"6"},{"id":"权限组","title":"权限组","index":"7"},{"id":"相关方法","title":"相关方法","index":"8","children":[{"id":"contextcompat.checkselfpermission","title":"ContextCompat.checkSelfPermission","index":"8.1"},{"id":"activitycompat.requestpermissions","title":"ActivityCompat.requestPermissions","index":"8.2"},{"id":"activitycompat.shouldshowrequestpermissionrationale","title":"ActivityCompat.shouldShowRequestPermissionRationale","index":"8.3"},{"id":"onrequestpermissionsresult","title":"onRequestPermissionsResult","index":"8.4"}]},{"id":"具体示例","title":"具体示例","index":"9","children":[{"id":"activity中申请","title":"Activity中申请","index":"9.1"},{"id":"fragment中申请","title":"Fragment中申请","index":"9.2"}]},{"id":"自定义权限","title":"自定义权限","index":"10"},{"id":"自定权限实现过程","title":"自定权限实现过程","index":"11","children":[{"id":"权限声明","title":"权限声明","index":"11.1"},{"id":"指定某个组件启动时使用此权限","title":"指定某个组件启动时使用此权限","index":"11.2"},{"id":"在另一个应用中去启动此界面","title":"在另一个应用中去启动此界面","index":"11.3"}]},{"id":"自定义权限组","title":"自定义权限组","index":"12"},{"id":"总结","title":"总结","index":"13"},{"id":"参考","title":"参考","index":"14"}],"reward":true,"copyright":{"author":"i猩人","link":"<a href=\"https://blog.ixin.run/posts/1459478411/\" title=\"Android开发权限处理和自定义权限\">https://blog.ixin.run/posts/1459478411/</a>","license":"本文遵循<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"rel=\"external nofollow\" target=\"_blank\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接及本声明。"}}